{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.10.0", "generated_at": "2025-09-30T08:38:23.903700Z", "invocation_id": "52d5323e-3fed-4ea8-9cdb-3f2a62a59bdc", "invocation_started_at": "2025-09-30T08:38:21.415873Z", "env": {}, "project_name": "mezo", "project_id": "4afdb2d04274823532d10659764ba2e2", "user_id": "405b1403-d998-49ac-9951-bfa0f3be4223", "send_anonymous_usage_stats": true, "adapter_type": "bigquery", "quoting": {"database": true, "schema": true, "identifier": true, "column": null}}, "nodes": {"model.mezo.stg_seed_musd_market_map": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_seed_musd_market_map", "resource_type": "model", "package_name": "mezo", "path": "10_staging/seed/stg_seed_musd_market_map.sql", "original_file_path": "models/10_staging/seed/stg_seed_musd_market_map.sql", "unique_id": "model.mezo.stg_seed_musd_market_map", "fqn": ["mezo", "10_staging", "seed", "stg_seed_musd_market_map"], "alias": "stg_seed_musd_market_map", "checksum": {"name": "sha256", "checksum": "f41af05ee13dec218e52c163e3bf74166ea5fbdf1bd086ddbb7e03cc5fcbd977"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Standardized view of MUSD market mappings used for market identification and reference data.", "columns": {"market_id": {"name": "market_id", "description": "The unique identifier for the market (either a blockchain address or a numeric ID)", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_name": {"name": "market_name", "description": "The name of the market (e.g., Brink, SheFi, or product identifiers)", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/seed/stg_seed_musd_market_map.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.5784981, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_seed_musd_market_map`", "raw_code": "with\n    source as (select * from {{ ref(\"musd_market_map\") }}),\n\n    renamed as (select id as market_id, name as market_name from source)\n\nselect *\nfrom renamed", "doc_blocks": [], "language": "sql", "refs": [{"name": "musd_market_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.mezo.musd_market_map"]}, "compiled_path": "target/compiled/mezo/models/10_staging/seed/stg_seed_musd_market_map.sql", "compiled": true, "compiled_code": "with\n    source as (select * from `mezo-portal-data`.`dbt`.`musd_market_map`),\n\n    renamed as (select id as market_id, name as market_name from source)\n\nselect *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["market_id"], "time_spine": null}, "model.mezo.stg_goldsky_market_mezo__order_placed": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_goldsky_market_mezo__order_placed", "resource_type": "model", "package_name": "mezo", "path": "10_staging/goldsky/stg_goldsky_market_mezo__order_placed.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.sql", "unique_id": "model.mezo.stg_goldsky_market_mezo__order_placed", "fqn": ["mezo", "10_staging", "goldsky", "stg_goldsky_market_mezo__order_placed"], "alias": "stg_goldsky_market_mezo__order_placed", "checksum": {"name": "sha256", "checksum": "e43439dd8e0e7dca5bc18668b0bcd82473a5a0890211ad969c3ba2888826e0ca"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Processes raw order placed data from the market, transforming and normalizing price fields for downstream analysis.", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "Unique identifier for the order", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer": {"name": "customer", "description": "Address of the customer who placed the order", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Product identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "Price of the order (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.5985334, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__order_placed`", "raw_code": "with\n    source as (\n        select *\n        from {{ source(\"raw_goldsky\", \"raw_goldsky_market_mezo__order_placed\") }}\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            order_id,\n            customer,\n            price,\n            _gs_chain,\n            _gs_gid,\n            lower(product_id) as product_id,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select * except (price), {{ format_musd_currency_columns([\"price\"]) }}\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_goldsky", "raw_goldsky_market_mezo__order_placed"]], "metrics": [], "depends_on": {"macros": ["macro.mezo.format_musd_currency_columns"], "nodes": ["source.mezo.raw_goldsky.raw_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.sql", "compiled": true, "compiled_code": "with\n    source as (\n        select *\n        from `mezo-portal-data`.`raw_goldsky`.`raw_goldsky_market_mezo__order_placed`\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            order_id,\n            customer,\n            price,\n            _gs_chain,\n            _gs_gid,\n            lower(product_id) as product_id,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select * except (price), \n    \n        coalesce(safe_cast(price as numeric), 0) / 1e18 as price\n        \n    \n\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_id"], "time_spine": null}, "model.mezo.stg_goldsky_musd_trove_manager__trove_liquidated": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_goldsky_musd_trove_manager__trove_liquidated", "resource_type": "model", "package_name": "mezo", "path": "10_staging/goldsky/stg_goldsky_musd_trove_manager__trove_liquidated.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_musd_trove_manager__trove_liquidated.sql", "unique_id": "model.mezo.stg_goldsky_musd_trove_manager__trove_liquidated", "fqn": ["mezo", "10_staging", "goldsky", "stg_goldsky_musd_trove_manager__trove_liquidated"], "alias": "stg_goldsky_musd_trove_manager__trove_liquidated", "checksum": {"name": "sha256", "checksum": "d9db3b3f1eebecb271355041b24567fb80967cfb26c66cd7af9f2beece675b42"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Processes and transforms raw trove liquidation data from Goldsky, converting values to human-readable formats and standardizing timestamps for analytical use.", "columns": {"vid": {"name": "vid", "description": "Unique version identifier for the record", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier for the liquidation event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "The blockchain block number where the liquidation occurred", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the blockchain transaction containing the liquidation event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Identifier of the smart contract where the liquidation was executed", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrower": {"name": "borrower", "description": "Blockchain address of the borrower whose trove was liquidated", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Goldsky-specific field indicating the blockchain network", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Goldsky-specific global identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of when the liquidation event occurred, converted from milliseconds to a readable timestamp format", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "operation": {"name": "operation", "description": "Type of operation performed during the trove liquidation event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "debt": {"name": "debt", "description": "Amount of debt liquidated in the trove, normalized by dividing by 1e18", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral": {"name": "collateral", "description": "Amount of collateral liquidated in the trove, normalized by dividing by 1e18", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/goldsky/stg_goldsky_musd_trove_manager__trove_liquidated.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.633872, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_goldsky_musd_trove_manager__trove_liquidated`", "raw_code": "with\n    source as (\n        select *\n        from\n            {{\n                source(\n                    \"raw_goldsky\", \"raw_goldsky_musd_trove_manager__trove_liquidated\"\n                )\n            }}\n    ),\n\n    renamed as (\n        select\n            vid,\n            -- `block`, --duplicate of block_number\n            id,\n            block_number,\n            transaction_hash,\n            contract_id,\n            borrower,\n            debt,\n            coll as collateral,\n            operation,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select\n            * except (debt, collateral, operation),\n            {{ categorize_operation(\"operation\") }} as operation,\n            {{ format_musd_currency_columns([\"debt\", \"collateral\"]) }}\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_goldsky", "raw_goldsky_musd_trove_manager__trove_liquidated"]], "metrics": [], "depends_on": {"macros": ["macro.mezo.categorize_operation", "macro.mezo.format_musd_currency_columns"], "nodes": ["source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__trove_liquidated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_musd_trove_manager__trove_liquidated.sql", "compiled": true, "compiled_code": "with\n    source as (\n        select *\n        from\n            `mezo-portal-data`.`raw_goldsky`.`raw_goldsky_musd_trove_manager__trove_liquidated`\n    ),\n\n    renamed as (\n        select\n            vid,\n            -- `block`, --duplicate of block_number\n            id,\n            block_number,\n            transaction_hash,\n            contract_id,\n            borrower,\n            debt,\n            coll as collateral,\n            operation,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select\n            * except (debt, collateral, operation),\n            \n    case\n        when operation = \"0\"\n        then \"new_loan\"\n        when operation = \"1\"\n        then \"closed_loan\"\n        when operation = \"2\"\n        then \"adjusted_loan\"\n        when operation = \"3\"\n        then \"refinanced_loan\"\n        else \"unknown_operation\"\n    end\n as operation,\n            \n    \n        coalesce(safe_cast(debt as numeric), 0) / 1e18 as debt\n        ,\n    \n        coalesce(safe_cast(collateral as numeric), 0) / 1e18 as collateral\n        \n    \n\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_goldsky_borrower_operations_mezo__trove_updated", "resource_type": "model", "package_name": "mezo", "path": "10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.sql", "unique_id": "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated", "fqn": ["mezo", "10_staging", "goldsky", "stg_goldsky_borrower_operations_mezo__trove_updated"], "alias": "stg_goldsky_borrower_operations_mezo__trove_updated", "checksum": {"name": "sha256", "checksum": "8993b1f9ceacceb374ca2e35701387c0403be910939fc62918b00d01a7896b78"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Processes raw trove updated data from borrower operations, transforming and normalizing currency fields for downstream analysis.", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrower": {"name": "borrower", "description": "Address of the borrower", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_interest_update_time": {"name": "last_interest_update_time", "description": "Timestamp of the last interest update", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "operation": {"name": "operation", "description": "Type of operation performed on the trove", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "principal": {"name": "principal", "description": "Principal debt amount (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "interest": {"name": "interest", "description": "Interest amount (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral": {"name": "collateral", "description": "Collateral amount (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stake": {"name": "stake", "description": "Stake amount (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.6252928, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_goldsky_borrower_operations_mezo__trove_updated`", "raw_code": "with\n    source as (\n        select *\n        from\n            {{\n                source(\n                    \"raw_goldsky\",\n                    \"raw_goldsky_borrower_operations_mezo__trove_updated\",\n                )\n            }}\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            borrower,\n            principal,\n            interest,\n            coll as collateral,\n            stake,\n            interest_rate,\n            last_interest_update_time,\n            operation,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select\n            * except (principal, interest, collateral, stake, interest_rate, operation),\n            {{ categorize_operation(\"operation\") }} as operation,\n            {{\n                format_musd_currency_columns(\n                    [\"principal\", \"interest\", \"collateral\", \"stake\"]\n                )\n            }}\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_goldsky", "raw_goldsky_borrower_operations_mezo__trove_updated"]], "metrics": [], "depends_on": {"macros": ["macro.mezo.categorize_operation", "macro.mezo.format_musd_currency_columns"], "nodes": ["source.mezo.raw_goldsky.raw_goldsky_borrower_operations_mezo__trove_updated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.sql", "compiled": true, "compiled_code": "with\n    source as (\n        select *\n        from\n            `mezo-portal-data`.`raw_goldsky`.`raw_goldsky_borrower_operations_mezo__trove_updated`\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            borrower,\n            principal,\n            interest,\n            coll as collateral,\n            stake,\n            interest_rate,\n            last_interest_update_time,\n            operation,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select\n            * except (principal, interest, collateral, stake, interest_rate, operation),\n            \n    case\n        when operation = \"0\"\n        then \"new_loan\"\n        when operation = \"1\"\n        then \"closed_loan\"\n        when operation = \"2\"\n        then \"adjusted_loan\"\n        when operation = \"3\"\n        then \"refinanced_loan\"\n        else \"unknown_operation\"\n    end\n as operation,\n            \n    \n        coalesce(safe_cast(principal as numeric), 0) / 1e18 as principal\n        ,\n    \n        coalesce(safe_cast(interest as numeric), 0) / 1e18 as interest\n        ,\n    \n        coalesce(safe_cast(collateral as numeric), 0) / 1e18 as collateral\n        ,\n    \n        coalesce(safe_cast(stake as numeric), 0) / 1e18 as stake\n        \n    \n\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_goldsky_market_mezo__donated": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_goldsky_market_mezo__donated", "resource_type": "model", "package_name": "mezo", "path": "10_staging/goldsky/stg_goldsky_market_mezo__donated.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__donated.sql", "unique_id": "model.mezo.stg_goldsky_market_mezo__donated", "fqn": ["mezo", "10_staging", "goldsky", "stg_goldsky_market_mezo__donated"], "alias": "stg_goldsky_market_mezo__donated", "checksum": {"name": "sha256", "checksum": "1c257981b8a3bc0e5dd8a673dcf9e313829dd14784d8e836a6d1ba0bb0799fce"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Processes raw donation data from the market, transforming and normalizing amount fields for downstream analysis.", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "donor": {"name": "donor", "description": "Address of the donor", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "beneficiary_id": {"name": "beneficiary_id", "description": "ID of the beneficiary", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "Address of the recipient", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount that was donated (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.6089237, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__donated`", "raw_code": "with\n    source as (\n        select * from {{ source(\"raw_goldsky\", \"raw_goldsky_market_mezo__donated\") }}\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            donor,\n            beneficiary_id,\n            amount,\n            _gs_chain,\n            _gs_gid,\n            lower(recipient) as recipient,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select * except (amount), {{ format_musd_currency_columns([\"amount\"]) }}\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_goldsky", "raw_goldsky_market_mezo__donated"]], "metrics": [], "depends_on": {"macros": ["macro.mezo.format_musd_currency_columns"], "nodes": ["source.mezo.raw_goldsky.raw_goldsky_market_mezo__donated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__donated.sql", "compiled": true, "compiled_code": "with\n    source as (\n        select * from `mezo-portal-data`.`raw_goldsky`.`raw_goldsky_market_mezo__donated`\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            donor,\n            beneficiary_id,\n            amount,\n            _gs_chain,\n            _gs_gid,\n            lower(recipient) as recipient,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select * except (amount), \n    \n        coalesce(safe_cast(amount as numeric), 0) / 1e18 as amount\n        \n    \n\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_goldsky_musd_trove_manager__liquidation": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_goldsky_musd_trove_manager__liquidation", "resource_type": "model", "package_name": "mezo", "path": "10_staging/goldsky/stg_goldsky_musd_trove_manager__liquidation.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_musd_trove_manager__liquidation.sql", "unique_id": "model.mezo.stg_goldsky_musd_trove_manager__liquidation", "fqn": ["mezo", "10_staging", "goldsky", "stg_goldsky_musd_trove_manager__liquidation"], "alias": "stg_goldsky_musd_trove_manager__liquidation", "checksum": {"name": "sha256", "checksum": "d29cda5ba8a8bc2a8f25aba4ca2e322f0b63b23b2c873433dd6bc958eda8799c"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Processes raw liquidation data from the Trove Manager system, transforming and calculating key metrics for downstream analysis.", "columns": {"vid": {"name": "vid", "description": "Unique vertex identifier for the liquidation record", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block": {"name": "block", "description": "Block data associated with the liquidation transaction", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier for the liquidation event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Blockchain block number when the liquidation occurred", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the blockchain transaction containing the liquidation", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Identifier of the contract involved in the liquidation", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coll_gas_compensation": {"name": "coll_gas_compensation", "description": "Gas compensation related to the collateral in the liquidation process", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gas_compensation": {"name": "gas_compensation", "description": "General gas compensation for the liquidation transaction", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Goldsky chain identifier for the blockchain network", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Goldsky global identifier for the record", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of when the liquidation was recorded, converted from milliseconds to timestamp format", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_principal": {"name": "liquidated_principal", "description": "Amount of principal that was liquidated, formatted as currency", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_interest": {"name": "liquidated_interest", "description": "Amount of interest that was liquidated, formatted as currency", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_collateral": {"name": "liquidated_collateral", "description": "Amount of collateral that was liquidated, formatted as currency", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/goldsky/stg_goldsky_musd_trove_manager__liquidation.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.619387, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_goldsky_musd_trove_manager__liquidation`", "raw_code": "with\n    source as (\n        select *\n        from {{ source(\"raw_goldsky\", \"raw_goldsky_musd_trove_manager__liquidation\") }}\n    ),\n\n    renamed as (\n        select\n            vid,\n            block,\n            id,\n            block_number,\n            transaction_hash,\n            contract_id,\n            liquidated_principal,\n            liquidated_interest,\n            liquidated_coll as liquidated_collateral,\n            coll_gas_compensation,\n            gas_compensation,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select\n            * except (liquidated_principal, liquidated_interest, liquidated_collateral),\n            {{\n                format_musd_currency_columns(\n                    [\n                        \"liquidated_principal\",\n                        \"liquidated_interest\",\n                        \"liquidated_collateral\",\n                    ]\n                )\n            }}\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_goldsky", "raw_goldsky_musd_trove_manager__liquidation"]], "metrics": [], "depends_on": {"macros": ["macro.mezo.format_musd_currency_columns"], "nodes": ["source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__liquidation"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_musd_trove_manager__liquidation.sql", "compiled": true, "compiled_code": "with\n    source as (\n        select *\n        from `mezo-portal-data`.`raw_goldsky`.`raw_goldsky_musd_trove_manager__liquidation`\n    ),\n\n    renamed as (\n        select\n            vid,\n            block,\n            id,\n            block_number,\n            transaction_hash,\n            contract_id,\n            liquidated_principal,\n            liquidated_interest,\n            liquidated_coll as liquidated_collateral,\n            coll_gas_compensation,\n            gas_compensation,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select\n            * except (liquidated_principal, liquidated_interest, liquidated_collateral),\n            \n    \n        coalesce(safe_cast(liquidated_principal as numeric), 0) / 1e18 as liquidated_principal\n        ,\n    \n        coalesce(safe_cast(liquidated_interest as numeric), 0) / 1e18 as liquidated_interest\n        ,\n    \n        coalesce(safe_cast(liquidated_collateral as numeric), 0) / 1e18 as liquidated_collateral\n        \n    \n\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_goldsky_mezo_vaults_mezo__transfer", "resource_type": "model", "package_name": "mezo", "path": "10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.sql", "unique_id": "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer", "fqn": ["mezo", "10_staging", "goldsky", "stg_goldsky_mezo_vaults_mezo__transfer"], "alias": "stg_goldsky_mezo_vaults_mezo__transfer", "checksum": {"name": "sha256", "checksum": "6b755e92a08cabc5c36844bb2d30f358ef7a715af5a44958e70bafce046786b7"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Processes raw transfer data from Mezo vaults, transforming and normalizing amount fields for downstream analysis.", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sender": {"name": "sender", "description": "Address of the sender (renamed from 'from')", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "Address of the recipient (renamed from 'to')", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount that was transferred (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.5875676, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_vaults_mezo__transfer`", "raw_code": "with\n    source as (\n        select *\n        from {{ source(\"raw_goldsky\", \"raw_goldsky_mezo_vaults_mezo__transfer\") }}\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            `from` as sender,\n            `to` as recipient,\n            value as amount,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select * except (amount), {{ format_musd_currency_columns([\"amount\"]) }}\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_goldsky", "raw_goldsky_mezo_vaults_mezo__transfer"]], "metrics": [], "depends_on": {"macros": ["macro.mezo.format_musd_currency_columns"], "nodes": ["source.mezo.raw_goldsky.raw_goldsky_mezo_vaults_mezo__transfer"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.sql", "compiled": true, "compiled_code": "with\n    source as (\n        select *\n        from `mezo-portal-data`.`raw_goldsky`.`raw_goldsky_mezo_vaults_mezo__transfer`\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            `from` as sender,\n            `to` as recipient,\n            value as amount,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    transformed_fields as (\n        select * except (amount), \n    \n        coalesce(safe_cast(amount as numeric), 0) / 1e18 as amount\n        \n    \n\n        from renamed\n    )\n\nselect *\nfrom transformed_fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "resource_type": "model", "package_name": "mezo", "path": "10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.sql", "unique_id": "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "fqn": ["mezo", "10_staging", "goldsky", "stg_goldsky_mezo_bridge_mainnet__assets_locked"], "alias": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "checksum": {"name": "sha256", "checksum": "37aa33ae02ecf6f2aa7c5def85ce2e6ffc9850e4df8cb052852441bcf505b77f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Processes raw assets locked data from the Mezo bridge on mainnet, transforming and normalizing amount fields based on token type for downstream analysis.", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sequence_number": {"name": "sequence_number", "description": "Sequence number for the lock event", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "Address of the asset recipient", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_address": {"name": "token_address", "description": "Address of the token", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount of tokens locked (normalized based on token decimals)", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mainnet'", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.635836, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`", "raw_code": "with\n    source as (\n        select *\n        from\n            {{\n                source(\n                    \"raw_goldsky\", \"raw_goldsky_mezo_bridge_mainnet__assets_locked\"\n                )\n            }}\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            sequence_number,\n            recipient,\n            token as token_address,\n            amount,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    deduplicated as (\n        select *\n        from renamed\n        qualify\n            row_number() over (\n                partition by sequence_number order by record_timestamp desc\n            )\n            = 1\n    )\n\nselect *\nfrom deduplicated", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_goldsky", "raw_goldsky_mezo_bridge_mainnet__assets_locked"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mezo.raw_goldsky.raw_goldsky_mezo_bridge_mainnet__assets_locked"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.sql", "compiled": true, "compiled_code": "with\n    source as (\n        select *\n        from\n            `mezo-portal-data`.`raw_goldsky`.`raw_goldsky_mezo_bridge_mainnet__assets_locked`\n    ),\n\n    renamed as (\n        select\n            block,\n            block_number,\n            transaction_hash,\n            contract_id,\n            sequence_number,\n            recipient,\n            token as token_address,\n            amount,\n            _gs_chain,\n            _gs_gid,\n            timestamp_seconds(cast(`timestamp` as int)) as record_timestamp\n        from source\n    ),\n\n    deduplicated as (\n        select *\n        from renamed\n        qualify\n            row_number() over (\n                partition by sequence_number order by record_timestamp desc\n            )\n            = 1\n    )\n\nselect *\nfrom deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["sequence_number"], "time_spine": null}, "model.mezo.stg_coin_gecko__coins": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_coin_gecko__coins", "resource_type": "model", "package_name": "mezo", "path": "10_staging/coin_gecko/stg_coin_gecko__coins.sql", "original_file_path": "models/10_staging/coin_gecko/stg_coin_gecko__coins.sql", "unique_id": "model.mezo.stg_coin_gecko__coins", "fqn": ["mezo", "10_staging", "coin_gecko", "stg_coin_gecko__coins"], "alias": "stg_coin_gecko__coins", "checksum": {"name": "sha256", "checksum": "94d726259e2ad94b1eba7ea138f3e24dfa845a718cdc9392cbbf4fcc41df5aee"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "Unique identifier of the coin in CoinGecko.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "symbol": {"name": "symbol", "description": "Ticker symbol of the coin.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "Full name of the coin.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_dlt_load_id": {"name": "_dlt_load_id", "description": "Identifier for the data load batch from the DLT pipeline.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_dlt_id": {"name": "_dlt_id", "description": "Unique row identifier assigned by the DLT pipeline.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "platforms": {"name": "platforms", "description": "JSON object containing platform-specific contract addresses (e.g., Ethereum, BNB Chain).", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/coin_gecko/stg_coin_gecko__coins.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.6492052, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_coin_gecko__coins`", "raw_code": "with\n    source as (select * from {{ source(\"raw_coin_gecko\", \"coins\") }}),\n\n    renamed as (select id, symbol, name, _dlt_load_id, _dlt_id, platforms from source)\n\nselect *\nfrom renamed", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_coin_gecko", "coins"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mezo.raw_coin_gecko.coins"]}, "compiled_path": "target/compiled/mezo/models/10_staging/coin_gecko/stg_coin_gecko__coins.sql", "compiled": true, "compiled_code": "with\n    source as (select * from `mezo-portal-data`.`raw_coin_gecko`.`coins`),\n\n    renamed as (select id, symbol, name, _dlt_load_id, _dlt_id, platforms from source)\n\nselect *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_coin_gecko__prices": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_coin_gecko__prices", "resource_type": "model", "package_name": "mezo", "path": "10_staging/coin_gecko/stg_coin_gecko__prices.sql", "original_file_path": "models/10_staging/coin_gecko/stg_coin_gecko__prices.sql", "unique_id": "model.mezo.stg_coin_gecko__prices", "fqn": ["mezo", "10_staging", "coin_gecko", "stg_coin_gecko__prices"], "alias": "stg_coin_gecko__prices", "checksum": {"name": "sha256", "checksum": "a42c9447064e11e923d59e0837cf96f6eca3c2afdfa9b028100c237e24003125"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "Unique identifier for this price record", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coin_id": {"name": "coin_id", "description": "Unique identifier for coins", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "usd_value": {"name": "usd_value", "description": "Price of the coin in USD at the given timestamp.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp when the price was last updated by CoinGecko.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_dlt_load_id": {"name": "_dlt_load_id", "description": "Batch load identifier from the DLT ingestion process.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_dlt_id": {"name": "_dlt_id", "description": "Unique row identifier generated by the DLT ingestion process.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/coin_gecko/stg_coin_gecko__prices.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.647612, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_coin_gecko__prices`", "raw_code": "with\n    source as (select * from {{ source(\"raw_coin_gecko\", \"prices\") }}),\n\n    renamed as (\n        select id, coin_id, usd_value, last_updated_at, _dlt_load_id, _dlt_id\n        from source\n    )\n\nselect *\nfrom renamed", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_coin_gecko", "prices"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mezo.raw_coin_gecko.prices"]}, "compiled_path": "target/compiled/mezo/models/10_staging/coin_gecko/stg_coin_gecko__prices.sql", "compiled": true, "compiled_code": "with\n    source as (select * from `mezo-portal-data`.`raw_coin_gecko`.`prices`),\n\n    renamed as (\n        select id, coin_id, usd_value, last_updated_at, _dlt_load_id, _dlt_id\n        from source\n    )\n\nselect *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_segment_profiles__user_identifiers": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_segment_profiles__user_identifiers", "resource_type": "model", "package_name": "mezo", "path": "10_staging/segment/stg_segment_profiles__user_identifiers.sql", "original_file_path": "models/10_staging/segment/stg_segment_profiles__user_identifiers.sql", "unique_id": "model.mezo.stg_segment_profiles__user_identifiers", "fqn": ["mezo", "10_staging", "segment", "stg_segment_profiles__user_identifiers"], "alias": "stg_segment_profiles__user_identifiers", "checksum": {"name": "sha256", "checksum": "dde95005933d5345c0c1b2c2fbf1d89bb2dccbcfbce99a6b7cc4c11839cd095f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Stage for user identifiers from Segment Profiles https://segment.com/docs/unify/profiles-sync/tables/ The user_identifiers table contains all external ID values that map to a profile, which is represented by the canonical_segment_id.", "columns": {"_profile_version": {"name": "_profile_version", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_segment_id": {"name": "canonical_segment_id", "description": "The fully-merged Segment ID (the profile Segment now understands any events or identifiers to map to).", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loaded_at": {"name": "loaded_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_at": {"name": "received_at", "description": "The timestamp when the Segment API receives the payload from the client or server.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "seq_id": {"name": "seq_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id_type": {"name": "id_type", "description": "The type of external identifier sent in the incoming event, such as user_id or anonymous_id. External identifiers become the identities attached to a user profile.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "uuid_ts": {"name": "uuid_ts", "description": "A unique identifier of the timestamp.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "trait_value": {"name": "trait_value", "description": "The value of the trait provided by the customer\u2019s Identify payload.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/segment/stg_segment_profiles__user_identifiers.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.6523073, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__user_identifiers`", "raw_code": "with\n    source as (select * from {{ source(\"raw_segment_profiles\", \"user_identifiers\") }}),\n\n    renamed as (\n        select\n            __profile_version as _profile_version,\n            canonical_segment_id,\n            id,\n            loaded_at,\n            received_at,\n            seq as seq_id,\n            type as id_type,\n            uuid_ts,\n            value as trait_value\n        from source\n    )\n\nselect *\nfrom renamed", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_segment_profiles", "user_identifiers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mezo.raw_segment_profiles.user_identifiers"]}, "compiled_path": "target/compiled/mezo/models/10_staging/segment/stg_segment_profiles__user_identifiers.sql", "compiled": true, "compiled_code": "with\n    source as (select * from `mezo-portal-data`.`raw_segment_profiles`.`user_identifiers`),\n\n    renamed as (\n        select\n            __profile_version as _profile_version,\n            canonical_segment_id,\n            id,\n            loaded_at,\n            received_at,\n            seq as seq_id,\n            type as id_type,\n            uuid_ts,\n            value as trait_value\n        from source\n    )\n\nselect *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_segment__union_events": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_segment__union_events", "resource_type": "model", "package_name": "mezo", "path": "10_staging/segment/stg_segment__union_events.sql", "original_file_path": "models/10_staging/segment/stg_segment__union_events.sql", "unique_id": "model.mezo.stg_segment__union_events", "fqn": ["mezo", "10_staging", "segment", "stg_segment__union_events"], "alias": "stg_segment__union_events", "checksum": {"name": "sha256", "checksum": "c5feb746f43c66b3f9555a9fa5e749fad6fe015081a10c2017702073aaf4e7ee"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"_dbt_source_relation": {"name": "_dbt_source_relation", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_source": {"name": "utm_source", "description": "UTM source parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "UTM medium parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "UTM campaign parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "UTM term parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "UTM content parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ip": {"name": "ip", "description": "IP address of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "library_name": {"name": "library_name", "description": "Name of the Segment library sending the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_library_version": {"name": "context_library_version", "description": "Version of the Segment library", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_locale": {"name": "context_locale", "description": "User\u2019s locale setting (e.g., en-US, de-DE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_path": {"name": "page_url_path", "description": "Path of the page URL (excluding domain and query string)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "Full referrer URL from which the user navigated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_query": {"name": "page_url_query", "description": "Query string from the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_title": {"name": "context_page_title", "description": "Title of the page from the HTML document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url": {"name": "page_url", "description": "Full page URL (protocol + domain + path + query)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_source_id": {"name": "context_protocols_source_id", "description": "Internal identifier from Segment protocols", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_violations": {"name": "context_protocols_violations", "description": "Protocol validation issues recorded by Segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_timezone": {"name": "context_timezone", "description": "User\u2019s timezone (e.g., Europe/Berlin)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_agent": {"name": "user_agent", "description": "Raw User-Agent string from the browser", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_brands": {"name": "context_user_agent_data_brands", "description": "JSON metadata about the browser family/version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_mobile": {"name": "context_user_agent_data_mobile", "description": "Flag indicating whether the device is mobile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_platform": {"name": "context_user_agent_data_platform", "description": "User-Agent platform (e.g., macOS, Linux, Windows)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_name": {"name": "event_name", "description": "Name of the tracked event (e.g., \"button_clicked\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_id": {"name": "event_source_id", "description": "Internal identifier for the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_name": {"name": "source_name", "description": "Name of the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_slug": {"name": "event_source_slug", "description": "Slugified version of the event source name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_text": {"name": "event_text", "description": "Text or description field associated with the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier for the track event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp when the row was loaded into the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_timestamp": {"name": "original_timestamp", "description": "Original event timestamp from the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_at_tstamp": {"name": "received_at_tstamp", "description": "Timestamp when Segment received the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_id": {"name": "segment_id", "description": "Unique Segment identifier for the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sent_at": {"name": "sent_at", "description": "Timestamp when the event was sent by the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tstamp": {"name": "tstamp", "description": "Timestamp recorded by the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "Segment user_id (if logged in)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "uuid_ts": {"name": "uuid_ts", "description": "Technical field combining UUID and timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_event_transformed": {"name": "context_event_transformed", "description": "Transformation applied to the event (if any)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_transforms_beta": {"name": "context_transforms_beta", "description": "Experimental transformations metadata from Segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_host": {"name": "page_url_host", "description": "Host/domain of the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "registered_domain": {"name": "registered_domain", "description": "Registered domain of the page URL (e.g., mezo.org)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_host": {"name": "referrer_host", "description": "Host/domain of the referrer URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_id": {"name": "utm_id", "description": "UTM campaign ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_actions_amplitude_session_id": {"name": "context_actions_amplitude_session_id", "description": "Amplitude session ID if available", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/segment/stg_segment__union_events.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.668128, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_segment__union_events`", "raw_code": "{{\n    dbt_utils.union_relations(\n        relations=[\n            ref(\"stg_segment_profiles__tracks\"),\n            ref(\"stg_segment_profiles__pages\"),\n        ]\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_segment_profiles__tracks", "package": null, "version": null}, {"name": "stg_segment_profiles__pages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.mezo.stg_segment_profiles__tracks", "model.mezo.stg_segment_profiles__pages"]}, "compiled_path": "target/compiled/mezo/models/10_staging/segment/stg_segment__union_events.sql", "compiled": true, "compiled_code": "\n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__tracks`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`utm_source` as STRING) as `utm_source` ,\n                    cast(`utm_medium` as STRING) as `utm_medium` ,\n                    cast(`utm_campaign` as STRING) as `utm_campaign` ,\n                    cast(`utm_term` as STRING) as `utm_term` ,\n                    cast(`utm_content` as STRING) as `utm_content` ,\n                    cast(`ip` as STRING) as `ip` ,\n                    cast(`library_name` as STRING) as `library_name` ,\n                    cast(`context_library_version` as STRING) as `context_library_version` ,\n                    cast(`context_locale` as STRING) as `context_locale` ,\n                    cast(`page_url_path` as STRING) as `page_url_path` ,\n                    cast(`referrer` as STRING) as `referrer` ,\n                    cast(`page_url_query` as STRING) as `page_url_query` ,\n                    cast(`context_page_title` as STRING) as `context_page_title` ,\n                    cast(`page_url` as STRING) as `page_url` ,\n                    cast(`context_protocols_source_id` as STRING) as `context_protocols_source_id` ,\n                    cast(`context_protocols_violations` as STRING) as `context_protocols_violations` ,\n                    cast(`context_timezone` as STRING) as `context_timezone` ,\n                    cast(`user_agent` as STRING) as `user_agent` ,\n                    cast(`context_user_agent_data_brands` as STRING) as `context_user_agent_data_brands` ,\n                    cast(`context_user_agent_data_mobile` as BOOLEAN) as `context_user_agent_data_mobile` ,\n                    cast(`context_user_agent_data_platform` as STRING) as `context_user_agent_data_platform` ,\n                    cast(`event_name` as STRING) as `event_name` ,\n                    cast(`event_source_id` as STRING) as `event_source_id` ,\n                    cast(`source_name` as STRING) as `source_name` ,\n                    cast(`event_source_slug` as STRING) as `event_source_slug` ,\n                    cast(`event_text` as STRING) as `event_text` ,\n                    cast(`id` as STRING) as `id` ,\n                    cast(`loaded_at` as TIMESTAMP) as `loaded_at` ,\n                    cast(`original_timestamp` as TIMESTAMP) as `original_timestamp` ,\n                    cast(`received_at_tstamp` as TIMESTAMP) as `received_at_tstamp` ,\n                    cast(`segment_id` as STRING) as `segment_id` ,\n                    cast(`sent_at` as TIMESTAMP) as `sent_at` ,\n                    cast(`tstamp` as TIMESTAMP) as `tstamp` ,\n                    cast(`user_id` as STRING) as `user_id` ,\n                    cast(`uuid_ts` as TIMESTAMP) as `uuid_ts` ,\n                    cast(`anonymous_id` as STRING) as `anonymous_id` ,\n                    cast(`context_event_transformed` as STRING) as `context_event_transformed` ,\n                    cast(`context_transforms_beta` as STRING) as `context_transforms_beta` ,\n                    cast(`page_url_host` as STRING) as `page_url_host` ,\n                    cast(`registered_domain` as STRING) as `registered_domain` ,\n                    cast(`referrer_host` as STRING) as `referrer_host` ,\n                    cast(null as STRING) as `utm_id` ,\n                    cast(null as STRING) as `page_path` ,\n                    cast(null as STRING) as `page_title` ,\n                    cast(null as INT64) as `context_actions_amplitude_session_id` \n\n            from `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__tracks`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__pages`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`utm_source` as STRING) as `utm_source` ,\n                    cast(`utm_medium` as STRING) as `utm_medium` ,\n                    cast(`utm_campaign` as STRING) as `utm_campaign` ,\n                    cast(`utm_term` as STRING) as `utm_term` ,\n                    cast(`utm_content` as STRING) as `utm_content` ,\n                    cast(`ip` as STRING) as `ip` ,\n                    cast(`library_name` as STRING) as `library_name` ,\n                    cast(`context_library_version` as STRING) as `context_library_version` ,\n                    cast(`context_locale` as STRING) as `context_locale` ,\n                    cast(`page_url_path` as STRING) as `page_url_path` ,\n                    cast(`referrer` as STRING) as `referrer` ,\n                    cast(`page_url_query` as STRING) as `page_url_query` ,\n                    cast(`context_page_title` as STRING) as `context_page_title` ,\n                    cast(`page_url` as STRING) as `page_url` ,\n                    cast(`context_protocols_source_id` as STRING) as `context_protocols_source_id` ,\n                    cast(null as STRING) as `context_protocols_violations` ,\n                    cast(`context_timezone` as STRING) as `context_timezone` ,\n                    cast(`user_agent` as STRING) as `user_agent` ,\n                    cast(`context_user_agent_data_brands` as STRING) as `context_user_agent_data_brands` ,\n                    cast(`context_user_agent_data_mobile` as BOOLEAN) as `context_user_agent_data_mobile` ,\n                    cast(`context_user_agent_data_platform` as STRING) as `context_user_agent_data_platform` ,\n                    cast(`event_name` as STRING) as `event_name` ,\n                    cast(`event_source_id` as STRING) as `event_source_id` ,\n                    cast(`source_name` as STRING) as `source_name` ,\n                    cast(`event_source_slug` as STRING) as `event_source_slug` ,\n                    cast(null as STRING) as `event_text` ,\n                    cast(`id` as STRING) as `id` ,\n                    cast(`loaded_at` as TIMESTAMP) as `loaded_at` ,\n                    cast(`original_timestamp` as TIMESTAMP) as `original_timestamp` ,\n                    cast(`received_at_tstamp` as TIMESTAMP) as `received_at_tstamp` ,\n                    cast(`segment_id` as STRING) as `segment_id` ,\n                    cast(`sent_at` as TIMESTAMP) as `sent_at` ,\n                    cast(`tstamp` as TIMESTAMP) as `tstamp` ,\n                    cast(`user_id` as STRING) as `user_id` ,\n                    cast(`uuid_ts` as TIMESTAMP) as `uuid_ts` ,\n                    cast(`anonymous_id` as STRING) as `anonymous_id` ,\n                    cast(null as STRING) as `context_event_transformed` ,\n                    cast(null as STRING) as `context_transforms_beta` ,\n                    cast(`page_url_host` as STRING) as `page_url_host` ,\n                    cast(`registered_domain` as STRING) as `registered_domain` ,\n                    cast(`referrer_host` as STRING) as `referrer_host` ,\n                    cast(`utm_id` as STRING) as `utm_id` ,\n                    cast(`page_path` as STRING) as `page_path` ,\n                    cast(`page_title` as STRING) as `page_title` ,\n                    cast(`context_actions_amplitude_session_id` as INT64) as `context_actions_amplitude_session_id` \n\n            from `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__pages`\n\n            \n        )\n\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_segment__events": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_segment__events", "resource_type": "model", "package_name": "mezo", "path": "10_staging/segment/stg_segment__events.sql", "original_file_path": "models/10_staging/segment/stg_segment__events.sql", "unique_id": "model.mezo.stg_segment__events", "fqn": ["mezo", "10_staging", "segment", "stg_segment__events"], "alias": "stg_segment__events", "checksum": {"name": "sha256", "checksum": "8dcb8d4d89d4353ab27018a26fd099853188c5493e40e0fddda4b1ba0a12c145"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"_dbt_source_relation": {"name": "_dbt_source_relation", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_source": {"name": "utm_source", "description": "UTM source parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "UTM medium parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "UTM campaign parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "UTM term parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "UTM content parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ip": {"name": "ip", "description": "IP address of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "library_name": {"name": "library_name", "description": "Name of the Segment library sending the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_library_version": {"name": "context_library_version", "description": "Version of the Segment library", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_locale": {"name": "context_locale", "description": "User\u2019s locale setting (e.g., en-US, de-DE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_path": {"name": "page_url_path", "description": "Path of the page URL (excluding domain and query string)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "Full referrer URL from which the user navigated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_query": {"name": "page_url_query", "description": "Query string from the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_title": {"name": "context_page_title", "description": "Title of the page from the HTML document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url": {"name": "page_url", "description": "Full page URL (protocol + domain + path + query)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_source_id": {"name": "context_protocols_source_id", "description": "Internal identifier from Segment protocols", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_violations": {"name": "context_protocols_violations", "description": "Protocol validation issues recorded by Segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_timezone": {"name": "context_timezone", "description": "User\u2019s timezone (e.g., Europe/Berlin)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_agent": {"name": "user_agent", "description": "Raw User-Agent string from the browser", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_brands": {"name": "context_user_agent_data_brands", "description": "JSON metadata about the browser family/version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_mobile": {"name": "context_user_agent_data_mobile", "description": "Flag indicating whether the device is mobile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_platform": {"name": "context_user_agent_data_platform", "description": "User-Agent platform (e.g., macOS, Linux, Windows)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_name": {"name": "event_name", "description": "Name of the tracked event (e.g., \"button_clicked\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_id": {"name": "event_source_id", "description": "Internal identifier for the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_name": {"name": "source_name", "description": "Name of the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_slug": {"name": "event_source_slug", "description": "Slugified version of the event source name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_text": {"name": "event_text", "description": "Text or description field associated with the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier for the track event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp when the row was loaded into the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_timestamp": {"name": "original_timestamp", "description": "Original event timestamp from the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_at_tstamp": {"name": "received_at_tstamp", "description": "Timestamp when Segment received the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_id": {"name": "segment_id", "description": "Unique Segment identifier for the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sent_at": {"name": "sent_at", "description": "Timestamp when the event was sent by the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tstamp": {"name": "tstamp", "description": "Timestamp recorded by the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "Segment user_id (if logged in)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "uuid_ts": {"name": "uuid_ts", "description": "Technical field combining UUID and timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_event_transformed": {"name": "context_event_transformed", "description": "Transformation applied to the event (if any)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_transforms_beta": {"name": "context_transforms_beta", "description": "Experimental transformations metadata from Segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_host": {"name": "page_url_host", "description": "Host/domain of the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "registered_domain": {"name": "registered_domain", "description": "Registered domain of the page URL (e.g., mezo.org)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_host": {"name": "referrer_host", "description": "Host/domain of the referrer URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_id": {"name": "utm_id", "description": "UTM campaign ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_actions_amplitude_session_id": {"name": "context_actions_amplitude_session_id", "description": "Amplitude session ID if available", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gclid": {"name": "gclid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device": {"name": "device", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_category": {"name": "device_category", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/segment/stg_segment__events.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.665348, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_segment__events`", "raw_code": "with\n    events as (select * from {{ ref(\"stg_segment__union_events\") }}),\n\n    calculated_fields as (\n        select\n            *,\n            {{ dbt_utils.get_url_parameter(\"page_url\", \"gclid\") }} as gclid,\n            case\n                when lower(user_agent) like '%android%'\n                then 'Android'\n                else\n                    replace(\n                        {{\n                            dbt.split_part(\n                                dbt.split_part(\"user_agent\", \"'('\", 2),\n                                \"' '\",\n                                1,\n                            )\n                        }},\n                        ';',\n                        ''\n                    )\n            end as device\n        from events\n    ),\n\n    final as (\n        select\n            *,\n            case\n                when device = 'iPhone'\n                then 'iPhone'\n                when device = 'Android'\n                then 'Android'\n                when device in ('iPad', 'iPod')\n                then 'Tablet'\n                when device in ('Windows', 'Macintosh', 'X11')\n                then 'Desktop'\n                else 'Uncategorized'\n            end as device_category\n        from calculated_fields\n    )\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_segment__union_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter", "macro.dbt.split_part"], "nodes": ["model.mezo.stg_segment__union_events"]}, "compiled_path": "target/compiled/mezo/models/10_staging/segment/stg_segment__events.sql", "compiled": true, "compiled_code": "with\n    events as (select * from `mezo-portal-data`.`dbt_staging`.`stg_segment__union_events`),\n\n    calculated_fields as (\n        select\n            *,\n            nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        page_url,\n        'gclid='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as gclid,\n            case\n                when lower(user_agent) like '%android%'\n                then 'Android'\n                else\n                    replace(\n                        \n\n  \n    split(\n        \n\n  \n    split(\n        user_agent,\n        '('\n        )[safe_offset(1)]\n  \n\n,\n        ' '\n        )[safe_offset(0)]\n  \n\n,\n                        ';',\n                        ''\n                    )\n            end as device\n        from events\n    ),\n\n    final as (\n        select\n            *,\n            case\n                when device = 'iPhone'\n                then 'iPhone'\n                when device = 'Android'\n                then 'Android'\n                when device in ('iPad', 'iPod')\n                then 'Tablet'\n                when device in ('Windows', 'Macintosh', 'X11')\n                then 'Desktop'\n                else 'Uncategorized'\n            end as device_category\n        from calculated_fields\n    )\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_segment_profiles__pages": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_segment_profiles__pages", "resource_type": "model", "package_name": "mezo", "path": "10_staging/segment/base/stg_segment_profiles__pages.sql", "original_file_path": "models/10_staging/segment/base/stg_segment_profiles__pages.sql", "unique_id": "model.mezo.stg_segment_profiles__pages", "fqn": ["mezo", "10_staging", "segment", "base", "stg_segment_profiles__pages"], "alias": "stg_segment_profiles__pages", "checksum": {"name": "sha256", "checksum": "f771605af30350562d6e381f9ef820d33f3f6bad620df259dbbfc59e7d0d0866"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "This is a base model for Segment's web page views table. It does some straightforward renaming and parsing of Segment raw data in this table. If a page view id has multiple entries in the source table then deduplication is done to keep the row with the earliest `received_at` timestamp.\n", "columns": {"utm_source": {"name": "utm_source", "description": "UTM source parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "UTM medium parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "UTM campaign parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "UTM term parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "UTM content parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_id": {"name": "utm_id", "description": "UTM campaign ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ip": {"name": "ip", "description": "IP address of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "library_name": {"name": "library_name", "description": "Name of the Segment library sending the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_library_version": {"name": "context_library_version", "description": "Version of the Segment library", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_locale": {"name": "context_locale", "description": "User\u2019s locale setting (e.g., en-US, de-DE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_path": {"name": "page_url_path", "description": "Path of the page URL (excluding domain and query string)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_title": {"name": "context_page_title", "description": "Title of the page from the HTML document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_source_id": {"name": "context_protocols_source_id", "description": "Internal identifier from Segment protocols", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_timezone": {"name": "context_timezone", "description": "User\u2019s timezone (e.g., Europe/Berlin)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_agent": {"name": "user_agent", "description": "Raw User-Agent string from the browser", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_brands": {"name": "context_user_agent_data_brands", "description": "JSON metadata about the browser family/version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_mobile": {"name": "context_user_agent_data_mobile", "description": "Flag indicating whether the device is mobile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_platform": {"name": "context_user_agent_data_platform", "description": "User-Agent platform (e.g., macOS, Linux, Windows)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_id": {"name": "event_source_id", "description": "Internal identifier for the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_name": {"name": "source_name", "description": "Name of the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_slug": {"name": "event_source_slug", "description": "Slugified version of the event source name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier for the page view event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp when the row was loaded into the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_timestamp": {"name": "original_timestamp", "description": "Original event timestamp from the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_name": {"name": "event_name", "description": "Name of the event (e.g., \"page_view\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_at_tstamp": {"name": "received_at_tstamp", "description": "Timestamp when Segment received the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "Full referrer URL from which the user navigated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_query": {"name": "page_url_query", "description": "Query string from the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_id": {"name": "segment_id", "description": "Unique Segment identifier for the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sent_at": {"name": "sent_at", "description": "Timestamp when the event was sent by the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tstamp": {"name": "tstamp", "description": "Timestamp recorded by the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url": {"name": "page_url", "description": "Full page URL (protocol + domain + path + query)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "Segment user_id (if logged in)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "uuid_ts": {"name": "uuid_ts", "description": "Technical field combining UUID and timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_actions_amplitude_session_id": {"name": "context_actions_amplitude_session_id", "description": "Amplitude session ID if available", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_host": {"name": "page_url_host", "description": "Host/domain of the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_host": {"name": "referrer_host", "description": "Host/domain of the referrer URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "registered_domain": {"name": "registered_domain", "description": "Registered domain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/segment/base/stg_segment_profiles__pages.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.6728718, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__pages`", "raw_code": "with\n    source as (select * from {{ source(\"raw_segment_profiles\", \"pages_view\") }}),\n\n    renamed as (\n        select\n            context_campaign_source as utm_source,\n            context_campaign_medium as utm_medium,\n            context_campaign_name as utm_campaign,\n            context_campaign_term as utm_term,\n            context_campaign_content as utm_content,\n            context_campaign_id as utm_id,\n            context_ip as ip,\n            context_library_name as library_name,\n            context_library_version,\n            context_locale,\n            context_page_path as page_url_path,\n            context_page_title,\n            context_protocols_source_id,\n            context_timezone,\n            context_user_agent as user_agent,\n            context_user_agent_data_brands,\n            context_user_agent_data_mobile,\n            context_user_agent_data_platform,\n            event_source_id,\n            event_source_name as source_name,\n            event_source_slug,\n            id,\n            loaded_at,\n            original_timestamp,\n            'page_view' as event_name,\n            path as page_path,\n            received_at as received_at_tstamp,\n            referrer,\n            search as page_url_query,\n            segment_id,\n            sent_at,\n            timestamp as tstamp,\n            title as page_title,\n            url as page_url,\n            user_id,\n            uuid_ts,\n            anonymous_id,\n            context_actions_amplitude_session_id,\n            net.host(context_page_url) as page_url_host,\n            replace(net.host(context_page_referrer), 'www.', '') as referrer_host,\n            net.reg_domain(context_page_url) as registered_domain\n        from source\n    ),\n\n    filter_irrelevant_data as (\n        select *\n        from renamed\n        where registered_domain = 'mezo.org' and anonymous_id is not null\n        qualify\n            row_number() over (\n                partition by source_name, id order by received_at_tstamp asc\n            )\n            = 1\n    )\n\nselect *\nfrom filter_irrelevant_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_segment_profiles", "pages_view"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mezo.raw_segment_profiles.pages_view"]}, "compiled_path": "target/compiled/mezo/models/10_staging/segment/base/stg_segment_profiles__pages.sql", "compiled": true, "compiled_code": "with\n    source as (select * from `mezo-portal-data`.`raw_segment_profiles`.`pages_view`),\n\n    renamed as (\n        select\n            context_campaign_source as utm_source,\n            context_campaign_medium as utm_medium,\n            context_campaign_name as utm_campaign,\n            context_campaign_term as utm_term,\n            context_campaign_content as utm_content,\n            context_campaign_id as utm_id,\n            context_ip as ip,\n            context_library_name as library_name,\n            context_library_version,\n            context_locale,\n            context_page_path as page_url_path,\n            context_page_title,\n            context_protocols_source_id,\n            context_timezone,\n            context_user_agent as user_agent,\n            context_user_agent_data_brands,\n            context_user_agent_data_mobile,\n            context_user_agent_data_platform,\n            event_source_id,\n            event_source_name as source_name,\n            event_source_slug,\n            id,\n            loaded_at,\n            original_timestamp,\n            'page_view' as event_name,\n            path as page_path,\n            received_at as received_at_tstamp,\n            referrer,\n            search as page_url_query,\n            segment_id,\n            sent_at,\n            timestamp as tstamp,\n            title as page_title,\n            url as page_url,\n            user_id,\n            uuid_ts,\n            anonymous_id,\n            context_actions_amplitude_session_id,\n            net.host(context_page_url) as page_url_host,\n            replace(net.host(context_page_referrer), 'www.', '') as referrer_host,\n            net.reg_domain(context_page_url) as registered_domain\n        from source\n    ),\n\n    filter_irrelevant_data as (\n        select *\n        from renamed\n        where registered_domain = 'mezo.org' and anonymous_id is not null\n        qualify\n            row_number() over (\n                partition by source_name, id order by received_at_tstamp asc\n            )\n            = 1\n    )\n\nselect *\nfrom filter_irrelevant_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.stg_segment_profiles__tracks": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_segment_profiles__tracks", "resource_type": "model", "package_name": "mezo", "path": "10_staging/segment/base/stg_segment_profiles__tracks.sql", "original_file_path": "models/10_staging/segment/base/stg_segment_profiles__tracks.sql", "unique_id": "model.mezo.stg_segment_profiles__tracks", "fqn": ["mezo", "10_staging", "segment", "base", "stg_segment_profiles__tracks"], "alias": "stg_segment_profiles__tracks", "checksum": {"name": "sha256", "checksum": "a114466999d38e083410f43ff0da12ff64c6d217c0b97d4da8052a317195c61a"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"utm_source": {"name": "utm_source", "description": "UTM source parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "UTM medium parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "UTM campaign parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "UTM term parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "UTM content parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ip": {"name": "ip", "description": "IP address of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "library_name": {"name": "library_name", "description": "Name of the Segment library sending the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_library_version": {"name": "context_library_version", "description": "Version of the Segment library", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_locale": {"name": "context_locale", "description": "User\u2019s locale setting (e.g., en-US, de-DE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_path": {"name": "page_url_path", "description": "Path of the page URL (excluding domain and query string)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "Full referrer URL from which the user navigated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_query": {"name": "page_url_query", "description": "Query string from the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_title": {"name": "context_page_title", "description": "Title of the page from the HTML document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url": {"name": "page_url", "description": "Full page URL (protocol + domain + path + query)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_source_id": {"name": "context_protocols_source_id", "description": "Internal identifier from Segment protocols", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_violations": {"name": "context_protocols_violations", "description": "Protocol validation issues recorded by Segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_timezone": {"name": "context_timezone", "description": "User\u2019s timezone (e.g., Europe/Berlin)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_agent": {"name": "user_agent", "description": "Raw User-Agent string from the browser", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_brands": {"name": "context_user_agent_data_brands", "description": "JSON metadata about the browser family/version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_mobile": {"name": "context_user_agent_data_mobile", "description": "Flag indicating whether the device is mobile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_platform": {"name": "context_user_agent_data_platform", "description": "User-Agent platform (e.g., macOS, Linux, Windows)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_name": {"name": "event_name", "description": "Name of the tracked event (e.g., \"button_clicked\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_id": {"name": "event_source_id", "description": "Internal identifier for the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_name": {"name": "source_name", "description": "Name of the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_slug": {"name": "event_source_slug", "description": "Slugified version of the event source name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_text": {"name": "event_text", "description": "Text or description field associated with the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier for the track event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp when the row was loaded into the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_timestamp": {"name": "original_timestamp", "description": "Original event timestamp from the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_at_tstamp": {"name": "received_at_tstamp", "description": "Timestamp when Segment received the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_id": {"name": "segment_id", "description": "Unique Segment identifier for the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sent_at": {"name": "sent_at", "description": "Timestamp when the event was sent by the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tstamp": {"name": "tstamp", "description": "Timestamp recorded by the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "Segment user_id (if logged in)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "uuid_ts": {"name": "uuid_ts", "description": "Technical field combining UUID and timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_event_transformed": {"name": "context_event_transformed", "description": "Transformation applied to the event (if any)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_transforms_beta": {"name": "context_transforms_beta", "description": "Experimental transformations metadata from Segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_host": {"name": "page_url_host", "description": "Host/domain of the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "registered_domain": {"name": "registered_domain", "description": "Registered domain of the page URL (e.g., mezo.org)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_host": {"name": "referrer_host", "description": "Host/domain of the referrer URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/segment/base/stg_segment_profiles__tracks.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.6704369, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__tracks`", "raw_code": "with\n    source as (select * from {{ source(\"raw_segment_profiles\", \"tracks_view\") }}),\n\n    renamed as (\n        select\n            context_campaign_source as utm_source,\n            context_campaign_medium as utm_medium,\n            context_campaign_name as utm_campaign,\n            context_campaign_term as utm_term,\n            context_campaign_content as utm_content,\n            context_ip as ip,\n            context_library_name as library_name,\n            context_library_version,\n            context_locale,\n            context_page_path as page_url_path,\n            context_page_referrer as referrer,\n            context_page_search as page_url_query,\n            context_page_title,\n            context_page_url as page_url,\n            context_protocols_source_id,\n            context_protocols_violations,\n            context_timezone,\n            context_user_agent as user_agent,\n            context_user_agent_data_brands,\n            context_user_agent_data_mobile,\n            context_user_agent_data_platform,\n            event as event_name,\n            event_source_id,\n            event_source_name as source_name,\n            event_source_slug,\n            event_text,\n            id,\n            loaded_at,\n            original_timestamp,\n            received_at as received_at_tstamp,\n            segment_id,\n            sent_at,\n            timestamp as tstamp,\n            user_id,\n            uuid_ts,\n            anonymous_id,\n            context_event_transformed,\n            context_transforms_beta,\n            net.host(context_page_url) as page_url_host,\n            net.reg_domain(context_page_url) as registered_domain,\n            replace(net.host(context_page_referrer), 'www.', '') as referrer_host\n        from source\n    ),\n\n    filter_irrelevant_data as (\n        select *\n        from renamed\n        where registered_domain = 'mezo.org' and anonymous_id is not null\n    )\n\nselect *\nfrom filter_irrelevant_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_segment_profiles", "tracks_view"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mezo.raw_segment_profiles.tracks_view"]}, "compiled_path": "target/compiled/mezo/models/10_staging/segment/base/stg_segment_profiles__tracks.sql", "compiled": true, "compiled_code": "with\n    source as (select * from `mezo-portal-data`.`raw_segment_profiles`.`tracks_view`),\n\n    renamed as (\n        select\n            context_campaign_source as utm_source,\n            context_campaign_medium as utm_medium,\n            context_campaign_name as utm_campaign,\n            context_campaign_term as utm_term,\n            context_campaign_content as utm_content,\n            context_ip as ip,\n            context_library_name as library_name,\n            context_library_version,\n            context_locale,\n            context_page_path as page_url_path,\n            context_page_referrer as referrer,\n            context_page_search as page_url_query,\n            context_page_title,\n            context_page_url as page_url,\n            context_protocols_source_id,\n            context_protocols_violations,\n            context_timezone,\n            context_user_agent as user_agent,\n            context_user_agent_data_brands,\n            context_user_agent_data_mobile,\n            context_user_agent_data_platform,\n            event as event_name,\n            event_source_id,\n            event_source_name as source_name,\n            event_source_slug,\n            event_text,\n            id,\n            loaded_at,\n            original_timestamp,\n            received_at as received_at_tstamp,\n            segment_id,\n            sent_at,\n            timestamp as tstamp,\n            user_id,\n            uuid_ts,\n            anonymous_id,\n            context_event_transformed,\n            context_transforms_beta,\n            net.host(context_page_url) as page_url_host,\n            net.reg_domain(context_page_url) as registered_domain,\n            replace(net.host(context_page_referrer), 'www.', '') as referrer_host\n        from source\n    ),\n\n    filter_irrelevant_data as (\n        select *\n        from renamed\n        where registered_domain = 'mezo.org' and anonymous_id is not null\n    )\n\nselect *\nfrom filter_irrelevant_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.stg_paid__raw_other_marketing_costs": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_paid__raw_other_marketing_costs", "resource_type": "model", "package_name": "mezo", "path": "10_staging/paid/stg_paid__raw_other_marketing_costs.sql", "original_file_path": "models/10_staging/paid/stg_paid__raw_other_marketing_costs.sql", "unique_id": "model.mezo.stg_paid__raw_other_marketing_costs", "fqn": ["mezo", "10_staging", "paid", "stg_paid__raw_other_marketing_costs"], "alias": "stg_paid__raw_other_marketing_costs", "checksum": {"name": "sha256", "checksum": "3efd3ffa0b1861ced85f72d563c68343de9667f5601df4b637600e4c7abd4fa6"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Staging table for raw other marketing costs imported from Google Sheets.", "columns": {"date_day": {"name": "date_day", "description": "The date the record was created", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "The source of the referral", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "The medium of the referral", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount spent on the campaign", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions served", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks received", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/10_staging/paid/stg_paid__raw_other_marketing_costs.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "staging", "materialized": "view"}, "created_at": 1759221506.6779456, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_paid__raw_other_marketing_costs`", "raw_code": "with\n    source as (\n        select * from {{ source(\"raw_other_marketing_costs\", \"other_marketing_costs\") }}\n    ),\n\n    renamed as (\n        select\n            cast(record_date as date) as date_day,\n            cast(referrer_source as string) as referrer_source,\n            cast(referrer_medium as string) as referrer_medium,\n            cast(spend as float64) as spend,\n            cast(impressions as int64) as impressions,\n            cast(clicks as int64) as clicks\n        from source\n    )\n\nselect *\nfrom renamed", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw_other_marketing_costs", "other_marketing_costs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mezo.raw_other_marketing_costs.other_marketing_costs"]}, "compiled_path": "target/compiled/mezo/models/10_staging/paid/stg_paid__raw_other_marketing_costs.sql", "compiled": true, "compiled_code": "with\n    source as (\n        select * from `mezo-portal-data`.`raw_other_marketing_costs`.`other_marketing_costs`\n    ),\n\n    renamed as (\n        select\n            cast(record_date as date) as date_day,\n            cast(referrer_source as string) as referrer_source,\n            cast(referrer_medium as string) as referrer_medium,\n            cast(spend as float64) as spend,\n            cast(impressions as int64) as impressions,\n            cast(clicks as int64) as clicks\n        from source\n    )\n\nselect *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_goldsky_market_mezo__donated": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_market_mezo__donated", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/int_goldsky_market_mezo__donated.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__donated.sql", "unique_id": "model.mezo.int_goldsky_market_mezo__donated", "fqn": ["mezo", "50_intermediate", "goldsky", "int_goldsky_market_mezo__donated"], "alias": "int_goldsky_market_mezo__donated", "checksum": {"name": "sha256", "checksum": "8ba4228c094560f9940a8e864288e1ae363197f5a0bb6098fbe73b6b57ec7ae8"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": "bignumeric", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "donor": {"name": "donor", "description": "Address of the donor", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "beneficiary_id": {"name": "beneficiary_id", "description": "ID of the beneficiary", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount that was donated (normalized currency)", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "Address of the recipient", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/int_goldsky_market_mezo__donated.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.6802793, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__donated`", "raw_code": "with\n    donated as (select * from {{ ref(\"stg_goldsky_market_mezo__donated\") }}),\n\n    market_mapping as (select * from {{ ref(\"stg_seed_musd_market_map\") }}),\n\n    mapp_markets as (\n        select donated.* except (recipient), market_mapping.market_name as recipient\n        from donated\n        left join market_mapping on donated.recipient = lower(market_mapping.market_id)\n    )\n\nselect *\nfrom mapp_markets", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__donated", "package": null, "version": null}, {"name": "stg_seed_musd_market_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.stg_goldsky_market_mezo__donated", "model.mezo.stg_seed_musd_market_map"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__donated.sql", "compiled": true, "compiled_code": "with\n    donated as (select * from `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__donated`),\n\n    market_mapping as (select * from `mezo-portal-data`.`dbt_staging`.`stg_seed_musd_market_map`),\n\n    mapp_markets as (\n        select donated.* except (recipient), market_mapping.market_name as recipient\n        from donated\n        left join market_mapping on donated.recipient = lower(market_mapping.market_id)\n    )\n\nselect *\nfrom mapp_markets", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_goldsky_market_mezo__order_placed": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_market_mezo__order_placed", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.sql", "unique_id": "model.mezo.int_goldsky_market_mezo__order_placed", "fqn": ["mezo", "50_intermediate", "goldsky", "int_goldsky_market_mezo__order_placed"], "alias": "int_goldsky_market_mezo__order_placed", "checksum": {"name": "sha256", "checksum": "0678c430bc5e2a30aa201c82d03870ae5429427cd73ab67f86f682528eb79539"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Processes raw order placed data from the market, transforming and normalizing price fields for downstream analysis.", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "Unique identifier for the order", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer": {"name": "customer", "description": "Address of the customer who placed the order", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Product identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "Price of the order (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "Name of the product that was ordered.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.6894953, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`", "raw_code": "with\n    order_places as (select * from {{ ref(\"stg_goldsky_market_mezo__order_placed\") }}),\n\n    market_mapping as (select * from {{ ref(\"stg_seed_musd_market_map\") }}),\n\n    mapp_markets as (\n        select order_places.*, market_mapping.market_name as product_name\n        from order_places\n        left join\n            market_mapping on order_places.product_id = lower(market_mapping.market_id)\n    )\n\nselect *\nfrom mapp_markets", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__order_placed", "package": null, "version": null}, {"name": "stg_seed_musd_market_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.stg_goldsky_market_mezo__order_placed", "model.mezo.stg_seed_musd_market_map"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.sql", "compiled": true, "compiled_code": "with\n    order_places as (select * from `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__order_placed`),\n\n    market_mapping as (select * from `mezo-portal-data`.`dbt_staging`.`stg_seed_musd_market_map`),\n\n    mapp_markets as (\n        select order_places.*, market_mapping.market_name as product_name\n        from order_places\n        left join\n            market_mapping on order_places.product_id = lower(market_mapping.market_id)\n    )\n\nselect *\nfrom mapp_markets", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_id"], "time_spine": null}, "model.mezo.int_goldsky_musd_trove_manager__liquidation": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_musd_trove_manager__liquidation", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/int_goldsky_musd_trove_manager__liquidation.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_musd_trove_manager__liquidation.sql", "unique_id": "model.mezo.int_goldsky_musd_trove_manager__liquidation", "fqn": ["mezo", "50_intermediate", "goldsky", "int_goldsky_musd_trove_manager__liquidation"], "alias": "int_goldsky_musd_trove_manager__liquidation", "checksum": {"name": "sha256", "checksum": "fb45d4e77eda7499457764d37772cf729e9f710a03f0c03aa35cf4e5647b61ac"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"vid": {"name": "vid", "description": "Unique version identifier for the record", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block": {"name": "block", "description": "Block data associated with the liquidation transaction", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier for the liquidation event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "The blockchain block number where the liquidation occurred", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the blockchain transaction containing the liquidation event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Identifier of the smart contract where the liquidation was executed", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coll_gas_compensation": {"name": "coll_gas_compensation", "description": "Gas compensation related to the collateral in the liquidation process", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gas_compensation": {"name": "gas_compensation", "description": "General gas compensation for the liquidation transaction", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Goldsky-specific field indicating the blockchain network", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Goldsky-specific global identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of when the liquidation event occurred, converted from milliseconds to a readable timestamp format", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_principal": {"name": "liquidated_principal", "description": "Amount of principal that was liquidated, formatted as currency", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_interest": {"name": "liquidated_interest", "description": "Amount of interest that was liquidated, formatted as currency", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_collateral": {"name": "liquidated_collateral", "description": "Amount of collateral that was liquidated, formatted as currency", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrower": {"name": "borrower", "description": "Blockchain address of the borrower whose trove was liquidated", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "operation": {"name": "operation", "description": "Type of operation performed during the trove liquidation event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/int_goldsky_musd_trove_manager__liquidation.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.6844351, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_musd_trove_manager__liquidation`", "raw_code": "with\n    liquidations as (\n        select * from {{ ref(\"stg_goldsky_musd_trove_manager__liquidation\") }}\n    ),\n\n    trove_liquidated as (\n        select * from {{ ref(\"stg_goldsky_musd_trove_manager__trove_liquidated\") }}\n    ),\n\n    liquidations_with_trove as (\n        select liquidations.*, trove_liquidated.borrower, trove_liquidated.operation\n        from liquidations\n        left join\n            trove_liquidated\n            on liquidations.transaction_hash = trove_liquidated.transaction_hash\n    )\n\nselect *\nfrom liquidations_with_trove", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_musd_trove_manager__liquidation", "package": null, "version": null}, {"name": "stg_goldsky_musd_trove_manager__trove_liquidated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.stg_goldsky_musd_trove_manager__liquidation", "model.mezo.stg_goldsky_musd_trove_manager__trove_liquidated"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_musd_trove_manager__liquidation.sql", "compiled": true, "compiled_code": "with\n    liquidations as (\n        select * from `mezo-portal-data`.`dbt_staging`.`stg_goldsky_musd_trove_manager__liquidation`\n    ),\n\n    trove_liquidated as (\n        select * from `mezo-portal-data`.`dbt_staging`.`stg_goldsky_musd_trove_manager__trove_liquidated`\n    ),\n\n    liquidations_with_trove as (\n        select liquidations.*, trove_liquidated.borrower, trove_liquidated.operation\n        from liquidations\n        left join\n            trove_liquidated\n            on liquidations.transaction_hash = trove_liquidated.transaction_hash\n    )\n\nselect *\nfrom liquidations_with_trove", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_goldsky_borrower_operations_mezo__loans": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_borrower_operations_mezo__loans", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/int_goldsky_borrower_operations_mezo__loans.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_borrower_operations_mezo__loans.sql", "unique_id": "model.mezo.int_goldsky_borrower_operations_mezo__loans", "fqn": ["mezo", "50_intermediate", "goldsky", "int_goldsky_borrower_operations_mezo__loans"], "alias": "int_goldsky_borrower_operations_mezo__loans", "checksum": {"name": "sha256", "checksum": "290e8c98d0bce70d3f9b5df0506303e6f59b1b64a8e452015ffa48b09e7c390c"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrower": {"name": "borrower", "description": "Address of the borrower", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_interest_update_time": {"name": "last_interest_update_time", "description": "Timestamp of the last interest update", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "operation": {"name": "operation", "description": "Type of operation performed on the trove", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "principal": {"name": "principal", "description": "Principal debt amount (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "interest": {"name": "interest", "description": "Interest amount (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral": {"name": "collateral", "description": "Collateral amount (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stake": {"name": "stake", "description": "Stake amount (normalized currency)", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_conversion_timestamp": {"name": "currency_conversion_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral_usd_value": {"name": "collateral_usd_value", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral_ratio": {"name": "collateral_ratio", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "previous_principal_value": {"name": "previous_principal_value", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "previous_collateral_value": {"name": "previous_collateral_value", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "adjustment_type_principal": {"name": "adjustment_type_principal", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "adjustment_type_collateral": {"name": "adjustment_type_collateral", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/int_goldsky_borrower_operations_mezo__loans.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.6877682, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_borrower_operations_mezo__loans`", "raw_code": "with\n    trove_updated as (\n        select * from {{ ref(\"stg_goldsky_borrower_operations_mezo__trove_updated\") }}\n    ),\n\n    currency_conversion as (\n        select coin_id, usd_value, last_updated_at\n        from {{ ref(\"stg_coin_gecko__prices\") }}\n    ),\n\n    most_recent_conversion as (\n        select coin_id, usd_value, last_updated_at\n        from currency_conversion\n        qualify\n            row_number() over (partition by coin_id order by last_updated_at desc) = 1\n    ),\n\n    convert_currencies as (\n        select\n            trove_updated.*,\n            most_recent_conversion.last_updated_at as currency_conversion_timestamp,\n            round(\n                trove_updated.collateral * most_recent_conversion.usd_value, 2\n            ) as collateral_usd_value\n        from trove_updated\n        left join most_recent_conversion on \"bitcoin\" = most_recent_conversion.coin_id\n    ),\n\n    collateral_ratio as (\n        select *, safe_divide(collateral_usd_value, principal) as collateral_ratio\n        from convert_currencies\n    ),\n\n    add_inital_values as (\n        select\n            *,\n            case\n                when operation = \"adjusted_loan\"\n                then\n\n                    lead(principal) over (\n                        partition by borrower order by record_timestamp desc\n                    )\n            end as previous_principal_value,\n            case\n                when operation = \"adjusted_loan\"\n                then\n                    lead(collateral) over (\n                        partition by borrower order by record_timestamp desc\n                    )\n            end as previous_collateral_value\n        from collateral_ratio\n    ),\n\n    add_adjustment_types as (\n        select\n            *,\n            case\n                when operation = \"adjusted_loan\"\n                then\n                    case\n                        when principal > previous_principal_value\n                        then \"increase\"\n                        when principal < previous_principal_value\n                        then \"decrease\"\n                        else \"no_change\"\n                    end\n            end as adjustment_type_principal,\n            case\n                when operation = \"adjusted_loan\"\n                then\n                    case\n                        when collateral > previous_collateral_value\n                        then \"increase\"\n                        when collateral < previous_collateral_value\n                        then \"decrease\"\n                        else \"no_change\"\n                    end\n            end as adjustment_type_collateral\n        from add_inital_values\n    )\n\nselect *\nfrom add_adjustment_types", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_borrower_operations_mezo__trove_updated", "package": null, "version": null}, {"name": "stg_coin_gecko__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated", "model.mezo.stg_coin_gecko__prices"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_borrower_operations_mezo__loans.sql", "compiled": true, "compiled_code": "with\n    trove_updated as (\n        select * from `mezo-portal-data`.`dbt_staging`.`stg_goldsky_borrower_operations_mezo__trove_updated`\n    ),\n\n    currency_conversion as (\n        select coin_id, usd_value, last_updated_at\n        from `mezo-portal-data`.`dbt_staging`.`stg_coin_gecko__prices`\n    ),\n\n    most_recent_conversion as (\n        select coin_id, usd_value, last_updated_at\n        from currency_conversion\n        qualify\n            row_number() over (partition by coin_id order by last_updated_at desc) = 1\n    ),\n\n    convert_currencies as (\n        select\n            trove_updated.*,\n            most_recent_conversion.last_updated_at as currency_conversion_timestamp,\n            round(\n                trove_updated.collateral * most_recent_conversion.usd_value, 2\n            ) as collateral_usd_value\n        from trove_updated\n        left join most_recent_conversion on \"bitcoin\" = most_recent_conversion.coin_id\n    ),\n\n    collateral_ratio as (\n        select *, safe_divide(collateral_usd_value, principal) as collateral_ratio\n        from convert_currencies\n    ),\n\n    add_inital_values as (\n        select\n            *,\n            case\n                when operation = \"adjusted_loan\"\n                then\n\n                    lead(principal) over (\n                        partition by borrower order by record_timestamp desc\n                    )\n            end as previous_principal_value,\n            case\n                when operation = \"adjusted_loan\"\n                then\n                    lead(collateral) over (\n                        partition by borrower order by record_timestamp desc\n                    )\n            end as previous_collateral_value\n        from collateral_ratio\n    ),\n\n    add_adjustment_types as (\n        select\n            *,\n            case\n                when operation = \"adjusted_loan\"\n                then\n                    case\n                        when principal > previous_principal_value\n                        then \"increase\"\n                        when principal < previous_principal_value\n                        then \"decrease\"\n                        else \"no_change\"\n                    end\n            end as adjustment_type_principal,\n            case\n                when operation = \"adjusted_loan\"\n                then\n                    case\n                        when collateral > previous_collateral_value\n                        then \"increase\"\n                        when collateral < previous_collateral_value\n                        then \"decrease\"\n                        else \"no_change\"\n                    end\n            end as adjustment_type_collateral\n        from add_inital_values\n    )\n\nselect *\nfrom add_adjustment_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_mezo_bridge_mainnet__assets_locked", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/int_goldsky_mezo_bridge_mainnet__assets_locked.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_mezo_bridge_mainnet__assets_locked.sql", "unique_id": "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked", "fqn": ["mezo", "50_intermediate", "goldsky", "int_goldsky_mezo_bridge_mainnet__assets_locked"], "alias": "int_goldsky_mezo_bridge_mainnet__assets_locked", "checksum": {"name": "sha256", "checksum": "5a5d9afef9d592cca7836a7639fdc0b6140a66b9a89b5aef09b9a67ae0343ca5"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sequence_number": {"name": "sequence_number", "description": "Sequence number for the lock event", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "Address of the asset recipient", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_address": {"name": "token_address", "description": "Address of the token", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mainnet'", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_symbol": {"name": "token_symbol", "description": "The token symbol (e.g. BTC, ETH, USDC)", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_id": {"name": "token_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_name": {"name": "token_name", "description": "The full name of the token", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount of tokens locked (normalized based on token decimals)", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_conversion_timestamp": {"name": "currency_conversion_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_usd_value": {"name": "token_usd_value", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/int_goldsky_mezo_bridge_mainnet__assets_locked.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.683048, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_mezo_bridge_mainnet__assets_locked`", "raw_code": "with\n    assets_locked as (\n        select * from {{ ref(\"stg_goldsky_mezo_bridge_mainnet__assets_locked\") }}\n    ),\n\n    currency_lookup as (\n        select\n            * except (_dlt_load_id, _dlt_id),\n            json_value(platforms, '$.ethereum') as ethereum_address\n        from {{ ref(\"stg_coin_gecko__coins\") }}\n        union all\n        select\n            'swell' as id,\n            'swbtc' as token_symbol,\n            'Swell Restaked BTC' as names,\n            null as platforms,\n            '0x8db2350d78abc13f5673a411d4700bcf87864dde' as ethereum_address\n    ),\n\n    currency_conversion_values as (\n        select coin_id, usd_value, last_updated_at\n        from {{ ref(\"stg_coin_gecko__prices\") }}\n    ),\n\n    most_recent_conversion as (\n        select coin_id, usd_value, last_updated_at\n        from currency_conversion_values\n        qualify\n            row_number() over (partition by coin_id order by last_updated_at desc) = 1\n    ),\n\n    lookup_currency as (\n        select\n            assets_locked.* except (amount),\n            currency_lookup.symbol as token_symbol,\n            currency_lookup.id as token_id,\n            currency_lookup.name as token_name,\n            {{ format_currency(\"amount\", \"currency_lookup.symbol\") }} as amount\n        from assets_locked\n        left join\n            currency_lookup\n            on assets_locked.token_address = currency_lookup.ethereum_address\n        where currency_lookup.id is not null\n    ),\n\n    currency_conversion as (\n        select\n            lookup_currency.*,\n            most_recent_conversion.last_updated_at as currency_conversion_timestamp,\n            round(\n                lookup_currency.amount * most_recent_conversion.usd_value, 2\n            ) as token_usd_value\n        from lookup_currency\n        left join\n            most_recent_conversion\n            on lookup_currency.token_id = most_recent_conversion.coin_id\n    ),\n\n    deduplicated as (\n        select *\n        from currency_conversion\n        qualify\n            row_number() over (\n                partition by transaction_hash, sequence_number, _gs_gid\n                order by currency_conversion_timestamp desc\n            )\n            = 1\n    )\n\nselect *\nfrom deduplicated", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}, {"name": "stg_coin_gecko__coins", "package": null, "version": null}, {"name": "stg_coin_gecko__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.mezo.format_currency"], "nodes": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "model.mezo.stg_coin_gecko__coins", "model.mezo.stg_coin_gecko__prices"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_mezo_bridge_mainnet__assets_locked.sql", "compiled": true, "compiled_code": "with\n    assets_locked as (\n        select * from `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`\n    ),\n\n    currency_lookup as (\n        select\n            * except (_dlt_load_id, _dlt_id),\n            json_value(platforms, '$.ethereum') as ethereum_address\n        from `mezo-portal-data`.`dbt_staging`.`stg_coin_gecko__coins`\n        union all\n        select\n            'swell' as id,\n            'swbtc' as token_symbol,\n            'Swell Restaked BTC' as names,\n            null as platforms,\n            '0x8db2350d78abc13f5673a411d4700bcf87864dde' as ethereum_address\n    ),\n\n    currency_conversion_values as (\n        select coin_id, usd_value, last_updated_at\n        from `mezo-portal-data`.`dbt_staging`.`stg_coin_gecko__prices`\n    ),\n\n    most_recent_conversion as (\n        select coin_id, usd_value, last_updated_at\n        from currency_conversion_values\n        qualify\n            row_number() over (partition by coin_id order by last_updated_at desc) = 1\n    ),\n\n    lookup_currency as (\n        select\n            assets_locked.* except (amount),\n            currency_lookup.symbol as token_symbol,\n            currency_lookup.id as token_id,\n            currency_lookup.name as token_name,\n            \n    (\n        coalesce(safe_cast(amount as numeric), 0) / case\n            when currency_lookup.symbol in ('usdc', 'usdt')\n            then 1e6\n            when currency_lookup.symbol in ('wbtc', 'fbtc', 'cbbtc', 'swbtc')\n            then 1e8\n            else 1e18\n        end\n    )\n as amount\n        from assets_locked\n        left join\n            currency_lookup\n            on assets_locked.token_address = currency_lookup.ethereum_address\n        where currency_lookup.id is not null\n    ),\n\n    currency_conversion as (\n        select\n            lookup_currency.*,\n            most_recent_conversion.last_updated_at as currency_conversion_timestamp,\n            round(\n                lookup_currency.amount * most_recent_conversion.usd_value, 2\n            ) as token_usd_value\n        from lookup_currency\n        left join\n            most_recent_conversion\n            on lookup_currency.token_id = most_recent_conversion.coin_id\n    ),\n\n    deduplicated as (\n        select *\n        from currency_conversion\n        qualify\n            row_number() over (\n                partition by transaction_hash, sequence_number, _gs_gid\n                order by currency_conversion_timestamp desc\n            )\n            = 1\n    )\n\nselect *\nfrom deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_goldsky_borrower_operations_mezo__loans_graph": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_borrower_operations_mezo__loans_graph", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/with_graph/int_goldsky_borrower_operations_mezo__loans_graph.sql", "original_file_path": "models/50_intermediate/goldsky/with_graph/int_goldsky_borrower_operations_mezo__loans_graph.sql", "unique_id": "model.mezo.int_goldsky_borrower_operations_mezo__loans_graph", "fqn": ["mezo", "50_intermediate", "goldsky", "with_graph", "int_goldsky_borrower_operations_mezo__loans_graph"], "alias": "int_goldsky_borrower_operations_mezo__loans_graph", "checksum": {"name": "sha256", "checksum": "01f5650054941cd039ace895d232f611f3954217c482e7c9dc2959f503d3eecb"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrower": {"name": "borrower", "description": "Address of the borrower", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_interest_update_time": {"name": "last_interest_update_time", "description": "Timestamp of the last interest update", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "operation": {"name": "operation", "description": "Type of operation performed on the trove", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "principal": {"name": "principal", "description": "Principal debt amount (normalized currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "interest": {"name": "interest", "description": "Interest amount (normalized currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral": {"name": "collateral", "description": "Collateral amount (normalized currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stake": {"name": "stake", "description": "Stake amount (normalized currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_conversion_timestamp": {"name": "currency_conversion_timestamp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral_usd_value": {"name": "collateral_usd_value", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral_ratio": {"name": "collateral_ratio", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "previous_principal_value": {"name": "previous_principal_value", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "previous_collateral_value": {"name": "previous_collateral_value", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "adjustment_type_principal": {"name": "adjustment_type_principal", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "adjustment_type_collateral": {"name": "adjustment_type_collateral", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_in_graph": {"name": "is_in_graph", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_segment_id": {"name": "canonical_segment_id", "description": "The fully-merged Segment ID (the profile Segment now understands any events or identifiers to map to).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/with_graph/int_goldsky_borrower_operations_mezo__loans_graph.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.7037547, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_borrower_operations_mezo__loans_graph`", "raw_code": "{{ resolve_identities(ref(\"int_goldsky_borrower_operations_mezo__loans\"), \"borrower\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_borrower_operations_mezo__loans", "package": null, "version": null}, {"name": "stg_segment_profiles__user_identifiers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.mezo.resolve_identities"], "nodes": ["model.mezo.int_goldsky_borrower_operations_mezo__loans", "model.mezo.stg_segment_profiles__user_identifiers"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/with_graph/int_goldsky_borrower_operations_mezo__loans_graph.sql", "compiled": true, "compiled_code": "\n    with\n        goldsky as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_borrower_operations_mezo__loans`),\n\n        graph as (\n            select *\n            from `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__user_identifiers`\n            where id_type = 'wallet_address'\n        ),\n\n        joined as (\n            select\n                goldsky.*,\n                graph.trait_value is not null as is_in_graph,\n                coalesce(\n                    graph.canonical_segment_id, goldsky.borrower\n                ) as canonical_segment_id\n            from goldsky\n            left join graph on lower(goldsky.borrower) = lower(graph.trait_value)\n        )\n\n    select *\n    from joined\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_goldsky_market_mezo__order_placed_graph": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_market_mezo__order_placed_graph", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/with_graph/int_goldsky_market_mezo__order_placed_graph.sql", "original_file_path": "models/50_intermediate/goldsky/with_graph/int_goldsky_market_mezo__order_placed_graph.sql", "unique_id": "model.mezo.int_goldsky_market_mezo__order_placed_graph", "fqn": ["mezo", "50_intermediate", "goldsky", "with_graph", "int_goldsky_market_mezo__order_placed_graph"], "alias": "int_goldsky_market_mezo__order_placed_graph", "checksum": {"name": "sha256", "checksum": "1f8d3e490d3d76d8244cacfd6f24a792a8476469e557d7642d057cc5ec7407d0"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "Unique identifier for the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer": {"name": "customer", "description": "Address of the customer who placed the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Product identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "Price of the order (normalized currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "Name of the product that was ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_in_graph": {"name": "is_in_graph", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_segment_id": {"name": "canonical_segment_id", "description": "The fully-merged Segment ID (the profile Segment now understands any events or identifiers to map to).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/with_graph/int_goldsky_market_mezo__order_placed_graph.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.7011, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed_graph`", "raw_code": "{{ resolve_identities(ref(\"int_goldsky_market_mezo__order_placed\"), \"customer\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed", "package": null, "version": null}, {"name": "stg_segment_profiles__user_identifiers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.mezo.resolve_identities"], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed", "model.mezo.stg_segment_profiles__user_identifiers"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/with_graph/int_goldsky_market_mezo__order_placed_graph.sql", "compiled": true, "compiled_code": "\n    with\n        goldsky as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`),\n\n        graph as (\n            select *\n            from `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__user_identifiers`\n            where id_type = 'wallet_address'\n        ),\n\n        joined as (\n            select\n                goldsky.*,\n                graph.trait_value is not null as is_in_graph,\n                coalesce(\n                    graph.canonical_segment_id, goldsky.customer\n                ) as canonical_segment_id\n            from goldsky\n            left join graph on lower(goldsky.customer) = lower(graph.trait_value)\n        )\n\n    select *\n    from joined\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_goldsky_musd_trove_manager__liquidation_graph": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_musd_trove_manager__liquidation_graph", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/with_graph/int_goldsky_musd_trove_manager__liquidation_graph.sql", "original_file_path": "models/50_intermediate/goldsky/with_graph/int_goldsky_musd_trove_manager__liquidation_graph.sql", "unique_id": "model.mezo.int_goldsky_musd_trove_manager__liquidation_graph", "fqn": ["mezo", "50_intermediate", "goldsky", "with_graph", "int_goldsky_musd_trove_manager__liquidation_graph"], "alias": "int_goldsky_musd_trove_manager__liquidation_graph", "checksum": {"name": "sha256", "checksum": "1ee42754290a340d0162f5e8827587740e9124b2ec48f9f6f7c9ecce52c07b47"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"vid": {"name": "vid", "description": "Unique version identifier for the record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block": {"name": "block", "description": "Block data associated with the liquidation transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier for the liquidation event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "The blockchain block number where the liquidation occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the blockchain transaction containing the liquidation event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Identifier of the smart contract where the liquidation was executed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coll_gas_compensation": {"name": "coll_gas_compensation", "description": "Gas compensation related to the collateral in the liquidation process", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gas_compensation": {"name": "gas_compensation", "description": "General gas compensation for the liquidation transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Goldsky-specific field indicating the blockchain network", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Goldsky-specific global identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of when the liquidation event occurred, converted from milliseconds to a readable timestamp format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_principal": {"name": "liquidated_principal", "description": "Amount of principal that was liquidated, formatted as currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_interest": {"name": "liquidated_interest", "description": "Amount of interest that was liquidated, formatted as currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_collateral": {"name": "liquidated_collateral", "description": "Amount of collateral that was liquidated, formatted as currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrower": {"name": "borrower", "description": "Blockchain address of the borrower whose trove was liquidated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "operation": {"name": "operation", "description": "Type of operation performed during the trove liquidation event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_in_graph": {"name": "is_in_graph", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_segment_id": {"name": "canonical_segment_id", "description": "The fully-merged Segment ID (the profile Segment now understands any events or identifiers to map to).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/with_graph/int_goldsky_musd_trove_manager__liquidation_graph.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.7051253, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_musd_trove_manager__liquidation_graph`", "raw_code": "{{ resolve_identities(ref(\"int_goldsky_musd_trove_manager__liquidation\"), \"borrower\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_musd_trove_manager__liquidation", "package": null, "version": null}, {"name": "stg_segment_profiles__user_identifiers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.mezo.resolve_identities"], "nodes": ["model.mezo.int_goldsky_musd_trove_manager__liquidation", "model.mezo.stg_segment_profiles__user_identifiers"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/with_graph/int_goldsky_musd_trove_manager__liquidation_graph.sql", "compiled": true, "compiled_code": "\n    with\n        goldsky as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_musd_trove_manager__liquidation`),\n\n        graph as (\n            select *\n            from `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__user_identifiers`\n            where id_type = 'wallet_address'\n        ),\n\n        joined as (\n            select\n                goldsky.*,\n                graph.trait_value is not null as is_in_graph,\n                coalesce(\n                    graph.canonical_segment_id, goldsky.borrower\n                ) as canonical_segment_id\n            from goldsky\n            left join graph on lower(goldsky.borrower) = lower(graph.trait_value)\n        )\n\n    select *\n    from joined\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_mezo_bridge_mainnet__assets_locked_graph", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/with_graph/int_goldsky_mezo_bridge_mainnet__assets_locked_graph.sql", "original_file_path": "models/50_intermediate/goldsky/with_graph/int_goldsky_mezo_bridge_mainnet__assets_locked_graph.sql", "unique_id": "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph", "fqn": ["mezo", "50_intermediate", "goldsky", "with_graph", "int_goldsky_mezo_bridge_mainnet__assets_locked_graph"], "alias": "int_goldsky_mezo_bridge_mainnet__assets_locked_graph", "checksum": {"name": "sha256", "checksum": "5f569974905d34e89b15b1d2f7f839e1254d7254d9743a31c8fc50af17757632"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sequence_number": {"name": "sequence_number", "description": "Sequence number for the lock event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "Address of the asset recipient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_adress": {"name": "token_adress", "description": "Address of the token", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mainnet'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_symbol": {"name": "token_symbol", "description": "The token symbol (e.g. BTC, ETH, USDC)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_id": {"name": "token_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_name": {"name": "token_name", "description": "The full name of the token", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount of tokens locked (normalized based on token decimals)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_conversion_timestamp": {"name": "currency_conversion_timestamp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_usd_value": {"name": "token_usd_value", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_in_graph": {"name": "is_in_graph", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_segment_id": {"name": "canonical_segment_id", "description": "The fully-merged Segment ID (the profile Segment now understands any events or identifiers to map to).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/with_graph/int_goldsky_mezo_bridge_mainnet__assets_locked_graph.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.7067158, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_mezo_bridge_mainnet__assets_locked_graph`", "raw_code": "{{\n    resolve_identities(\n        ref(\"int_goldsky_mezo_bridge_mainnet__assets_locked\"), \"recipient\"\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}, {"name": "stg_segment_profiles__user_identifiers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.mezo.resolve_identities"], "nodes": ["model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked", "model.mezo.stg_segment_profiles__user_identifiers"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/with_graph/int_goldsky_mezo_bridge_mainnet__assets_locked_graph.sql", "compiled": true, "compiled_code": "\n    with\n        goldsky as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_mezo_bridge_mainnet__assets_locked`),\n\n        graph as (\n            select *\n            from `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__user_identifiers`\n            where id_type = 'wallet_address'\n        ),\n\n        joined as (\n            select\n                goldsky.*,\n                graph.trait_value is not null as is_in_graph,\n                coalesce(\n                    graph.canonical_segment_id, goldsky.recipient\n                ) as canonical_segment_id\n            from goldsky\n            left join graph on lower(goldsky.recipient) = lower(graph.trait_value)\n        )\n\n    select *\n    from joined\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_goldsky_market_mezo__donated_graph": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_goldsky_market_mezo__donated_graph", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/goldsky/with_graph/int_goldsky_market_mezo__donated_graph.sql", "original_file_path": "models/50_intermediate/goldsky/with_graph/int_goldsky_market_mezo__donated_graph.sql", "unique_id": "model.mezo.int_goldsky_market_mezo__donated_graph", "fqn": ["mezo", "50_intermediate", "goldsky", "with_graph", "int_goldsky_market_mezo__donated_graph"], "alias": "int_goldsky_market_mezo__donated_graph", "checksum": {"name": "sha256", "checksum": "f79d68c3371647f38a689181ae2dd210fbb3e548ffb20c067e1db36ccb74cb55"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"block": {"name": "block", "description": "Block number in which this event occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as a high-precision numeric value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Hash of the transaction that emitted this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Address of the contract that emitted the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "donor": {"name": "donor", "description": "Address of the donor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "beneficiary_id": {"name": "beneficiary_id", "description": "ID of the beneficiary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain where the event originated, e.g., 'mezo'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Unique identifier from Goldsky for the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_timestamp": {"name": "record_timestamp", "description": "Timestamp of the event formatted as a datetime", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount that was donated (normalized currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "Address of the recipient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_in_graph": {"name": "is_in_graph", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_segment_id": {"name": "canonical_segment_id", "description": "The fully-merged Segment ID (the profile Segment now understands any events or identifiers to map to).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/goldsky/with_graph/int_goldsky_market_mezo__donated_graph.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.7022216, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__donated_graph`", "raw_code": "{{ resolve_identities(ref(\"int_goldsky_market_mezo__donated\"), \"donor\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__donated", "package": null, "version": null}, {"name": "stg_segment_profiles__user_identifiers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.mezo.resolve_identities"], "nodes": ["model.mezo.int_goldsky_market_mezo__donated", "model.mezo.stg_segment_profiles__user_identifiers"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/with_graph/int_goldsky_market_mezo__donated_graph.sql", "compiled": true, "compiled_code": "\n    with\n        goldsky as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__donated`),\n\n        graph as (\n            select *\n            from `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__user_identifiers`\n            where id_type = 'wallet_address'\n        ),\n\n        joined as (\n            select\n                goldsky.*,\n                graph.trait_value is not null as is_in_graph,\n                coalesce(\n                    graph.canonical_segment_id, goldsky.donor\n                ) as canonical_segment_id\n            from goldsky\n            left join graph on lower(goldsky.donor) = lower(graph.trait_value)\n        )\n\n    select *\n    from joined\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_segment__sessions": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_segment__sessions", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/segment/int_segment__sessions.sql", "original_file_path": "models/50_intermediate/segment/int_segment__sessions.sql", "unique_id": "model.mezo.int_segment__sessions", "fqn": ["mezo", "50_intermediate", "segment", "int_segment__sessions"], "alias": "int_segment__sessions", "checksum": {"name": "sha256", "checksum": "6d3b378f8cf6a0389e5c6b484ab6be935c7fcbe98cb9223632fa0e1dfe5bd3e8"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"source_name": {"name": "source_name", "description": "Name of the event source", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_id": {"name": "session_id", "description": "Unique identifier for the session", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_start_tstamp": {"name": "session_start_tstamp", "description": "Start timestamp of the session", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_end_tstamp": {"name": "session_end_tstamp", "description": "End timestamp of the session", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "button_clicks": {"name": "button_clicks", "description": "Count of button click events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_views": {"name": "page_views", "description": "Count of page view events in the session", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ups": {"name": "sign_ups", "description": "Count of completed sign-up events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "wallet_connections": {"name": "wallet_connections", "description": "Count of wallet connection events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_swaps": {"name": "asset_swaps", "description": "Count of asset swap events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ins": {"name": "sign_ins", "description": "Count of completed sign-in events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "swap_assets_starts": {"name": "swap_assets_starts", "description": "Count of asset swap start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_up_starts": {"name": "sign_up_starts", "description": "Count of sign-up start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funds_additions": {"name": "funds_additions", "description": "Count of funds added events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_additions": {"name": "pool_liquidity_additions", "description": "Count of liquidity pool additions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "add_funds_starts": {"name": "add_funds_starts", "description": "Count of add-funds start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vault_assets_starts": {"name": "vault_assets_starts", "description": "Count of vault asset start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "username_updates": {"name": "username_updates", "description": "Count of username update events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_vaulted": {"name": "assets_vaulted", "description": "Count of vaulted asset events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrow_starts": {"name": "musd_borrow_starts", "description": "Count of mUSD borrow start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_withdrawals": {"name": "pool_liquidity_withdrawals", "description": "Count of liquidity pool withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_donations": {"name": "musd_donations", "description": "Count of mUSD donation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_starts": {"name": "market_spend_starts", "description": "Count of market spend start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrows": {"name": "musd_borrows", "description": "Count of mUSD borrow events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "items_purchased": {"name": "items_purchased", "description": "Count of purchase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "repay_loan_starts": {"name": "repay_loan_starts", "description": "Count of repay loan start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_repaid": {"name": "loans_repaid", "description": "Count of loan repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_increase_reduce_ratio": {"name": "loan_increase_reduce_ratio", "description": "Ratio metric for loan increase/reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "increase_loan_starts": {"name": "increase_loan_starts", "description": "Count of loan increase start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_increased": {"name": "loans_increased", "description": "Count of loan increase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_deposits": {"name": "loan_collateral_deposits", "description": "Count of loan collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_completions": {"name": "market_spend_completions", "description": "Count of completed market spend events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_withdrawals": {"name": "loan_collateral_withdrawals", "description": "Count of loan collateral withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "withdraw_loan_collateral_starts": {"name": "withdraw_loan_collateral_starts", "description": "Count of withdraw loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deposit_loan_collateral_starts": {"name": "deposit_loan_collateral_starts", "description": "Count of deposit loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_balance_confirmations": {"name": "borrow_more_balance_confirmations", "description": "Count of borrow-more balance confirmation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_swaps": {"name": "assets_swaps", "description": "Count of asset swap events (alternate metric)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repay_starts": {"name": "borrow_repay_starts", "description": "Count of borrow repay start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repays": {"name": "borrow_repays", "description": "Count of borrow repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_donation_successes": {"name": "market_donation_successes", "description": "Count of successful market donations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposit_starts": {"name": "borrow_collateral_deposit_starts", "description": "Count of borrow collateral deposit start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_increase_coll": {"name": "borrow_more_increase_coll", "description": "Count of borrow-more increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_increase_coll": {"name": "borrow_more_strategy_increase_coll", "description": "Count of borrow-more strategy increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposits": {"name": "borrow_collateral_deposits", "description": "Count of borrow collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_button_clicks": {"name": "borrow_more_button_clicks", "description": "Count of borrow-more button click events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_confirm_increase_coll": {"name": "borrow_more_confirm_increase_coll", "description": "Count of borrow-more confirm increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "llm_shares": {"name": "llm_shares", "description": "Count of LLM share events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_reduce_ratio": {"name": "borrow_more_strategy_reduce_ratio", "description": "Ratio metric for borrow-more strategy reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_source": {"name": "utm_source", "description": "UTM source parameter", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "UTM content parameter", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "UTM medium parameter", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "UTM campaign parameter", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "UTM term parameter", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gclid": {"name": "gclid", "description": "Google Ads click identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url": {"name": "first_page_url", "description": "Full URL of the first page in the session", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_host": {"name": "first_page_url_host", "description": "Host/domain of the first page in the session", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_path": {"name": "first_page_url_path", "description": "Path portion of the first page URL", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_query": {"name": "first_page_url_query", "description": "Query string of the first page URL", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "Full referrer URL from which the user navigated", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_host": {"name": "referrer_host", "description": "Host/domain of the referrer URL", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device": {"name": "device", "description": "Device name/type (if available)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_category": {"name": "device_category", "description": "Category of the device (e.g., desktop, mobile, tablet)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url": {"name": "last_page_url", "description": "Full URL of the last page in the session", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_host": {"name": "last_page_url_host", "description": "Host/domain of the last page in the session", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_path": {"name": "last_page_url_path", "description": "Path portion of the last page URL", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_query": {"name": "last_page_url_query", "description": "Query string of the last page URL", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_in_s": {"name": "duration_in_s", "description": "Total session duration in seconds", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_in_s_tier": {"name": "duration_in_s_tier", "description": "Tiered session duration category", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "Medium extracted from referrer (e.g., organic, paid)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "Source extracted from referrer (e.g., google, facebook)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "blended_user_id": {"name": "blended_user_id", "description": "Stitched user identifier across sessions (anonymous + logged in)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_number": {"name": "session_number", "description": "", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "landing_page_url_without_query_string": {"name": "landing_page_url_without_query_string", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "exit_page_url_without_query_string": {"name": "exit_page_url_without_query_string", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_start_date": {"name": "session_start_date", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_segment_id_with_fallback": {"name": "canonical_segment_id_with_fallback", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_id": {"name": "referrer_id", "description": "Surrogate key for the channel grouping, generated from referrer source + medium.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "paid_id": {"name": "paid_id", "description": "Surrogate key for the campaign, generated from referrer source + medium + campaign id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/segment/int_segment__sessions.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.7269692, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions`", "raw_code": "with\n    segment_sessions as (select * from {{ ref(\"int_segment_web_sessions\") }}),\n\n    twitter_campaigns as (\n        select distinct campaign_name, concat('twitter_', campaign_id) as campaign_id\n        from {{ ref(\"twitter_ads\", \"stg_twitter_ads__campaign_history\") }}\n    ),\n\n    segment_graph as (\n        select trait_value as anonymous_id, canonical_segment_id\n        from {{ ref(\"stg_segment_profiles__user_identifiers\") }}\n        where id_type = 'anonymous_id'\n    ),\n\n    sessions_user_enriched as (\n        select\n            segment_sessions.*,\n            {{ url_without_query_strings(\"segment_sessions.first_page_url\") }}\n            as landing_page_url_without_query_string,\n            {{ url_without_query_strings(\"segment_sessions.last_page_url\") }}\n            as exit_page_url_without_query_string,\n            cast(segment_sessions.session_start_tstamp as date) as session_start_date,\n            coalesce(\n                segment_graph.canonical_segment_id, segment_sessions.anonymous_id\n            ) as canonical_segment_id_with_fallback\n        from segment_sessions\n        left join\n            segment_graph on segment_sessions.anonymous_id = segment_graph.anonymous_id\n\n    ),\n\n    add_campaign_id_twitter as (\n        select sessions_user_enriched.*, twitter_campaigns.campaign_id\n        from sessions_user_enriched\n        left join\n            twitter_campaigns\n            on sessions_user_enriched.utm_campaign = twitter_campaigns.campaign_name\n            and sessions_user_enriched.utm_source = 'twitter'\n            and sessions_user_enriched.utm_medium = 'paid_social'\n    ),\n\n    add_reffer_surrogate_key as (\n        select\n            *,\n            {{\n                dbt_utils.generate_surrogate_key(\n                    [\"referrer_medium\", \"referrer_source\"]\n                )\n            }} as referrer_id,\n            {{\n                dbt_utils.generate_surrogate_key(\n                    [\"campaign_id\", \"referrer_medium\", \"referrer_source\"]\n                )\n            }} as paid_id\n        from add_campaign_id_twitter\n    )\n\nselect *\nfrom add_reffer_surrogate_key", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment_web_sessions", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_history", "package": "twitter_ads", "version": null}, {"name": "stg_segment_profiles__user_identifiers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.mezo.url_without_query_strings", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.mezo.int_segment_web_sessions", "model.twitter_ads.stg_twitter_ads__campaign_history", "model.mezo.stg_segment_profiles__user_identifiers"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/int_segment__sessions.sql", "compiled": true, "compiled_code": "with\n    segment_sessions as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions`),\n\n    twitter_campaigns as (\n        select distinct campaign_name, concat('twitter_', campaign_id) as campaign_id\n        from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_history`\n    ),\n\n    segment_graph as (\n        select trait_value as anonymous_id, canonical_segment_id\n        from `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__user_identifiers`\n        where id_type = 'anonymous_id'\n    ),\n\n    sessions_user_enriched as (\n        select\n            segment_sessions.*,\n            \n    regexp_replace(segment_sessions.first_page_url, '\\\\?.*$', '')\n\n            as landing_page_url_without_query_string,\n            \n    regexp_replace(segment_sessions.last_page_url, '\\\\?.*$', '')\n\n            as exit_page_url_without_query_string,\n            cast(segment_sessions.session_start_tstamp as date) as session_start_date,\n            coalesce(\n                segment_graph.canonical_segment_id, segment_sessions.anonymous_id\n            ) as canonical_segment_id_with_fallback\n        from segment_sessions\n        left join\n            segment_graph on segment_sessions.anonymous_id = segment_graph.anonymous_id\n\n    ),\n\n    add_campaign_id_twitter as (\n        select sessions_user_enriched.*, twitter_campaigns.campaign_id\n        from sessions_user_enriched\n        left join\n            twitter_campaigns\n            on sessions_user_enriched.utm_campaign = twitter_campaigns.campaign_name\n            and sessions_user_enriched.utm_source = 'twitter'\n            and sessions_user_enriched.utm_medium = 'paid_social'\n    ),\n\n    add_reffer_surrogate_key as (\n        select\n            *,\n            to_hex(md5(cast(coalesce(cast(referrer_medium as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(referrer_source as string), '_dbt_utils_surrogate_key_null_') as string))) as referrer_id,\n            to_hex(md5(cast(coalesce(cast(campaign_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(referrer_medium as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(referrer_source as string), '_dbt_utils_surrogate_key_null_') as string))) as paid_id\n        from add_campaign_id_twitter\n    )\n\nselect *\nfrom add_reffer_surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["session_id"], "time_spine": null}, "model.mezo.int_segment_web_sessions": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_segment_web_sessions", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/segment/sessionization/int_segment_web_sessions.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_sessions.sql", "unique_id": "model.mezo.int_segment_web_sessions", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "int_segment_web_sessions"], "alias": "int_segment_web_sessions", "checksum": {"name": "sha256", "checksum": "db01fd16ad391017311e00f2b29fab537da74b1210fe34f5ef8cd1a0a921e0b4"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "session_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000, "cluster_by": "session_id", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "sort": "session_start_tstamp", "dist": "session_id"}, "tags": [], "description": "The purpose of this model is to expose a single web session, derived from Segment web events. Sessions are the most common way that analysis of web visitor behavior is conducted, and although Segment doesn't natively output session data, this model uses standard logic to create sessions out of page view events.\n\nA session is meant to represent a single instance of web activity where a user is actively browsing a website. In this case, we are demarcating sessions by 30 minute windows of inactivity: if there is 30 minutes of inactivity between two page views, the second page view begins a new session. Additionally, page views across different devices will always be tied to different sessions.\n\nThe logic implemented in this particular model is responsible for incrementally calculating a user's session number; the core sessionization logic is done in upstream models.", "columns": {"source_name": {"name": "source_name", "description": "Name of the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_id": {"name": "session_id", "description": "Unique identifier for the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_start_tstamp": {"name": "session_start_tstamp", "description": "Start timestamp of the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_end_tstamp": {"name": "session_end_tstamp", "description": "End timestamp of the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "button_clicks": {"name": "button_clicks", "description": "Count of button click events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_views": {"name": "page_views", "description": "Count of page view events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ups": {"name": "sign_ups", "description": "Count of completed sign-up events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "wallet_connections": {"name": "wallet_connections", "description": "Count of wallet connection events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_swaps": {"name": "asset_swaps", "description": "Count of asset swap events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ins": {"name": "sign_ins", "description": "Count of completed sign-in events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "swap_assets_starts": {"name": "swap_assets_starts", "description": "Count of asset swap start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_up_starts": {"name": "sign_up_starts", "description": "Count of sign-up start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funds_additions": {"name": "funds_additions", "description": "Count of funds added events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_additions": {"name": "pool_liquidity_additions", "description": "Count of liquidity pool additions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "add_funds_starts": {"name": "add_funds_starts", "description": "Count of add-funds start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vault_assets_starts": {"name": "vault_assets_starts", "description": "Count of vault asset start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "username_updates": {"name": "username_updates", "description": "Count of username update events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_vaulted": {"name": "assets_vaulted", "description": "Count of vaulted asset events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrow_starts": {"name": "musd_borrow_starts", "description": "Count of mUSD borrow start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_withdrawals": {"name": "pool_liquidity_withdrawals", "description": "Count of liquidity pool withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_donations": {"name": "musd_donations", "description": "Count of mUSD donation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_starts": {"name": "market_spend_starts", "description": "Count of market spend start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrows": {"name": "musd_borrows", "description": "Count of mUSD borrow events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "items_purchased": {"name": "items_purchased", "description": "Count of purchase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "repay_loan_starts": {"name": "repay_loan_starts", "description": "Count of repay loan start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_repaid": {"name": "loans_repaid", "description": "Count of loan repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_increase_reduce_ratio": {"name": "loan_increase_reduce_ratio", "description": "Ratio metric for loan increase/reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "increase_loan_starts": {"name": "increase_loan_starts", "description": "Count of loan increase start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_increased": {"name": "loans_increased", "description": "Count of loan increase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_deposits": {"name": "loan_collateral_deposits", "description": "Count of loan collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_completions": {"name": "market_spend_completions", "description": "Count of completed market spend events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_withdrawals": {"name": "loan_collateral_withdrawals", "description": "Count of loan collateral withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "withdraw_loan_collateral_starts": {"name": "withdraw_loan_collateral_starts", "description": "Count of withdraw loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deposit_loan_collateral_starts": {"name": "deposit_loan_collateral_starts", "description": "Count of deposit loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_balance_confirmations": {"name": "borrow_more_balance_confirmations", "description": "Count of borrow-more balance confirmation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_swaps": {"name": "assets_swaps", "description": "Count of asset swap events (alternate metric)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repay_starts": {"name": "borrow_repay_starts", "description": "Count of borrow repay start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repays": {"name": "borrow_repays", "description": "Count of borrow repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_donation_successes": {"name": "market_donation_successes", "description": "Count of successful market donations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposit_starts": {"name": "borrow_collateral_deposit_starts", "description": "Count of borrow collateral deposit start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_increase_coll": {"name": "borrow_more_increase_coll", "description": "Count of borrow-more increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_increase_coll": {"name": "borrow_more_strategy_increase_coll", "description": "Count of borrow-more strategy increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposits": {"name": "borrow_collateral_deposits", "description": "Count of borrow collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_button_clicks": {"name": "borrow_more_button_clicks", "description": "Count of borrow-more button click events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_confirm_increase_coll": {"name": "borrow_more_confirm_increase_coll", "description": "Count of borrow-more confirm increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "llm_shares": {"name": "llm_shares", "description": "Count of LLM share events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_reduce_ratio": {"name": "borrow_more_strategy_reduce_ratio", "description": "Ratio metric for borrow-more strategy reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_source": {"name": "utm_source", "description": "UTM source parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "UTM content parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "UTM medium parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "UTM campaign parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "UTM term parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gclid": {"name": "gclid", "description": "Google Ads click identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url": {"name": "first_page_url", "description": "Full URL of the first page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_host": {"name": "first_page_url_host", "description": "Host/domain of the first page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_path": {"name": "first_page_url_path", "description": "Path portion of the first page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_query": {"name": "first_page_url_query", "description": "Query string of the first page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "Full referrer URL from which the user navigated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_host": {"name": "referrer_host", "description": "Host/domain of the referrer URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device": {"name": "device", "description": "Device name/type (if available)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_category": {"name": "device_category", "description": "Category of the device (e.g., desktop, mobile, tablet)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url": {"name": "last_page_url", "description": "Full URL of the last page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_host": {"name": "last_page_url_host", "description": "Host/domain of the last page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_path": {"name": "last_page_url_path", "description": "Path portion of the last page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_query": {"name": "last_page_url_query", "description": "Query string of the last page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_in_s": {"name": "duration_in_s", "description": "Total session duration in seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_in_s_tier": {"name": "duration_in_s_tier", "description": "Tiered session duration category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "Medium extracted from referrer (e.g., organic, paid)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "Source extracted from referrer (e.g., google, facebook)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "blended_user_id": {"name": "blended_user_id", "description": "Stitched user identifier across sessions (anonymous + logged in)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_number": {"name": "session_number", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/segment/sessionization/int_segment_web_sessions.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "incremental", "unique_key": "session_id", "sort": "session_start_tstamp", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "dist": "session_id", "cluster_by": "session_id"}, "created_at": 1759221506.7439926, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions`", "raw_code": "{{\n    config(\n        materialized=\"incremental\",\n        unique_key=\"session_id\",\n        sort=\"session_start_tstamp\",\n        partition_by={\n            \"field\": \"session_start_tstamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": var(\"segment_bigquery_partition_granularity\"),\n        },\n        dist=\"session_id\",\n        cluster_by=\"session_id\",\n    )\n}}\n\n{#\nWindow functions are challenging to make incremental. This approach grabs\nexisting values from the existing table and then adds the value of session_number\non top of that seed. During development, this decreased the model runtime\nby 25x on 2 years of data (from 600 to 25 seconds), so even though the code is\nmore complicated, the performance tradeoff is worth it.\n#}\nwith\n    sessions_stitched as (\n\n        select *\n        from\n            {{ ref(\"int_segment_web_sessions__stitched\") }}\n\n            {% if is_incremental() %}\n                {{\n                    generate_sessionization_incremental_filter(\n                        this, \"session_start_tstamp\", \"session_start_tstamp\", \">\"\n                    )\n                }}\n            {% endif %}\n\n    ),\n\n    {% if is_incremental() %}\n\n        agg as (\n\n            select blended_user_id, count(*) as starting_session_number\n            from\n                {{ this }}\n\n                -- only include sessions that are not going to be resessionized in\n                -- this run\n                {{\n                    generate_sessionization_incremental_filter(\n                        this, \"session_start_tstamp\", \"session_start_tstamp\", \"<=\"\n                    )\n                }}\n\n            group by 1\n\n        ),\n\n    {% endif %}\n\n    windowed as (\n\n        select\n\n            ss.*,\n            row_number() over (\n                partition by ss.blended_user_id order by ss.session_start_tstamp\n            )\n            {% if is_incremental() %}\n                + coalesce(agg.starting_session_number, 0)\n            {% endif %} as session_number\n        from sessions_stitched as ss\n        {% if is_incremental() %}\n            left join agg on ss.blended_user_id = agg.blended_user_id\n        {% endif %}\n    )\n\nselect *\nfrom windowed", "doc_blocks": ["doc.mezo.segment_web_sessions"], "language": "sql", "refs": [{"name": "int_segment_web_sessions__stitched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.mezo.generate_sessionization_incremental_filter"], "nodes": ["model.mezo.int_segment_web_sessions__stitched"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_sessions.sql", "compiled": true, "compiled_code": "\n\n\nwith\n    sessions_stitched as (\n\n        select *\n        from\n            `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions__stitched`\n\n            \n                \n    where session_start_tstamp > (\n        select \n            timestamp_sub(\n                max(session_start_tstamp), \n                interval 3 hour\n                )\n        from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions` \n    )\n            \n\n    ),\n\n    \n\n        agg as (\n\n            select blended_user_id, count(*) as starting_session_number\n            from\n                `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions`\n\n                -- only include sessions that are not going to be resessionized in\n                -- this run\n                \n    where session_start_tstamp <= (\n        select \n            timestamp_sub(\n                max(session_start_tstamp), \n                interval 3 hour\n                )\n        from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions` \n    )\n\n            group by 1\n\n        ),\n\n    \n\n    windowed as (\n\n        select\n\n            ss.*,\n            row_number() over (\n                partition by ss.blended_user_id order by ss.session_start_tstamp\n            )\n            \n                + coalesce(agg.starting_session_number, 0)\n             as session_number\n        from sessions_stitched as ss\n        \n            left join agg on ss.blended_user_id = agg.blended_user_id\n        \n    )\n\nselect *\nfrom windowed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["session_id"], "time_spine": null}, "model.mezo.int_segment_web_user_stitching": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_segment_web_user_stitching", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/segment/sessionization/int_segment_web_user_stitching.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_user_stitching.sql", "unique_id": "model.mezo.int_segment_web_user_stitching", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "int_segment_web_user_stitching"], "alias": "int_segment_web_user_stitching", "checksum": {"name": "sha256", "checksum": "0770e179edf22fb915a95ec9d79df3cbbbd1396b281da88eb8c6131b93cf7ee3"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "Segment user_id (if logged in)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_seen_at": {"name": "first_seen_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_seen_at": {"name": "last_seen_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/segment/sessionization/int_segment_web_user_stitching.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "table"}, "created_at": 1759221506.7402413, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_segment_web_user_stitching`", "raw_code": "{{ config(materialized=\"table\") }}\n\nwith\n    events as (select * from {{ ref(\"stg_segment__events\") }}),\n\n    mapping as (\n\n        select distinct\n\n            anonymous_id,\n            last_value(user_id ignore nulls) over (\n                partition by anonymous_id\n                order by tstamp\n                rows between unbounded preceding and unbounded following\n            ) as user_id,\n\n            min(tstamp) over (partition by anonymous_id) as first_seen_at,\n\n            max(tstamp) over (partition by anonymous_id) as last_seen_at\n\n        from events\n\n    )\n\nselect *\nfrom mapping", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_segment__events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.stg_segment__events"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_user_stitching.sql", "compiled": true, "compiled_code": "\n\nwith\n    events as (select * from `mezo-portal-data`.`dbt_staging`.`stg_segment__events`),\n\n    mapping as (\n\n        select distinct\n\n            anonymous_id,\n            last_value(user_id ignore nulls) over (\n                partition by anonymous_id\n                order by tstamp\n                rows between unbounded preceding and unbounded following\n            ) as user_id,\n\n            min(tstamp) over (partition by anonymous_id) as first_seen_at,\n\n            max(tstamp) over (partition by anonymous_id) as last_seen_at\n\n        from events\n\n    )\n\nselect *\nfrom mapping", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_segment_web_events__sessionized": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_segment_web_events__sessionized", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/segment/sessionization/int_segment_web_events__sessionized.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_events__sessionized.sql", "unique_id": "model.mezo.int_segment_web_events__sessionized", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "int_segment_web_events__sessionized"], "alias": "int_segment_web_events__sessionized", "checksum": {"name": "sha256", "checksum": "6303cac5f73b20fe0e1a93b999fce69abe46e927fd67ee58719248e9ebaa3270"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000, "cluster_by": "id", "partition_by": {"field": "tstamp", "data_type": "timestamp", "granularity": "day"}, "sort": "tstamp", "dist": "id"}, "tags": [], "description": "The purpose of this model is to assign a `session_id` to page views. The business logic of how this is done is that any period of inactivity of 30 minutes or more resets the session, and any subsequent page views are assigned a new `session_id`.\n\nThe implementation of this logic is rather involved, and requires multiple CTEs. Comments have been added to the source to describe the purpose of the CTEs that are more esoteric.", "columns": {"_dbt_source_relation": {"name": "_dbt_source_relation", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_source": {"name": "utm_source", "description": "UTM source parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "UTM medium parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "UTM campaign parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "UTM term parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "UTM content parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "ip": {"name": "ip", "description": "IP address of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "library_name": {"name": "library_name", "description": "Name of the Segment library sending the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_library_version": {"name": "context_library_version", "description": "Version of the Segment library", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_locale": {"name": "context_locale", "description": "User\u2019s locale setting (e.g., en-US, de-DE)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_path": {"name": "page_url_path", "description": "Path of the page URL (excluding domain and query string)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "Full referrer URL from which the user navigated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_query": {"name": "page_url_query", "description": "Query string from the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_title": {"name": "context_page_title", "description": "Title of the page from the HTML document", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url": {"name": "page_url", "description": "Full page URL (protocol + domain + path + query)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_source_id": {"name": "context_protocols_source_id", "description": "Internal identifier from Segment protocols", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_violations": {"name": "context_protocols_violations", "description": "Protocol validation issues recorded by Segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_timezone": {"name": "context_timezone", "description": "User\u2019s timezone (e.g., Europe/Berlin)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_agent": {"name": "user_agent", "description": "Raw User-Agent string from the browser", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_brands": {"name": "context_user_agent_data_brands", "description": "JSON metadata about the browser family/version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_mobile": {"name": "context_user_agent_data_mobile", "description": "Flag indicating whether the device is mobile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_platform": {"name": "context_user_agent_data_platform", "description": "User-Agent platform (e.g., macOS, Linux, Windows)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_name": {"name": "event_name", "description": "Name of the tracked event (e.g., \"button_clicked\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_id": {"name": "event_source_id", "description": "Internal identifier for the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source_name": {"name": "source_name", "description": "Name of the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_slug": {"name": "event_source_slug", "description": "Slugified version of the event source name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_text": {"name": "event_text", "description": "Text or description field associated with the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier for the track event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loaded_at": {"name": "loaded_at", "description": "Timestamp when the row was loaded into the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_timestamp": {"name": "original_timestamp", "description": "Original event timestamp from the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_at_tstamp": {"name": "received_at_tstamp", "description": "Timestamp when Segment received the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_id": {"name": "segment_id", "description": "Unique Segment identifier for the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sent_at": {"name": "sent_at", "description": "Timestamp when the event was sent by the client", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tstamp": {"name": "tstamp", "description": "Timestamp recorded by the warehouse", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "Segment user_id (if logged in)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "uuid_ts": {"name": "uuid_ts", "description": "Technical field combining UUID and timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_event_transformed": {"name": "context_event_transformed", "description": "Transformation applied to the event (if any)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_transforms_beta": {"name": "context_transforms_beta", "description": "Experimental transformations metadata from Segment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_url_host": {"name": "page_url_host", "description": "Host/domain of the page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "registered_domain": {"name": "registered_domain", "description": "Registered domain of the page URL (e.g., mezo.org)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_host": {"name": "referrer_host", "description": "Host/domain of the referrer URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_id": {"name": "utm_id", "description": "UTM campaign ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_actions_amplitude_session_id": {"name": "context_actions_amplitude_session_id", "description": "Amplitude session ID if available", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gclid": {"name": "gclid", "description": "Google Click Identifier used for tracking Google Ads campaigns.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device": {"name": "device", "description": "Device type string reported by Segment (e.g., iPhone, MacBook, Pixel).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_category": {"name": "device_category", "description": "Category of the device (e.g., mobile, desktop, tablet).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_number": {"name": "event_number", "description": "Sequential number assigned to the event within the session.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_id": {"name": "session_id", "description": "Unique identifier for the session in which the event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/segment/sessionization/int_segment_web_events__sessionized.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "incremental", "unique_key": "id", "sort": "tstamp", "partition_by": {"field": "tstamp", "data_type": "timestamp", "granularity": "day"}, "dist": "id", "cluster_by": "id"}, "created_at": 1759221506.7549145, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_segment_web_events__sessionized`", "raw_code": "{{\n    config(\n        materialized=\"incremental\",\n        unique_key=\"id\",\n        sort=\"tstamp\",\n        partition_by={\n            \"field\": \"tstamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": var(\"segment_bigquery_partition_granularity\"),\n        },\n        dist=\"id\",\n        cluster_by=\"id\",\n    )\n}}\n\n{#\nthe initial CTE in this model is unusually complicated; its function is to\nselect all pageviews and events (for all time) for users who have pageviews since the\nmodel was most recently run. there are many window functions in this model so\nin order to appropriately calculate all of them we need each users entire\npage view history, but we only want to grab that for users who have page view\nevents we need to calculate.\n#}\nwith\n    events as (\n\n        select event_data.*\n        from {{ ref(\"stg_segment__events\") }} as event_data\n\n        {% if is_incremental() %}\n            where\n                event_data.anonymous_id in (\n                    select distinct events.anonymous_id\n                    from\n                        {{ ref(\"stg_segment__events\") }} as events\n                        {{\n                            generate_sessionization_incremental_filter(\n                                this, \"tstamp\", \"tstamp\", \">\"\n                            )\n                        }}\n                )\n        {% endif %}\n\n    ),\n\n    numbered as (\n\n        -- This CTE is responsible for assigning an all-time page view number for a\n        -- given anonymous_id. We don't need to do this across devices because the\n        -- whole point of this field is for sessionization, and sessions can't span\n        -- multiple devices.\n        select\n\n            *,\n\n            row_number() over (\n                partition by source_name, anonymous_id order by tstamp\n            ) as event_number\n\n        from events\n\n    ),\n\n    lagged as (\n\n        -- This CTE is responsible for simply grabbing the last value of `tstamp`.\n        -- We'll use this downstream to do timestamp math--it's how we determine the\n        -- period of inactivity.\n        select\n\n            *,\n\n            lag(tstamp) over (\n                partition by source_name, anonymous_id order by event_number\n            ) as previous_tstamp\n\n        from numbered\n\n    ),\n\n    diffed as (\n\n        -- This CTE simply calculates `period_of_inactivity`.\n        select\n            *,\n            {{ dbt.datediff(\"previous_tstamp\", \"tstamp\", \"second\") }}\n            as period_of_inactivity\n        from lagged\n\n    ),\n\n    new_sessions as (\n\n        -- This CTE calculates a single 1/0 field--if the period of inactivity prior\n        -- to this page view was greater than 30 minutes, the value is 1, otherwise\n        -- it's 0. We'll use this to calculate the user's session #.\n        select\n            *,\n            case\n                when period_of_inactivity <= {{ var(\"segment_inactivity_cutoff\") }}\n                then 0\n                else 1\n            end as new_session\n        from diffed\n\n    ),\n\n    session_numbers as (\n\n        -- This CTE calculates a user's session (1, 2, 3) number from `new_session`.\n        -- This single field is the entire point of the entire prior series of\n        -- calculations.\n        select\n\n            *,\n\n            sum(new_session) over (\n                partition by source_name, anonymous_id\n                order by event_number\n                rows between unbounded preceding and current row\n            ) as session_number\n\n        from new_sessions\n\n    ),\n\n    session_ids as (\n\n        -- This CTE assigns a globally unique session id based on the combination of\n        -- `anonymous_id` and `session_number`.\n        select\n\n            {{ dbt_utils.star(ref(\"stg_segment__events\")) }},\n            event_number,\n            {{\n                dbt_utils.generate_surrogate_key(\n                    [\"anonymous_id\", \"session_number\", \"source_name\"]\n                )\n            }} as session_id\n\n        from session_numbers\n\n    )\n\nselect *\nfrom session_ids", "doc_blocks": ["doc.mezo.segment_web_page_views__sessionized"], "language": "sql", "refs": [{"name": "stg_segment__events", "package": null, "version": null}, {"name": "stg_segment__events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.datediff", "macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key", "macro.mezo.generate_sessionization_incremental_filter"], "nodes": ["model.mezo.stg_segment__events"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_events__sessionized.sql", "compiled": true, "compiled_code": "\n\n\nwith\n    events as (\n\n        select event_data.*\n        from `mezo-portal-data`.`dbt_staging`.`stg_segment__events` as event_data\n\n        \n            where\n                event_data.anonymous_id in (\n                    select distinct events.anonymous_id\n                    from\n                        `mezo-portal-data`.`dbt_staging`.`stg_segment__events` as events\n                        \n    where tstamp > (\n        select \n            timestamp_sub(\n                max(tstamp), \n                interval 3 hour\n                )\n        from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_events__sessionized` \n    )\n                )\n        \n\n    ),\n\n    numbered as (\n\n        -- This CTE is responsible for assigning an all-time page view number for a\n        -- given anonymous_id. We don't need to do this across devices because the\n        -- whole point of this field is for sessionization, and sessions can't span\n        -- multiple devices.\n        select\n\n            *,\n\n            row_number() over (\n                partition by source_name, anonymous_id order by tstamp\n            ) as event_number\n\n        from events\n\n    ),\n\n    lagged as (\n\n        -- This CTE is responsible for simply grabbing the last value of `tstamp`.\n        -- We'll use this downstream to do timestamp math--it's how we determine the\n        -- period of inactivity.\n        select\n\n            *,\n\n            lag(tstamp) over (\n                partition by source_name, anonymous_id order by event_number\n            ) as previous_tstamp\n\n        from numbered\n\n    ),\n\n    diffed as (\n\n        -- This CTE simply calculates `period_of_inactivity`.\n        select\n            *,\n            \n\n    datetime_diff(\n        cast(tstamp as datetime),\n        cast(previous_tstamp as datetime),\n        second\n    )\n\n  \n            as period_of_inactivity\n        from lagged\n\n    ),\n\n    new_sessions as (\n\n        -- This CTE calculates a single 1/0 field--if the period of inactivity prior\n        -- to this page view was greater than 30 minutes, the value is 1, otherwise\n        -- it's 0. We'll use this to calculate the user's session #.\n        select\n            *,\n            case\n                when period_of_inactivity <= 30 * 60\n                then 0\n                else 1\n            end as new_session\n        from diffed\n\n    ),\n\n    session_numbers as (\n\n        -- This CTE calculates a user's session (1, 2, 3) number from `new_session`.\n        -- This single field is the entire point of the entire prior series of\n        -- calculations.\n        select\n\n            *,\n\n            sum(new_session) over (\n                partition by source_name, anonymous_id\n                order by event_number\n                rows between unbounded preceding and current row\n            ) as session_number\n\n        from new_sessions\n\n    ),\n\n    session_ids as (\n\n        -- This CTE assigns a globally unique session id based on the combination of\n        -- `anonymous_id` and `session_number`.\n        select\n\n            `_dbt_source_relation`,\n  `utm_source`,\n  `utm_medium`,\n  `utm_campaign`,\n  `utm_term`,\n  `utm_content`,\n  `ip`,\n  `library_name`,\n  `context_library_version`,\n  `context_locale`,\n  `page_url_path`,\n  `referrer`,\n  `page_url_query`,\n  `context_page_title`,\n  `page_url`,\n  `context_protocols_source_id`,\n  `context_protocols_violations`,\n  `context_timezone`,\n  `user_agent`,\n  `context_user_agent_data_brands`,\n  `context_user_agent_data_mobile`,\n  `context_user_agent_data_platform`,\n  `event_name`,\n  `event_source_id`,\n  `source_name`,\n  `event_source_slug`,\n  `event_text`,\n  `id`,\n  `loaded_at`,\n  `original_timestamp`,\n  `received_at_tstamp`,\n  `segment_id`,\n  `sent_at`,\n  `tstamp`,\n  `user_id`,\n  `uuid_ts`,\n  `anonymous_id`,\n  `context_event_transformed`,\n  `context_transforms_beta`,\n  `page_url_host`,\n  `registered_domain`,\n  `referrer_host`,\n  `utm_id`,\n  `page_path`,\n  `page_title`,\n  `context_actions_amplitude_session_id`,\n  `gclid`,\n  `device`,\n  `device_category`,\n            event_number,\n            to_hex(md5(cast(coalesce(cast(anonymous_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(session_number as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_name as string), '_dbt_utils_surrogate_key_null_') as string))) as session_id\n\n        from session_numbers\n\n    )\n\nselect *\nfrom session_ids", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.int_segment_web_sessions__stitched": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_segment_web_sessions__stitched", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/segment/sessionization/int_segment_web_sessions__stitched.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_sessions__stitched.sql", "unique_id": "model.mezo.int_segment_web_sessions__stitched", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "int_segment_web_sessions__stitched"], "alias": "int_segment_web_sessions__stitched", "checksum": {"name": "sha256", "checksum": "f9f8114fdd18e084150b20485464878c93d7844e703c80ea21bccf2ffb892ee4"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "session_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000, "cluster_by": "session_id", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "sort": "session_start_tstamp", "dist": "session_id"}, "tags": [], "description": "", "columns": {"source_name": {"name": "source_name", "description": "Name of the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_id": {"name": "session_id", "description": "Unique identifier for the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_start_tstamp": {"name": "session_start_tstamp", "description": "Start timestamp of the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_end_tstamp": {"name": "session_end_tstamp", "description": "End timestamp of the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "button_clicks": {"name": "button_clicks", "description": "Count of button click events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_views": {"name": "page_views", "description": "Count of page view events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ups": {"name": "sign_ups", "description": "Count of completed sign-up events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "wallet_connections": {"name": "wallet_connections", "description": "Count of wallet connection events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_swaps": {"name": "asset_swaps", "description": "Count of asset swap events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ins": {"name": "sign_ins", "description": "Count of completed sign-in events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "swap_assets_starts": {"name": "swap_assets_starts", "description": "Count of asset swap start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_up_starts": {"name": "sign_up_starts", "description": "Count of sign-up start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funds_additions": {"name": "funds_additions", "description": "Count of funds added events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_additions": {"name": "pool_liquidity_additions", "description": "Count of liquidity pool additions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "add_funds_starts": {"name": "add_funds_starts", "description": "Count of add-funds start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vault_assets_starts": {"name": "vault_assets_starts", "description": "Count of vault asset start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "username_updates": {"name": "username_updates", "description": "Count of username update events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_vaulted": {"name": "assets_vaulted", "description": "Count of vaulted asset events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrow_starts": {"name": "musd_borrow_starts", "description": "Count of mUSD borrow start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_withdrawals": {"name": "pool_liquidity_withdrawals", "description": "Count of liquidity pool withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_donations": {"name": "musd_donations", "description": "Count of mUSD donation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_starts": {"name": "market_spend_starts", "description": "Count of market spend start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrows": {"name": "musd_borrows", "description": "Count of mUSD borrow events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "items_purchased": {"name": "items_purchased", "description": "Count of purchase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "repay_loan_starts": {"name": "repay_loan_starts", "description": "Count of repay loan start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_repaid": {"name": "loans_repaid", "description": "Count of loan repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_increase_reduce_ratio": {"name": "loan_increase_reduce_ratio", "description": "Ratio metric for loan increase/reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "increase_loan_starts": {"name": "increase_loan_starts", "description": "Count of loan increase start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_increased": {"name": "loans_increased", "description": "Count of loan increase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_deposits": {"name": "loan_collateral_deposits", "description": "Count of loan collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_completions": {"name": "market_spend_completions", "description": "Count of completed market spend events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_withdrawals": {"name": "loan_collateral_withdrawals", "description": "Count of loan collateral withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "withdraw_loan_collateral_starts": {"name": "withdraw_loan_collateral_starts", "description": "Count of withdraw loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deposit_loan_collateral_starts": {"name": "deposit_loan_collateral_starts", "description": "Count of deposit loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_balance_confirmations": {"name": "borrow_more_balance_confirmations", "description": "Count of borrow-more balance confirmation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_swaps": {"name": "assets_swaps", "description": "Count of asset swap events (alternate metric)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repay_starts": {"name": "borrow_repay_starts", "description": "Count of borrow repay start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repays": {"name": "borrow_repays", "description": "Count of borrow repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_donation_successes": {"name": "market_donation_successes", "description": "Count of successful market donations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposit_starts": {"name": "borrow_collateral_deposit_starts", "description": "Count of borrow collateral deposit start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_increase_coll": {"name": "borrow_more_increase_coll", "description": "Count of borrow-more increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_increase_coll": {"name": "borrow_more_strategy_increase_coll", "description": "Count of borrow-more strategy increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposits": {"name": "borrow_collateral_deposits", "description": "Count of borrow collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_button_clicks": {"name": "borrow_more_button_clicks", "description": "Count of borrow-more button click events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_confirm_increase_coll": {"name": "borrow_more_confirm_increase_coll", "description": "Count of borrow-more confirm increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "llm_shares": {"name": "llm_shares", "description": "Count of LLM share events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_reduce_ratio": {"name": "borrow_more_strategy_reduce_ratio", "description": "Ratio metric for borrow-more strategy reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_source": {"name": "utm_source", "description": "UTM source parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "UTM content parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "UTM medium parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "UTM campaign parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "UTM term parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gclid": {"name": "gclid", "description": "Google Ads click identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url": {"name": "first_page_url", "description": "Full URL of the first page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_host": {"name": "first_page_url_host", "description": "Host/domain of the first page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_path": {"name": "first_page_url_path", "description": "Path portion of the first page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_query": {"name": "first_page_url_query", "description": "Query string of the first page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "Full referrer URL from which the user navigated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_host": {"name": "referrer_host", "description": "Host/domain of the referrer URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device": {"name": "device", "description": "Device name/type (if available)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_category": {"name": "device_category", "description": "Category of the device (e.g., desktop, mobile, tablet)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url": {"name": "last_page_url", "description": "Full URL of the last page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_host": {"name": "last_page_url_host", "description": "Host/domain of the last page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_path": {"name": "last_page_url_path", "description": "Path portion of the last page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_query": {"name": "last_page_url_query", "description": "Query string of the last page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_in_s": {"name": "duration_in_s", "description": "Total session duration in seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_in_s_tier": {"name": "duration_in_s_tier", "description": "Tiered session duration category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "Medium extracted from referrer (e.g., organic, paid)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "Source extracted from referrer (e.g., google, facebook)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "blended_user_id": {"name": "blended_user_id", "description": "Stitched user identifier across sessions (anonymous + logged in)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/segment/sessionization/int_segment_web_sessions__stitched.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "incremental", "unique_key": "session_id", "sort": "session_start_tstamp", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "dist": "session_id", "cluster_by": "session_id"}, "created_at": 1759221506.7518375, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions__stitched`", "raw_code": "{{\n    config(\n        materialized=\"incremental\",\n        unique_key=\"session_id\",\n        sort=\"session_start_tstamp\",\n        partition_by={\n            \"field\": \"session_start_tstamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": var(\"segment_bigquery_partition_granularity\"),\n        },\n        dist=\"session_id\",\n        cluster_by=\"session_id\",\n    )\n}}\n\nwith\n    sessions as (\n\n        select *\n        from\n            {{ ref(\"int_segment_web_sessions__initial\") }}\n\n            {% if is_incremental() %}\n                {{\n                    generate_sessionization_incremental_filter(\n                        this, \"session_start_tstamp\", \"session_start_tstamp\", \">\"\n                    )\n                }}\n            {% endif %}\n\n    ),\n\n    id_stitching as (select * from {{ ref(\"int_segment_web_user_stitching\") }}),\n\n    joined as (\n\n        select\n\n            sessions.*,\n\n            coalesce(id_stitching.user_id, sessions.anonymous_id) as blended_user_id\n\n        from sessions\n        left join id_stitching on sessions.anonymous_id = id_stitching.anonymous_id\n\n    )\n\nselect *\nfrom joined", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment_web_sessions__initial", "package": null, "version": null}, {"name": "int_segment_web_user_stitching", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.mezo.generate_sessionization_incremental_filter"], "nodes": ["model.mezo.int_segment_web_sessions__initial", "model.mezo.int_segment_web_user_stitching"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_sessions__stitched.sql", "compiled": true, "compiled_code": "\n\nwith\n    sessions as (\n\n        select *\n        from\n            `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions__initial`\n\n            \n                \n    where session_start_tstamp > (\n        select \n            timestamp_sub(\n                max(session_start_tstamp), \n                interval 3 hour\n                )\n        from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions__stitched` \n    )\n            \n\n    ),\n\n    id_stitching as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_user_stitching`),\n\n    joined as (\n\n        select\n\n            sessions.*,\n\n            coalesce(id_stitching.user_id, sessions.anonymous_id) as blended_user_id\n\n        from sessions\n        left join id_stitching on sessions.anonymous_id = id_stitching.anonymous_id\n\n    )\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_segment__sessions_first_touch_point": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_segment__sessions_first_touch_point", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/segment/sessionization/int_segment__sessions_first_touch_point.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment__sessions_first_touch_point.sql", "unique_id": "model.mezo.int_segment__sessions_first_touch_point", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "int_segment__sessions_first_touch_point"], "alias": "int_segment__sessions_first_touch_point", "checksum": {"name": "sha256", "checksum": "3f89965bc759bc99c49b61b0fefa6791a5271484842184b84074ceca353322a7"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "canonical_segment_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_segment_id": {"name": "canonical_segment_id", "description": "The fully-merged Segment ID (the profile Segment now understands any events or identifiers to map to).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_touch_time": {"name": "first_touch_time", "description": "The timestamp of the user\u2019s very first recorded session or interaction.", "meta": {}, "data_type": "timestamp", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_touch_source": {"name": "first_touch_source", "description": "The marketing source (e.g., google, newsletter) from which the user first arrived.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_touch_medium": {"name": "first_touch_medium", "description": "The marketing medium (e.g., cpc, email, referral) of the user\u2019s first interaction.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/segment/sessionization/int_segment__sessions_first_touch_point.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "incremental", "unique_key": "canonical_segment_id"}, "created_at": 1759221506.7481544, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions_first_touch_point`", "raw_code": "{{ config(materialized=\"incremental\", unique_key=\"canonical_segment_id\") }}\n\nwith\n    first_touch_anonymous as (\n        select\n            anonymous_id,\n            canonical_segment_id_with_fallback,\n            min(session_start_tstamp) as first_touch_time\n        from {{ ref(\"int_segment__sessions\") }}\n        group by 1, 2\n    ),\n\n    first_touch_canonical as (\n        select\n            fa.anonymous_id,\n            fa.canonical_segment_id_with_fallback as canonical_segment_id,\n            fa.first_touch_time,\n            s.referrer_source as first_touch_source,\n            s.referrer_medium as first_touch_medium\n        from first_touch_anonymous as fa\n        left join\n            {{ ref(\"int_segment__sessions\") }} as s\n            on fa.anonymous_id = s.anonymous_id\n            and fa.first_touch_time = s.session_start_tstamp\n        qualify\n            row_number() over (\n                partition by fa.canonical_segment_id_with_fallback\n                order by fa.first_touch_time asc\n            )\n            = 1\n    )\n\nselect *\nfrom first_touch_canonical", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment__sessions", "package": null, "version": null}, {"name": "int_segment__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_segment__sessions"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment__sessions_first_touch_point.sql", "compiled": true, "compiled_code": "\n\nwith\n    first_touch_anonymous as (\n        select\n            anonymous_id,\n            canonical_segment_id_with_fallback,\n            min(session_start_tstamp) as first_touch_time\n        from `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions`\n        group by 1, 2\n    ),\n\n    first_touch_canonical as (\n        select\n            fa.anonymous_id,\n            fa.canonical_segment_id_with_fallback as canonical_segment_id,\n            fa.first_touch_time,\n            s.referrer_source as first_touch_source,\n            s.referrer_medium as first_touch_medium\n        from first_touch_anonymous as fa\n        left join\n            `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions` as s\n            on fa.anonymous_id = s.anonymous_id\n            and fa.first_touch_time = s.session_start_tstamp\n        qualify\n            row_number() over (\n                partition by fa.canonical_segment_id_with_fallback\n                order by fa.first_touch_time asc\n            )\n            = 1\n    )\n\nselect *\nfrom first_touch_canonical", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_segment_web_sessions__initial": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_segment_web_sessions__initial", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/segment/sessionization/int_segment_web_sessions__initial.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_sessions__initial.sql", "unique_id": "model.mezo.int_segment_web_sessions__initial", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "int_segment_web_sessions__initial"], "alias": "int_segment_web_sessions__initial", "checksum": {"name": "sha256", "checksum": "6370059fd71db6f78bf2b81339c427c263674d20c013e1389a862ed328677548"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "session_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000, "cluster_by": "session_id", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "sort": "session_start_tstamp", "dist": "session_id"}, "tags": [], "description": "This model performs the aggregation of page views into sessions. The `session_id` having already been calculated in `segment_web_page_views__sessionized`, this model simply calls a bunch of window functions to grab the first or last value of a given field and store it at the session level.", "columns": {"source_name": {"name": "source_name", "description": "Name of the event source", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_id": {"name": "session_id", "description": "Unique identifier for the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "anonymous_id": {"name": "anonymous_id", "description": "Segment anonymous_id (cookie/device ID)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_start_tstamp": {"name": "session_start_tstamp", "description": "Start timestamp of the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_end_tstamp": {"name": "session_end_tstamp", "description": "End timestamp of the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "button_clicks": {"name": "button_clicks", "description": "Count of button click events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_views": {"name": "page_views", "description": "Count of page view events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ups": {"name": "sign_ups", "description": "Count of sign-up completions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "wallet_connections": {"name": "wallet_connections", "description": "Count of wallet connection events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_swaps": {"name": "asset_swaps", "description": "Count of asset swap events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ins": {"name": "sign_ins", "description": "Count of sign-in completions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "swap_assets_starts": {"name": "swap_assets_starts", "description": "Count of asset swap start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_up_starts": {"name": "sign_up_starts", "description": "Count of sign-up start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funds_additions": {"name": "funds_additions", "description": "Count of funds added events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_additions": {"name": "pool_liquidity_additions", "description": "Count of liquidity pool additions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "add_funds_starts": {"name": "add_funds_starts", "description": "Count of add-funds start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vault_assets_starts": {"name": "vault_assets_starts", "description": "Count of vault assets start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "username_updates": {"name": "username_updates", "description": "Count of username update events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_vaulted": {"name": "assets_vaulted", "description": "Count of assets vaulted events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrow_starts": {"name": "musd_borrow_starts", "description": "Count of mUSD borrow start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_withdrawals": {"name": "pool_liquidity_withdrawals", "description": "Count of liquidity pool withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_donations": {"name": "musd_donations", "description": "Count of mUSD donation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_starts": {"name": "market_spend_starts", "description": "Count of market spend start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrows": {"name": "musd_borrows", "description": "Count of mUSD borrow events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "items_purchased": {"name": "items_purchased", "description": "Count of purchase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "repay_loan_starts": {"name": "repay_loan_starts", "description": "Count of repay loan start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_repaid": {"name": "loans_repaid", "description": "Count of loan repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_increase_reduce_ratio": {"name": "loan_increase_reduce_ratio", "description": "Ratio metric for loan increase/reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "increase_loan_starts": {"name": "increase_loan_starts", "description": "Count of loan increase start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_increased": {"name": "loans_increased", "description": "Count of loan increase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_deposits": {"name": "loan_collateral_deposits", "description": "Count of loan collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_completions": {"name": "market_spend_completions", "description": "Count of market spend completions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_withdrawals": {"name": "loan_collateral_withdrawals", "description": "Count of loan collateral withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "withdraw_loan_collateral_starts": {"name": "withdraw_loan_collateral_starts", "description": "Count of withdraw loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deposit_loan_collateral_starts": {"name": "deposit_loan_collateral_starts", "description": "Count of deposit loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_balance_confirmations": {"name": "borrow_more_balance_confirmations", "description": "Count of borrow more balance confirmations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_swaps": {"name": "assets_swaps", "description": "Count of asset swap events (alternative metric)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repay_starts": {"name": "borrow_repay_starts", "description": "Count of borrow repay start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repays": {"name": "borrow_repays", "description": "Count of borrow repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_donation_successes": {"name": "market_donation_successes", "description": "Count of successful market donations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposit_starts": {"name": "borrow_collateral_deposit_starts", "description": "Count of borrow collateral deposit start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_increase_coll": {"name": "borrow_more_increase_coll", "description": "Count of borrow-more increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_increase_coll": {"name": "borrow_more_strategy_increase_coll", "description": "Count of borrow-more strategy increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposits": {"name": "borrow_collateral_deposits", "description": "Count of borrow collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_button_clicks": {"name": "borrow_more_button_clicks", "description": "Count of borrow-more button click events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_confirm_increase_coll": {"name": "borrow_more_confirm_increase_coll", "description": "Count of borrow-more confirm increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "llm_shares": {"name": "llm_shares", "description": "Count of LLM share events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_reduce_ratio": {"name": "borrow_more_strategy_reduce_ratio", "description": "Ratio metric for borrow-more strategy reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_source": {"name": "utm_source", "description": "UTM source parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "UTM content parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "UTM medium parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "UTM campaign parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "UTM term parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gclid": {"name": "gclid", "description": "Google Ads click identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url": {"name": "first_page_url", "description": "Full URL of the first page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_host": {"name": "first_page_url_host", "description": "Host/domain of the first page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_path": {"name": "first_page_url_path", "description": "Path portion of the first page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_page_url_query": {"name": "first_page_url_query", "description": "Query string of the first page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "Full referrer URL from which the user navigated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_host": {"name": "referrer_host", "description": "Host/domain of the referrer URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device": {"name": "device", "description": "Device name/type (if available)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "device_category": {"name": "device_category", "description": "Category of the device (e.g., desktop, mobile, tablet)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url": {"name": "last_page_url", "description": "Full URL of the last page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_host": {"name": "last_page_url_host", "description": "Host/domain of the last page in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_path": {"name": "last_page_url_path", "description": "Path portion of the last page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_page_url_query": {"name": "last_page_url_query", "description": "Query string of the last page URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_in_s": {"name": "duration_in_s", "description": "Total session duration in seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "duration_in_s_tier": {"name": "duration_in_s_tier", "description": "Tiered session duration category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "Medium extracted from referrer (e.g., organic, paid)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "Source extracted from referrer (e.g., google, facebook)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/segment/sessionization/int_segment_web_sessions__initial.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "incremental", "unique_key": "session_id", "sort": "session_start_tstamp", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "dist": "session_id", "cluster_by": "session_id"}, "created_at": 1759221506.7363539, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions__initial`", "raw_code": "{{\n    config(\n        materialized=\"incremental\",\n        unique_key=\"session_id\",\n        sort=\"session_start_tstamp\",\n        partition_by={\n            \"field\": \"session_start_tstamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": var(\"segment_bigquery_partition_granularity\"),\n        },\n        dist=\"session_id\",\n        cluster_by=\"session_id\",\n    )\n}}\n\n{% set partition_by = \"partition by source_name, session_id\" %}\n\n{% set window_clause = (\n    \"partition by source_name, session_id\"\n    ~ \" order by event_number\"\n    ~ \" rows between unbounded preceding and unbounded following\"\n) %}\n\n{% set first_values = {\n    \"utm_source\": \"utm_source\",\n    \"utm_content\": \"utm_content\",\n    \"utm_medium\": \"utm_medium\",\n    \"utm_campaign\": \"utm_campaign\",\n    \"utm_term\": \"utm_term\",\n    \"gclid\": \"gclid\",\n    \"page_url\": \"first_page_url\",\n    \"page_url_host\": \"first_page_url_host\",\n    \"page_url_path\": \"first_page_url_path\",\n    \"page_url_query\": \"first_page_url_query\",\n    \"referrer\": \"referrer\",\n    \"referrer_host\": \"referrer_host\",\n    \"device\": \"device\",\n    \"device_category\": \"device_category\",\n} %}\n\n{% set last_values = {\n    \"page_url\": \"last_page_url\",\n    \"page_url_host\": \"last_page_url_host\",\n    \"page_url_path\": \"last_page_url_path\",\n    \"page_url_query\": \"last_page_url_query\",\n} %}\n\n{% for col in var(\"segment_pass_through_columns\") %}\n    {% do first_values.update({col: \"first_\" ~ col}) %}\n    {% do last_values.update({col: \"last_\" ~ col}) %}\n{% endfor %}\n\nwith\n    pageviews_sessionized as (\n\n        select *\n        from\n            {{ ref(\"int_segment_web_events__sessionized\") }}\n\n            {% if is_incremental() %}\n                {{\n                    generate_sessionization_incremental_filter(\n                        this, \"tstamp\", \"session_start_tstamp\", \">\"\n                    )\n                }}\n            {% endif %}\n\n    ),\n\n    referrer_mapping as (\n        select\n            source as map_source,\n            medium as map_medium,\n            lower(replace(host, 'www.', '')) as host_key\n        from {{ ref(\"referrer_mapping\") }}\n\n    ),\n\n    agg as (\n\n        select distinct\n            source_name,\n            session_id,\n            anonymous_id,\n            min(tstamp) over ({{ partition_by }}) as session_start_tstamp,\n            max(tstamp) over ({{ partition_by }}) as session_end_tstamp,\n            {% for metric in var(\"session_metrics\") %}\n                countif(event_name = '{{ metric.event_name }}') over (\n                    {{ partition_by }}\n                ) as {{ metric.metric_name }},\n            {% endfor %}\n            {% for (key, value) in first_values.items() %}\n                first_value({{ key }}) over ({{ window_clause }}) as {{ value }},\n            {% endfor %}\n\n            {% for (key, value) in last_values.items() %}\n                last_value({{ key }}) over ({{ window_clause }}) as {{ value }}\n                {% if not loop.last %},{% endif %}\n            {% endfor %}\n        from pageviews_sessionized\n\n    ),\n\n    diffs as (\n\n        select\n            *,\n            {{ dbt.datediff(\"session_start_tstamp\", \"session_end_tstamp\", \"second\") }}\n            as duration_in_s\n\n        from agg\n\n    ),\n\n    tiers as (\n\n        select\n\n            *,\n\n            case\n                when duration_in_s between 0 and 9\n                then '0s to 9s'\n                when duration_in_s between 10 and 29\n                then '10s to 29s'\n                when duration_in_s between 30 and 59\n                then '30s to 59s'\n                when duration_in_s > 59\n                then '60s or more'\n            end as duration_in_s_tier\n\n        from diffs\n\n    ),\n\n    channel_group as (\n        select\n            t.*,\n            case\n                when\n                    t.utm_source is null and t.utm_medium is null and t.referrer is null\n                then 'direct'\n                when t.utm_medium is not null\n                then lower(t.utm_medium)\n                when rm.map_medium is not null and t.utm_medium is null\n                then lower(rm.map_medium)\n                when rm.map_medium is null and t.referrer like '%mezo.org%'\n                then 'session_continue'\n                else 'referral'\n            end as referrer_medium,\n            case\n                when\n                    t.utm_source is null and t.utm_medium is null and t.referrer is null\n                then 'direct'\n                when t.utm_source is not null\n                then lower(t.utm_source)\n                when rm.map_source is not null and t.utm_source is null\n                then lower(rm.map_source)\n                when t.referrer is not null\n                then net.reg_domain(t.referrer)\n            end as referrer_source\n\n        from tiers as t\n        left join referrer_mapping as rm on net.reg_domain(t.referrer) = rm.host_key\n    )\n\nselect *\nfrom channel_group", "doc_blocks": ["doc.mezo.segment_web_sessions__initial"], "language": "sql", "refs": [{"name": "int_segment_web_events__sessionized", "package": null, "version": null}, {"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.datediff", "macro.mezo.generate_sessionization_incremental_filter"], "nodes": ["model.mezo.int_segment_web_events__sessionized", "seed.mezo.referrer_mapping"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_sessions__initial.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\nwith\n    pageviews_sessionized as (\n\n        select *\n        from\n            `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_events__sessionized`\n\n            \n                \n    where tstamp > (\n        select \n            timestamp_sub(\n                max(session_start_tstamp), \n                interval 3 hour\n                )\n        from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions__initial` \n    )\n            \n\n    ),\n\n    referrer_mapping as (\n        select\n            source as map_source,\n            medium as map_medium,\n            lower(replace(host, 'www.', '')) as host_key\n        from `mezo-portal-data`.`dbt`.`referrer_mapping`\n\n    ),\n\n    agg as (\n\n        select distinct\n            source_name,\n            session_id,\n            anonymous_id,\n            min(tstamp) over (partition by source_name, session_id) as session_start_tstamp,\n            max(tstamp) over (partition by source_name, session_id) as session_end_tstamp,\n            \n                countif(event_name = 'button_clicked') over (\n                    partition by source_name, session_id\n                ) as button_clicks,\n            \n                countif(event_name = 'page_view') over (\n                    partition by source_name, session_id\n                ) as page_views,\n            \n                countif(event_name = 'signed_up') over (\n                    partition by source_name, session_id\n                ) as sign_ups,\n            \n                countif(event_name = 'wallet_connected') over (\n                    partition by source_name, session_id\n                ) as wallet_connections,\n            \n                countif(event_name = 'asset_swapped') over (\n                    partition by source_name, session_id\n                ) as asset_swaps,\n            \n                countif(event_name = 'signed_in') over (\n                    partition by source_name, session_id\n                ) as sign_ins,\n            \n                countif(event_name = 'swap_assets_started') over (\n                    partition by source_name, session_id\n                ) as swap_assets_starts,\n            \n                countif(event_name = 'sign_up_started') over (\n                    partition by source_name, session_id\n                ) as sign_up_starts,\n            \n                countif(event_name = 'funds_added') over (\n                    partition by source_name, session_id\n                ) as funds_additions,\n            \n                countif(event_name = 'pool_liquidity_added') over (\n                    partition by source_name, session_id\n                ) as pool_liquidity_additions,\n            \n                countif(event_name = 'add_funds_started') over (\n                    partition by source_name, session_id\n                ) as add_funds_starts,\n            \n                countif(event_name = 'vault_assets_started') over (\n                    partition by source_name, session_id\n                ) as vault_assets_starts,\n            \n                countif(event_name = 'username_updated') over (\n                    partition by source_name, session_id\n                ) as username_updates,\n            \n                countif(event_name = 'assets_vaulted') over (\n                    partition by source_name, session_id\n                ) as assets_vaulted,\n            \n                countif(event_name = 'musd_borrow_started') over (\n                    partition by source_name, session_id\n                ) as musd_borrow_starts,\n            \n                countif(event_name = 'pool_liquidity_withdrawn') over (\n                    partition by source_name, session_id\n                ) as pool_liquidity_withdrawals,\n            \n                countif(event_name = 'musd_donated') over (\n                    partition by source_name, session_id\n                ) as musd_donations,\n            \n                countif(event_name = 'market_spend_started') over (\n                    partition by source_name, session_id\n                ) as market_spend_starts,\n            \n                countif(event_name = 'musd_borrowed') over (\n                    partition by source_name, session_id\n                ) as musd_borrows,\n            \n                countif(event_name = 'item_purchased') over (\n                    partition by source_name, session_id\n                ) as items_purchased,\n            \n                countif(event_name = 'repay_loan_started') over (\n                    partition by source_name, session_id\n                ) as repay_loan_starts,\n            \n                countif(event_name = 'loan_repaid') over (\n                    partition by source_name, session_id\n                ) as loans_repaid,\n            \n                countif(event_name = 'loan_increased_reduced_ratio') over (\n                    partition by source_name, session_id\n                ) as loan_increase_reduce_ratio,\n            \n                countif(event_name = 'increase_loan_started') over (\n                    partition by source_name, session_id\n                ) as increase_loan_starts,\n            \n                countif(event_name = 'loan_increased') over (\n                    partition by source_name, session_id\n                ) as loans_increased,\n            \n                countif(event_name = 'loan_collateral_deposited') over (\n                    partition by source_name, session_id\n                ) as loan_collateral_deposits,\n            \n                countif(event_name = 'market_spend_completed') over (\n                    partition by source_name, session_id\n                ) as market_spend_completions,\n            \n                countif(event_name = 'loan_collateral_withdrawn') over (\n                    partition by source_name, session_id\n                ) as loan_collateral_withdrawals,\n            \n                countif(event_name = 'withdraw_loan_collateral_started') over (\n                    partition by source_name, session_id\n                ) as withdraw_loan_collateral_starts,\n            \n                countif(event_name = 'deposit_loan_collateral_started') over (\n                    partition by source_name, session_id\n                ) as deposit_loan_collateral_starts,\n            \n                countif(event_name = 'borrow_more_balance_confirmed') over (\n                    partition by source_name, session_id\n                ) as borrow_more_balance_confirmations,\n            \n                countif(event_name = 'assets_swapped') over (\n                    partition by source_name, session_id\n                ) as assets_swaps,\n            \n                countif(event_name = 'borrow_repay_started') over (\n                    partition by source_name, session_id\n                ) as borrow_repay_starts,\n            \n                countif(event_name = 'borrow_repay') over (\n                    partition by source_name, session_id\n                ) as borrow_repays,\n            \n                countif(event_name = 'market_donation_success') over (\n                    partition by source_name, session_id\n                ) as market_donation_successes,\n            \n                countif(event_name = 'borrow_collateral_deposit_started') over (\n                    partition by source_name, session_id\n                ) as borrow_collateral_deposit_starts,\n            \n                countif(event_name = 'borrow_more_increase_coll') over (\n                    partition by source_name, session_id\n                ) as borrow_more_increase_coll,\n            \n                countif(event_name = 'borrow_more_strategy_increase_coll') over (\n                    partition by source_name, session_id\n                ) as borrow_more_strategy_increase_coll,\n            \n                countif(event_name = 'borrow_collateral_deposit') over (\n                    partition by source_name, session_id\n                ) as borrow_collateral_deposits,\n            \n                countif(event_name = 'borrow_more_button_clicked') over (\n                    partition by source_name, session_id\n                ) as borrow_more_button_clicks,\n            \n                countif(event_name = 'borrow_more_confirm_increase_coll') over (\n                    partition by source_name, session_id\n                ) as borrow_more_confirm_increase_coll,\n            \n                countif(event_name = 'llm_share') over (\n                    partition by source_name, session_id\n                ) as llm_shares,\n            \n                countif(event_name = 'borrow_more_strategy_reduce_ratio') over (\n                    partition by source_name, session_id\n                ) as borrow_more_strategy_reduce_ratio,\n            \n            \n                first_value(utm_source) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as utm_source,\n            \n                first_value(utm_content) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as utm_content,\n            \n                first_value(utm_medium) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as utm_medium,\n            \n                first_value(utm_campaign) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as utm_campaign,\n            \n                first_value(utm_term) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as utm_term,\n            \n                first_value(gclid) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as gclid,\n            \n                first_value(page_url) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as first_page_url,\n            \n                first_value(page_url_host) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as first_page_url_host,\n            \n                first_value(page_url_path) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as first_page_url_path,\n            \n                first_value(page_url_query) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as first_page_url_query,\n            \n                first_value(referrer) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as referrer,\n            \n                first_value(referrer_host) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as referrer_host,\n            \n                first_value(device) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as device,\n            \n                first_value(device_category) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as device_category,\n            \n\n            \n                last_value(page_url) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as last_page_url\n                ,\n            \n                last_value(page_url_host) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as last_page_url_host\n                ,\n            \n                last_value(page_url_path) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as last_page_url_path\n                ,\n            \n                last_value(page_url_query) over (partition by source_name, session_id order by event_number rows between unbounded preceding and unbounded following) as last_page_url_query\n                \n            \n        from pageviews_sessionized\n\n    ),\n\n    diffs as (\n\n        select\n            *,\n            \n\n    datetime_diff(\n        cast(session_end_tstamp as datetime),\n        cast(session_start_tstamp as datetime),\n        second\n    )\n\n  \n            as duration_in_s\n\n        from agg\n\n    ),\n\n    tiers as (\n\n        select\n\n            *,\n\n            case\n                when duration_in_s between 0 and 9\n                then '0s to 9s'\n                when duration_in_s between 10 and 29\n                then '10s to 29s'\n                when duration_in_s between 30 and 59\n                then '30s to 59s'\n                when duration_in_s > 59\n                then '60s or more'\n            end as duration_in_s_tier\n\n        from diffs\n\n    ),\n\n    channel_group as (\n        select\n            t.*,\n            case\n                when\n                    t.utm_source is null and t.utm_medium is null and t.referrer is null\n                then 'direct'\n                when t.utm_medium is not null\n                then lower(t.utm_medium)\n                when rm.map_medium is not null and t.utm_medium is null\n                then lower(rm.map_medium)\n                when rm.map_medium is null and t.referrer like '%mezo.org%'\n                then 'session_continue'\n                else 'referral'\n            end as referrer_medium,\n            case\n                when\n                    t.utm_source is null and t.utm_medium is null and t.referrer is null\n                then 'direct'\n                when t.utm_source is not null\n                then lower(t.utm_source)\n                when rm.map_source is not null and t.utm_source is null\n                then lower(rm.map_source)\n                when t.referrer is not null\n                then net.reg_domain(t.referrer)\n            end as referrer_source\n\n        from tiers as t\n        left join referrer_mapping as rm on net.reg_domain(t.referrer) = rm.host_key\n    )\n\nselect *\nfrom channel_group", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["session_id"], "time_spine": null}, "model.mezo.int_paid__union_paid": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_paid__union_paid", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/paid/int_paid__union_paid.sql", "original_file_path": "models/50_intermediate/paid/int_paid__union_paid.sql", "unique_id": "model.mezo.int_paid__union_paid", "fqn": ["mezo", "50_intermediate", "paid", "int_paid__union_paid"], "alias": "int_paid__union_paid", "checksum": {"name": "sha256", "checksum": "91992921d9495308ba72182a6e95415386b0cde1df3c5dc79ca46594d3217c2b"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "The source of the referral", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "The medium of the referral", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/paid/int_paid__union_paid.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.7587974, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_paid__union_paid`", "raw_code": "{{\n    dbt_utils.union_relations(\n        relations=[\n            ref(\"stg_paid__raw_other_marketing_costs\"),\n            ref(\"int_paid__twitter\"),\n        ],\n        include=[\n            \"date_day\",\n            \"clicks\",\n            \"impressions\",\n            \"spend\",\n            \"campaign_id\",\n            \"referrer_source\",\n            \"referrer_medium\",\n        ],\n        source_column_name=\"source_relation\",\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_paid__raw_other_marketing_costs", "package": null, "version": null}, {"name": "int_paid__twitter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.mezo.stg_paid__raw_other_marketing_costs", "model.mezo.int_paid__twitter"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/paid/int_paid__union_paid.sql", "compiled": true, "compiled_code": "\n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_staging`.`stg_paid__raw_other_marketing_costs`''' as string) as source_relation,\n\n                \n                    cast(`date_day` as DATE) as `date_day` ,\n                    cast(`referrer_source` as STRING) as `referrer_source` ,\n                    cast(`referrer_medium` as STRING) as `referrer_medium` ,\n                    cast(`spend` as FLOAT64) as `spend` ,\n                    cast(`impressions` as INT64) as `impressions` ,\n                    cast(`clicks` as INT64) as `clicks` ,\n                    cast(null as STRING) as `campaign_id` \n\n            from `mezo-portal-data`.`dbt_staging`.`stg_paid__raw_other_marketing_costs`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_intermediate`.`int_paid__twitter`''' as string) as source_relation,\n\n                \n                    cast(`date_day` as DATE) as `date_day` ,\n                    cast(`referrer_source` as STRING) as `referrer_source` ,\n                    cast(`referrer_medium` as STRING) as `referrer_medium` ,\n                    cast(`spend` as FLOAT64) as `spend` ,\n                    cast(`impressions` as INT64) as `impressions` ,\n                    cast(`clicks` as INT64) as `clicks` ,\n                    cast(`campaign_id` as STRING) as `campaign_id` \n\n            from `mezo-portal-data`.`dbt_intermediate`.`int_paid__twitter`\n\n            \n        )\n\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_paid__all_paid": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_paid__all_paid", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/paid/int_paid__all_paid.sql", "original_file_path": "models/50_intermediate/paid/int_paid__all_paid.sql", "unique_id": "model.mezo.int_paid__all_paid", "fqn": ["mezo", "50_intermediate", "paid", "int_paid__all_paid"], "alias": "int_paid__all_paid", "checksum": {"name": "sha256", "checksum": "370300d7294e4ba316d7d12292bd3484c377c93a3b43acf4cbd125d6ba98022a"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the campaign.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_servable": {"name": "is_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_standard_delivery": {"name": "is_standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_timestamp": {"name": "start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_timestamp": {"name": "end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daily_budget_amount": {"name": "daily_budget_amount", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The amount of spend, in micros, on that date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "The source of the referral", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "The medium of the referral", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "paid_id": {"name": "paid_id", "description": "Surrogate key for the campaign, generated from referrer source + medium + campaign id.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/paid/int_paid__all_paid.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.7678416, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_paid__all_paid`", "raw_code": "with\n    union_paid as (select * from {{ ref(\"int_paid__union_paid\") }}),\n\n    sur_key as (\n        select\n            *,\n            {{\n                dbt_utils.generate_surrogate_key(\n                    [\"campaign_id\", \"referrer_medium\", \"referrer_source\"]\n                )\n            }} as paid_id\n        from union_paid\n    )\n\nselect *\nfrom sur_key", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_paid__union_paid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.mezo.int_paid__union_paid"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/paid/int_paid__all_paid.sql", "compiled": true, "compiled_code": "with\n    union_paid as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_paid__union_paid`),\n\n    sur_key as (\n        select\n            *,\n            to_hex(md5(cast(coalesce(cast(campaign_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(referrer_medium as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(referrer_source as string), '_dbt_utils_surrogate_key_null_') as string))) as paid_id\n        from union_paid\n    )\n\nselect *\nfrom sur_key", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.int_paid__twitter": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "int_paid__twitter", "resource_type": "model", "package_name": "mezo", "path": "50_intermediate/paid/twitter/int_paid__twitter.sql", "original_file_path": "models/50_intermediate/paid/twitter/int_paid__twitter.sql", "unique_id": "model.mezo.int_paid__twitter", "fqn": ["mezo", "50_intermediate", "paid", "twitter", "int_paid__twitter"], "alias": "int_paid__twitter", "checksum": {"name": "sha256", "checksum": "9acc4bd59125ae2094f3bea0931a782bf1fa3a598b4c7ba6b624a894073e22fb"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the campaign.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_servable": {"name": "is_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_standard_delivery": {"name": "is_standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_timestamp": {"name": "start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_timestamp": {"name": "end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daily_budget_amount": {"name": "daily_budget_amount", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The amount of spend, in micros, on that date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "The source of the referral", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "The medium of the referral", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/50_intermediate/paid/twitter/int_paid__twitter.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "intermediate", "materialized": "view"}, "created_at": 1759221506.7702854, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`int_paid__twitter`", "raw_code": "with\n    twitter as (select * from {{ ref(\"twitter_ads\", \"twitter_ads__campaign_report\") }}),\n\n    add_unique_id as (\n        select\n            * except (campaign_id),\n            'twitter' as referrer_source,\n            'paid_social' as referrer_medium,\n            concat('twitter_', campaign_id) as campaign_id\n        from twitter\n    )\n\nselect *\nfrom add_unique_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_report", "package": "twitter_ads", "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.twitter_ads.twitter_ads__campaign_report"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/paid/twitter/int_paid__twitter.sql", "compiled": true, "compiled_code": "with\n    twitter as (select * from `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__campaign_report`),\n\n    add_unique_id as (\n        select\n            * except (campaign_id),\n            'twitter' as referrer_source,\n            'paid_social' as referrer_medium,\n            concat('twitter_', campaign_id) as campaign_id\n        from twitter\n    )\n\nselect *\nfrom add_unique_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.dim1_attribution": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "dim1_attribution", "resource_type": "model", "package_name": "mezo", "path": "80_marts/dim1_attribution.sql", "original_file_path": "models/80_marts/dim1_attribution.sql", "unique_id": "model.mezo.dim1_attribution", "fqn": ["mezo", "80_marts", "dim1_attribution"], "alias": "dim1_attribution", "checksum": {"name": "sha256", "checksum": "191fa0237bf33b4676f669e6059b550b902a58660e15b1347d29156a17c6a67a"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Dimension table for channel grouping based on referrer source and medium.", "columns": {"id": {"name": "id", "description": "Surrogate key for the channel grouping, generated from referrer source + medium.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "Original referrer source (e.g., google, facebook, newsletter).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "Original referrer medium (e.g., cpc, email, referral, social).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/dim1_attribution.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.793077, "relation_name": "`mezo-portal-data`.`dbt_marts`.`dim1_attribution`", "raw_code": "with\n    base as (select * from {{ ref(\"int_segment__sessions\") }}),\n\n    with_keys as (\n\n        select referrer_id as id, referrer_source, referrer_medium\n        from base\n        qualify\n            row_number() over (\n                partition by referrer_source, referrer_medium order by referrer_id\n            )\n            = 1\n\n    )\n\nselect *\nfrom with_keys", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_segment__sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_attribution.sql", "compiled": true, "compiled_code": "with\n    base as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions`),\n\n    with_keys as (\n\n        select referrer_id as id, referrer_source, referrer_medium\n        from base\n        qualify\n            row_number() over (\n                partition by referrer_source, referrer_medium order by referrer_id\n            )\n            = 1\n\n    )\n\nselect *\nfrom with_keys", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.dim1_campaign": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "dim1_campaign", "resource_type": "model", "package_name": "mezo", "path": "80_marts/dim1_campaign.sql", "original_file_path": "models/80_marts/dim1_campaign.sql", "unique_id": "model.mezo.dim1_campaign", "fqn": ["mezo", "80_marts", "dim1_campaign"], "alias": "dim1_campaign", "checksum": {"name": "sha256", "checksum": "80cc24b8ffe6c4d01c5e11d6c061423a09d77fbce43eec7059ce04468ebcee51"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Dimension table for paid campaigns.", "columns": {"id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/dim1_campaign.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.7994978, "relation_name": "`mezo-portal-data`.`dbt_marts`.`dim1_campaign`", "raw_code": "with\n    all_paid as (select * from {{ ref(\"int_paid__twitter\") }}),\n\n    fact as (\n        select campaign_id as id, campaign_name\n        from all_paid\n        qualify row_number() over (partition by campaign_id order by date_day desc) = 1\n    )\n\nselect *\nfrom fact", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_paid__twitter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_paid__twitter"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_campaign.sql", "compiled": true, "compiled_code": "with\n    all_paid as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_paid__twitter`),\n\n    fact as (\n        select campaign_id as id, campaign_name\n        from all_paid\n        qualify row_number() over (partition by campaign_id order by date_day desc) = 1\n    )\n\nselect *\nfrom fact", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.fct_loans": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "fct_loans", "resource_type": "model", "package_name": "mezo", "path": "80_marts/fct_loans.sql", "original_file_path": "models/80_marts/fct_loans.sql", "unique_id": "model.mezo.fct_loans", "fqn": ["mezo", "80_marts", "fct_loans"], "alias": "fct_loans", "checksum": {"name": "sha256", "checksum": "42f23448c07ed10a285952a69e07d8d43087eb23463444414839dca966d5b8e8"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Fact table for loans.", "columns": {"id": {"name": "id", "description": "Transaction hash as unique identifier for the loan record.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_users": {"name": "fk__dim1_users", "description": "Foreign key to Users dimension (Canonical Segment ID). Links this loan record to the unified user profile.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral_usd_value": {"name": "collateral_usd_value", "description": "USD value of the collateral backing the loan.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "principal": {"name": "principal", "description": "Debt principal after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "interest": {"name": "interest", "description": "Accrued interest after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral": {"name": "collateral", "description": "Collateral locked after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stake": {"name": "stake", "description": "Borrower stake after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_count": {"name": "loan_count", "description": "Total number of loans represented in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_date": {"name": "record_date", "description": "Date of the record, used for time-based analysis.", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "new_loan_count": {"name": "new_loan_count", "description": "Count of newly opened loans on the given record date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "adjusted_loan_count": {"name": "adjusted_loan_count", "description": "Count of existing loans that were adjusted (e.g., collateral or terms changed).", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "closed_loan_count": {"name": "closed_loan_count", "description": "Count of loans that were fully closed or repaid on the given record date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/fct_loans.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.8489587, "relation_name": "`mezo-portal-data`.`dbt_marts`.`fct_loans`", "raw_code": "with\n    loans as (\n        select * from {{ ref(\"int_goldsky_borrower_operations_mezo__loans_graph\") }}\n    ),\n\n    filtered_loan as (\n        select\n            transaction_hash as id,\n            canonical_segment_id as fk__dim1_users,\n            collateral_usd_value,\n            principal,\n            interest,\n            collateral,\n            stake,\n            1 as loan_count,\n            date(record_timestamp) as record_date,\n            case when operation = 'new_loan' then 1 else 0 end as new_loan_count,\n            case\n                when operation = 'adjusted_loan' then 1 else 0\n            end as adjusted_loan_count,\n            case when operation = 'closed_loan' then 1 else 0 end as closed_loan_count\n        from loans\n    )\n\nselect *\nfrom filtered_loan", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_borrower_operations_mezo__loans_graph", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_goldsky_borrower_operations_mezo__loans_graph"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_loans.sql", "compiled": true, "compiled_code": "with\n    loans as (\n        select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_borrower_operations_mezo__loans_graph`\n    ),\n\n    filtered_loan as (\n        select\n            transaction_hash as id,\n            canonical_segment_id as fk__dim1_users,\n            collateral_usd_value,\n            principal,\n            interest,\n            collateral,\n            stake,\n            1 as loan_count,\n            date(record_timestamp) as record_date,\n            case when operation = 'new_loan' then 1 else 0 end as new_loan_count,\n            case\n                when operation = 'adjusted_loan' then 1 else 0\n            end as adjusted_loan_count,\n            case when operation = 'closed_loan' then 1 else 0 end as closed_loan_count\n        from loans\n    )\n\nselect *\nfrom filtered_loan", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.fct_sessions": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "fct_sessions", "resource_type": "model", "package_name": "mezo", "path": "80_marts/fct_sessions.sql", "original_file_path": "models/80_marts/fct_sessions.sql", "unique_id": "model.mezo.fct_sessions", "fqn": ["mezo", "80_marts", "fct_sessions"], "alias": "fct_sessions", "checksum": {"name": "sha256", "checksum": "c3cbe19069980824c4a638fa9a813976db2a1d2fb38049e42be35af1e44772c9"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Fact table for sessions.", "columns": {"id": {"name": "id", "description": "The unique identifier for the session", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__fct_paid": {"name": "fk__fct_paid", "description": "The unique identifier for the session", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_users": {"name": "fk__dim1_users", "description": "Foreign key to Users dimension (Canonical Segment ID). Links the order to a unified user profile.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_date": {"name": "fk__dim1_date", "description": "Foreign key to the DATE dimension", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_campaign": {"name": "fk__dim1_campaign", "description": "Foreign key to the campaign dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_landingpage__dim1_page": {"name": "fk_landingpage__dim1_page", "description": "Foreign key to the landing page dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_exitpage__dim1_page": {"name": "fk_exitpage__dim1_page", "description": "Foreign key to the exit page dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_attribution": {"name": "fk__dim1_attribution", "description": "Foreign key to the attribution dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "button_clicks": {"name": "button_clicks", "description": "Count of button click events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_views": {"name": "page_views", "description": "The number of pages viewed during the session", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ups": {"name": "sign_ups", "description": "Count of completed sign-up events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "wallet_connections": {"name": "wallet_connections", "description": "Count of wallet connection events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_swaps": {"name": "asset_swaps", "description": "Count of asset swap events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ins": {"name": "sign_ins", "description": "Count of completed sign-in events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "swap_assets_starts": {"name": "swap_assets_starts", "description": "Count of asset swap start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_up_starts": {"name": "sign_up_starts", "description": "Count of sign-up start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funds_additions": {"name": "funds_additions", "description": "Count of funds added events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_additions": {"name": "pool_liquidity_additions", "description": "Count of liquidity pool additions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "add_funds_starts": {"name": "add_funds_starts", "description": "Count of add-funds start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vault_assets_starts": {"name": "vault_assets_starts", "description": "Count of vault asset start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "username_updates": {"name": "username_updates", "description": "Count of username update events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_vaulted": {"name": "assets_vaulted", "description": "Count of vaulted asset events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrow_starts": {"name": "musd_borrow_starts", "description": "Count of mUSD borrow start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_withdrawals": {"name": "pool_liquidity_withdrawals", "description": "Count of liquidity pool withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_donations": {"name": "musd_donations", "description": "Count of mUSD donation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_starts": {"name": "market_spend_starts", "description": "Count of market spend start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrows": {"name": "musd_borrows", "description": "Count of mUSD borrow events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "items_purchased": {"name": "items_purchased", "description": "Count of purchase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "repay_loan_starts": {"name": "repay_loan_starts", "description": "Count of repay loan start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_repaid": {"name": "loans_repaid", "description": "Count of loan repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_increase_reduce_ratio": {"name": "loan_increase_reduce_ratio", "description": "Ratio metric for loan increase/reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "increase_loan_starts": {"name": "increase_loan_starts", "description": "Count of loan increase start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_increased": {"name": "loans_increased", "description": "Count of loan increase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_deposits": {"name": "loan_collateral_deposits", "description": "Count of loan collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_completions": {"name": "market_spend_completions", "description": "Count of completed market spend events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_withdrawals": {"name": "loan_collateral_withdrawals", "description": "Count of loan collateral withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "withdraw_loan_collateral_starts": {"name": "withdraw_loan_collateral_starts", "description": "Count of withdraw loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deposit_loan_collateral_starts": {"name": "deposit_loan_collateral_starts", "description": "Count of deposit loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_balance_confirmations": {"name": "borrow_more_balance_confirmations", "description": "Count of borrow-more balance confirmation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_swaps": {"name": "assets_swaps", "description": "Count of asset swap events (alternate metric)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repay_starts": {"name": "borrow_repay_starts", "description": "Count of borrow repay start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repays": {"name": "borrow_repays", "description": "Count of borrow repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_donation_successes": {"name": "market_donation_successes", "description": "Count of successful market donations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposit_starts": {"name": "borrow_collateral_deposit_starts", "description": "Count of borrow collateral deposit start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_increase_coll": {"name": "borrow_more_increase_coll", "description": "Count of borrow-more increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_increase_coll": {"name": "borrow_more_strategy_increase_coll", "description": "Count of borrow-more strategy increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposits": {"name": "borrow_collateral_deposits", "description": "Count of borrow collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_button_clicks": {"name": "borrow_more_button_clicks", "description": "Count of borrow-more button click events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_confirm_increase_coll": {"name": "borrow_more_confirm_increase_coll", "description": "Count of borrow-more confirm increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "llm_shares": {"name": "llm_shares", "description": "Count of LLM share events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_reduce_ratio": {"name": "borrow_more_strategy_reduce_ratio", "description": "Ratio metric for borrow-more strategy reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_duration_in_seconds": {"name": "session_duration_in_seconds", "description": "The duration of the session in seconds", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/fct_sessions.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.859531, "relation_name": "`mezo-portal-data`.`dbt_marts`.`fct_sessions`", "raw_code": "with\n    segment_sessions as (select * from {{ ref(\"int_segment__sessions\") }}),\n\n    facts as (\n        select\n            session_id as id,\n            paid_id as fk__fct_paid,\n            canonical_segment_id_with_fallback as fk__dim1_users,\n            session_start_date as fk__dim1_date,\n            campaign_id as fk__dim1_campaign,\n            landing_page_url_without_query_string as fk_landingpage__dim1_page,\n            exit_page_url_without_query_string as fk_exitpage__dim1_page,\n            referrer_id as fk__dim1_attribution,\n            {% for session_metric in var(\"session_metrics\") %}\n                {{ session_metric.metric_name }}{{ \",\" if not loop.last }}\n            {% endfor %},\n            duration_in_s as session_duration_in_seconds\n        from segment_sessions\n    )\n\nselect *\nfrom facts", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_segment__sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_sessions.sql", "compiled": true, "compiled_code": "with\n    segment_sessions as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions`),\n\n    facts as (\n        select\n            session_id as id,\n            paid_id as fk__fct_paid,\n            canonical_segment_id_with_fallback as fk__dim1_users,\n            session_start_date as fk__dim1_date,\n            campaign_id as fk__dim1_campaign,\n            landing_page_url_without_query_string as fk_landingpage__dim1_page,\n            exit_page_url_without_query_string as fk_exitpage__dim1_page,\n            referrer_id as fk__dim1_attribution,\n            \n                button_clicks,\n            \n                page_views,\n            \n                sign_ups,\n            \n                wallet_connections,\n            \n                asset_swaps,\n            \n                sign_ins,\n            \n                swap_assets_starts,\n            \n                sign_up_starts,\n            \n                funds_additions,\n            \n                pool_liquidity_additions,\n            \n                add_funds_starts,\n            \n                vault_assets_starts,\n            \n                username_updates,\n            \n                assets_vaulted,\n            \n                musd_borrow_starts,\n            \n                pool_liquidity_withdrawals,\n            \n                musd_donations,\n            \n                market_spend_starts,\n            \n                musd_borrows,\n            \n                items_purchased,\n            \n                repay_loan_starts,\n            \n                loans_repaid,\n            \n                loan_increase_reduce_ratio,\n            \n                increase_loan_starts,\n            \n                loans_increased,\n            \n                loan_collateral_deposits,\n            \n                market_spend_completions,\n            \n                loan_collateral_withdrawals,\n            \n                withdraw_loan_collateral_starts,\n            \n                deposit_loan_collateral_starts,\n            \n                borrow_more_balance_confirmations,\n            \n                assets_swaps,\n            \n                borrow_repay_starts,\n            \n                borrow_repays,\n            \n                market_donation_successes,\n            \n                borrow_collateral_deposit_starts,\n            \n                borrow_more_increase_coll,\n            \n                borrow_more_strategy_increase_coll,\n            \n                borrow_collateral_deposits,\n            \n                borrow_more_button_clicks,\n            \n                borrow_more_confirm_increase_coll,\n            \n                llm_shares,\n            \n                borrow_more_strategy_reduce_ratio\n            ,\n            duration_in_s as session_duration_in_seconds\n        from segment_sessions\n    )\n\nselect *\nfrom facts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.dim1_token": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "dim1_token", "resource_type": "model", "package_name": "mezo", "path": "80_marts/dim1_token.sql", "original_file_path": "models/80_marts/dim1_token.sql", "unique_id": "model.mezo.dim1_token", "fqn": ["mezo", "80_marts", "dim1_token"], "alias": "dim1_token", "checksum": {"name": "sha256", "checksum": "2c18c861b68154bae2d85cae335505f51e1c7b14f9e30148bd276a3461b40e1a"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Dimension table containing metadata for tokens.", "columns": {"id": {"name": "id", "description": "The ID of the token.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_symbol": {"name": "token_symbol", "description": "The symbol for the token", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_address": {"name": "token_address", "description": "The address identifier for the token", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_name": {"name": "token_name", "description": "The name of the token", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/dim1_token.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.8391085, "relation_name": "`mezo-portal-data`.`dbt_marts`.`dim1_token`", "raw_code": "with\n    assets_locked as (\n        select * from {{ ref(\"int_goldsky_mezo_bridge_mainnet__assets_locked_graph\") }}\n    ),\n\n    tokens as (\n        select distinct token_id as id, token_symbol, token_address, token_name\n        from assets_locked\n    )\n\nselect *\nfrom tokens", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_mezo_bridge_mainnet__assets_locked_graph", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_token.sql", "compiled": true, "compiled_code": "with\n    assets_locked as (\n        select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_mezo_bridge_mainnet__assets_locked_graph`\n    ),\n\n    tokens as (\n        select distinct token_id as id, token_symbol, token_address, token_name\n        from assets_locked\n    )\n\nselect *\nfrom tokens", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.dim1_products": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "dim1_products", "resource_type": "model", "package_name": "mezo", "path": "80_marts/dim1_products.sql", "original_file_path": "models/80_marts/dim1_products.sql", "unique_id": "model.mezo.dim1_products", "fqn": ["mezo", "80_marts", "dim1_products"], "alias": "dim1_products", "checksum": {"name": "sha256", "checksum": "0b300f65329a1ca7f852d60d0f828b149ee3c461d91226fe154b35ad037a3076"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Dimension table for products.", "columns": {"id": {"name": "id", "description": "The ID of the product.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "The name of the product.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/dim1_products.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.7964537, "relation_name": "`mezo-portal-data`.`dbt_marts`.`dim1_products`", "raw_code": "with\n    products as (\n        select * from {{ ref(\"int_goldsky_market_mezo__order_placed_graph\") }}\n    ),\n\n    filtered_products as (\n        select distinct product_id as id, product_name\n        from products\n        qualify row_number() over (partition by product_id order by product_id) = 1\n    )\n\nselect *\nfrom filtered_products", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed_graph", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed_graph"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_products.sql", "compiled": true, "compiled_code": "with\n    products as (\n        select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed_graph`\n    ),\n\n    filtered_products as (\n        select distinct product_id as id, product_name\n        from products\n        qualify row_number() over (partition by product_id order by product_id) = 1\n    )\n\nselect *\nfrom filtered_products", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.fct_paid": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "fct_paid", "resource_type": "model", "package_name": "mezo", "path": "80_marts/fct_paid.sql", "original_file_path": "models/80_marts/fct_paid.sql", "unique_id": "model.mezo.fct_paid", "fqn": ["mezo", "80_marts", "fct_paid"], "alias": "fct_paid", "checksum": {"name": "sha256", "checksum": "618e9fdce562ece95a517ad094bc4795eace4631f227a9daeb93d2e5fdd500af"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "The unique identifier for the record", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_date": {"name": "record_date", "description": "The date of the performance.", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount spent on the campaign", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions for the campaign", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks for the campaign", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/fct_paid.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.8034103, "relation_name": "`mezo-portal-data`.`dbt_marts`.`fct_paid`", "raw_code": "with\n    all_paid as (select * from {{ ref(\"int_paid__all_paid\") }}),\n\n    fact as (\n        select\n            paid_id as id,\n            date_day as record_date,\n            spend,\n            impressions,\n            clicks,\n            referrer_source,\n            referrer_medium\n        from all_paid\n    )\n\nselect *\nfrom fact", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_paid__all_paid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_paid__all_paid"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_paid.sql", "compiled": true, "compiled_code": "with\n    all_paid as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_paid__all_paid`),\n\n    fact as (\n        select\n            paid_id as id,\n            date_day as record_date,\n            spend,\n            impressions,\n            clicks,\n            referrer_source,\n            referrer_medium\n        from all_paid\n    )\n\nselect *\nfrom fact", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.fct_all_facts": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "fct_all_facts", "resource_type": "model", "package_name": "mezo", "path": "80_marts/fct_all_facts.sql", "original_file_path": "models/80_marts/fct_all_facts.sql", "unique_id": "model.mezo.fct_all_facts", "fqn": ["mezo", "80_marts", "fct_all_facts"], "alias": "fct_all_facts", "checksum": {"name": "sha256", "checksum": "77a86d4b989419885028da6b250b687249f2b830ffc4af9165d58c57e1962374"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Union all fact tables.", "columns": {"id": {"name": "id", "description": "Unique identifier.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_users": {"name": "fk__dim1_users", "description": "Foreign key to Users dimension (Canonical Segment ID). Links this record to the unified user profile.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_transaction_hash": {"name": "fk_transaction_hash", "description": "Hash of the transaction that emitted this event.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_token": {"name": "fk__dim1_token", "description": "Foreign key to Token dimension. Identifies the token that was locked", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount of tokens locked (normalized based on token decimals)", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_usd_value": {"name": "token_usd_value", "description": "USD value of the locked tokens at the time of the event.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_locked_count": {"name": "asset_locked_count", "description": "Count of asset lock events included in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_date": {"name": "record_date", "description": "Date of the record, used for time-based analysis.", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "donation_count": {"name": "donation_count", "description": "Count of donation events included in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient_brink_count": {"name": "recipient_brink_count", "description": "Count of donations where the recipient was categorized as \"Brink\".", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient_shefi_count": {"name": "recipient_shefi_count", "description": "Count of donations where the recipient was categorized as \"Shefi\".", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coll_gas_compensation": {"name": "coll_gas_compensation", "description": "Gas compensation related specifically to the collateral in the liquidation process.", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gas_compensation": {"name": "gas_compensation", "description": "General gas compensation awarded for executing the liquidation transaction.", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_principal": {"name": "liquidated_principal", "description": "Amount of principal debt that was liquidated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_interest": {"name": "liquidated_interest", "description": "Amount of interest that was liquidated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_collateral": {"name": "liquidated_collateral", "description": "Amount of collateral that was liquidated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidation_count": {"name": "liquidation_count", "description": "Count of liquidation events represented in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral_usd_value": {"name": "collateral_usd_value", "description": "USD value of the collateral backing the loan.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "principal": {"name": "principal", "description": "Debt principal after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "interest": {"name": "interest", "description": "Accrued interest after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral": {"name": "collateral", "description": "Collateral locked after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stake": {"name": "stake", "description": "Borrower stake after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_count": {"name": "loan_count", "description": "Total number of loans represented in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "new_loan_count": {"name": "new_loan_count", "description": "Count of newly opened loans on the given record date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "adjusted_loan_count": {"name": "adjusted_loan_count", "description": "Count of existing loans that were adjusted (e.g., collateral or terms changed).", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "closed_loan_count": {"name": "closed_loan_count", "description": "Count of loans that were fully closed or repaid on the given record date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_products": {"name": "fk__dim1_products", "description": "Foreign key to Products dimension. Identifies the product associated with the order.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "Price of the order, expressed in normalized currency.", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_count": {"name": "order_count", "description": "Number of orders represented in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount spent on the campaign", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions for the campaign", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks for the campaign", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__fct_paid": {"name": "fk__fct_paid", "description": "The unique identifier for the session", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_date": {"name": "fk__dim1_date", "description": "Foreign key to the DATE dimension", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_campaign": {"name": "fk__dim1_campaign", "description": "Foreign key to the campaign dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_landingpage__dim1_page": {"name": "fk_landingpage__dim1_page", "description": "Foreign key to the landing page dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_exitpage__dim1_page": {"name": "fk_exitpage__dim1_page", "description": "Foreign key to the exit page dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_attribution": {"name": "fk__dim1_attribution", "description": "Foreign key to the attribution dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "button_clicks": {"name": "button_clicks", "description": "Count of button click events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_views": {"name": "page_views", "description": "The number of pages viewed during the session", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ups": {"name": "sign_ups", "description": "Count of completed sign-up events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "wallet_connections": {"name": "wallet_connections", "description": "Count of wallet connection events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_swaps": {"name": "asset_swaps", "description": "Count of asset swap events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ins": {"name": "sign_ins", "description": "Count of completed sign-in events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "swap_assets_starts": {"name": "swap_assets_starts", "description": "Count of asset swap start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_up_starts": {"name": "sign_up_starts", "description": "Count of sign-up start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funds_additions": {"name": "funds_additions", "description": "Count of funds added events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_additions": {"name": "pool_liquidity_additions", "description": "Count of liquidity pool additions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "add_funds_starts": {"name": "add_funds_starts", "description": "Count of add-funds start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vault_assets_starts": {"name": "vault_assets_starts", "description": "Count of vault asset start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "username_updates": {"name": "username_updates", "description": "Count of username update events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_vaulted": {"name": "assets_vaulted", "description": "Count of vaulted asset events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrow_starts": {"name": "musd_borrow_starts", "description": "Count of mUSD borrow start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_withdrawals": {"name": "pool_liquidity_withdrawals", "description": "Count of liquidity pool withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_donations": {"name": "musd_donations", "description": "Count of mUSD donation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_starts": {"name": "market_spend_starts", "description": "Count of market spend start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrows": {"name": "musd_borrows", "description": "Count of mUSD borrow events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "items_purchased": {"name": "items_purchased", "description": "Count of purchase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "repay_loan_starts": {"name": "repay_loan_starts", "description": "Count of repay loan start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_repaid": {"name": "loans_repaid", "description": "Count of loan repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_increase_reduce_ratio": {"name": "loan_increase_reduce_ratio", "description": "Ratio metric for loan increase/reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "increase_loan_starts": {"name": "increase_loan_starts", "description": "Count of loan increase start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_increased": {"name": "loans_increased", "description": "Count of loan increase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_deposits": {"name": "loan_collateral_deposits", "description": "Count of loan collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_completions": {"name": "market_spend_completions", "description": "Count of completed market spend events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_withdrawals": {"name": "loan_collateral_withdrawals", "description": "Count of loan collateral withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "withdraw_loan_collateral_starts": {"name": "withdraw_loan_collateral_starts", "description": "Count of withdraw loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deposit_loan_collateral_starts": {"name": "deposit_loan_collateral_starts", "description": "Count of deposit loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_balance_confirmations": {"name": "borrow_more_balance_confirmations", "description": "Count of borrow-more balance confirmation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_swaps": {"name": "assets_swaps", "description": "Count of asset swap events (alternate metric)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repay_starts": {"name": "borrow_repay_starts", "description": "Count of borrow repay start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repays": {"name": "borrow_repays", "description": "Count of borrow repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_donation_successes": {"name": "market_donation_successes", "description": "Count of successful market donations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposit_starts": {"name": "borrow_collateral_deposit_starts", "description": "Count of borrow collateral deposit start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_increase_coll": {"name": "borrow_more_increase_coll", "description": "Count of borrow-more increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_increase_coll": {"name": "borrow_more_strategy_increase_coll", "description": "Count of borrow-more strategy increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposits": {"name": "borrow_collateral_deposits", "description": "Count of borrow collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_button_clicks": {"name": "borrow_more_button_clicks", "description": "Count of borrow-more button click events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_confirm_increase_coll": {"name": "borrow_more_confirm_increase_coll", "description": "Count of borrow-more confirm increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "llm_shares": {"name": "llm_shares", "description": "Count of LLM share events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_reduce_ratio": {"name": "borrow_more_strategy_reduce_ratio", "description": "Ratio metric for borrow-more strategy reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_duration_in_seconds": {"name": "session_duration_in_seconds", "description": "The duration of the session in seconds", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/fct_all_facts.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.819534, "relation_name": "`mezo-portal-data`.`dbt_marts`.`fct_all_facts`", "raw_code": "{{\n    dbt_utils.union_relations(\n        relations=[\n            ref(\"fct_assets_locked\"),\n            ref(\"fct_donated\"),\n            ref(\"fct_liquidation\"),\n            ref(\"fct_loans\"),\n            ref(\"fct_orders\"),\n            ref(\"fct_paid\"),\n            ref(\"fct_sessions\"),\n        ],\n        column_override={\"id\": \"STRING\"},\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_assets_locked", "package": null, "version": null}, {"name": "fct_donated", "package": null, "version": null}, {"name": "fct_liquidation", "package": null, "version": null}, {"name": "fct_loans", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}, {"name": "fct_paid", "package": null, "version": null}, {"name": "fct_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.mezo.fct_assets_locked", "model.mezo.fct_donated", "model.mezo.fct_liquidation", "model.mezo.fct_loans", "model.mezo.fct_orders", "model.mezo.fct_paid", "model.mezo.fct_sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_all_facts.sql", "compiled": true, "compiled_code": "\n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_marts`.`fct_assets_locked`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as STRING) as `id` ,\n                    cast(`fk__dim1_users` as STRING) as `fk__dim1_users` ,\n                    cast(`fk_transaction_hash` as STRING) as `fk_transaction_hash` ,\n                    cast(`fk__dim1_token` as STRING) as `fk__dim1_token` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(`token_usd_value` as FLOAT64) as `token_usd_value` ,\n                    cast(`asset_locked_count` as INT64) as `asset_locked_count` ,\n                    cast(`record_date` as DATE) as `record_date` ,\n                    cast(null as INT64) as `donation_count` ,\n                    cast(null as INT64) as `recipient_brink_count` ,\n                    cast(null as INT64) as `recipient_shefi_count` ,\n                    cast(null as BIGNUMERIC) as `coll_gas_compensation` ,\n                    cast(null as BIGNUMERIC) as `gas_compensation` ,\n                    cast(null as NUMERIC) as `liquidated_principal` ,\n                    cast(null as NUMERIC) as `liquidated_interest` ,\n                    cast(null as NUMERIC) as `liquidated_collateral` ,\n                    cast(null as INT64) as `liquidation_count` ,\n                    cast(null as FLOAT64) as `collateral_usd_value` ,\n                    cast(null as NUMERIC) as `principal` ,\n                    cast(null as NUMERIC) as `interest` ,\n                    cast(null as NUMERIC) as `collateral` ,\n                    cast(null as NUMERIC) as `stake` ,\n                    cast(null as INT64) as `loan_count` ,\n                    cast(null as INT64) as `new_loan_count` ,\n                    cast(null as INT64) as `adjusted_loan_count` ,\n                    cast(null as INT64) as `closed_loan_count` ,\n                    cast(null as STRING) as `fk__dim1_products` ,\n                    cast(null as NUMERIC) as `price` ,\n                    cast(null as INT64) as `order_count` ,\n                    cast(null as FLOAT64) as `spend` ,\n                    cast(null as INT64) as `impressions` ,\n                    cast(null as INT64) as `clicks` ,\n                    cast(null as STRING) as `referrer_source` ,\n                    cast(null as STRING) as `referrer_medium` ,\n                    cast(null as STRING) as `fk__fct_paid` ,\n                    cast(null as DATE) as `fk__dim1_date` ,\n                    cast(null as STRING) as `fk__dim1_campaign` ,\n                    cast(null as STRING) as `fk_landingpage__dim1_page` ,\n                    cast(null as STRING) as `fk_exitpage__dim1_page` ,\n                    cast(null as STRING) as `fk__dim1_attribution` ,\n                    cast(null as INT64) as `button_clicks` ,\n                    cast(null as INT64) as `page_views` ,\n                    cast(null as INT64) as `sign_ups` ,\n                    cast(null as INT64) as `wallet_connections` ,\n                    cast(null as INT64) as `asset_swaps` ,\n                    cast(null as INT64) as `sign_ins` ,\n                    cast(null as INT64) as `swap_assets_starts` ,\n                    cast(null as INT64) as `sign_up_starts` ,\n                    cast(null as INT64) as `funds_additions` ,\n                    cast(null as INT64) as `pool_liquidity_additions` ,\n                    cast(null as INT64) as `add_funds_starts` ,\n                    cast(null as INT64) as `vault_assets_starts` ,\n                    cast(null as INT64) as `username_updates` ,\n                    cast(null as INT64) as `assets_vaulted` ,\n                    cast(null as INT64) as `musd_borrow_starts` ,\n                    cast(null as INT64) as `pool_liquidity_withdrawals` ,\n                    cast(null as INT64) as `musd_donations` ,\n                    cast(null as INT64) as `market_spend_starts` ,\n                    cast(null as INT64) as `musd_borrows` ,\n                    cast(null as INT64) as `items_purchased` ,\n                    cast(null as INT64) as `repay_loan_starts` ,\n                    cast(null as INT64) as `loans_repaid` ,\n                    cast(null as INT64) as `loan_increase_reduce_ratio` ,\n                    cast(null as INT64) as `increase_loan_starts` ,\n                    cast(null as INT64) as `loans_increased` ,\n                    cast(null as INT64) as `loan_collateral_deposits` ,\n                    cast(null as INT64) as `market_spend_completions` ,\n                    cast(null as INT64) as `loan_collateral_withdrawals` ,\n                    cast(null as INT64) as `withdraw_loan_collateral_starts` ,\n                    cast(null as INT64) as `deposit_loan_collateral_starts` ,\n                    cast(null as INT64) as `borrow_more_balance_confirmations` ,\n                    cast(null as INT64) as `assets_swaps` ,\n                    cast(null as INT64) as `borrow_repay_starts` ,\n                    cast(null as INT64) as `borrow_repays` ,\n                    cast(null as INT64) as `market_donation_successes` ,\n                    cast(null as INT64) as `borrow_collateral_deposit_starts` ,\n                    cast(null as INT64) as `borrow_more_increase_coll` ,\n                    cast(null as INT64) as `borrow_more_strategy_increase_coll` ,\n                    cast(null as INT64) as `borrow_collateral_deposits` ,\n                    cast(null as INT64) as `borrow_more_button_clicks` ,\n                    cast(null as INT64) as `borrow_more_confirm_increase_coll` ,\n                    cast(null as INT64) as `llm_shares` ,\n                    cast(null as INT64) as `borrow_more_strategy_reduce_ratio` ,\n                    cast(null as INT64) as `session_duration_in_seconds` \n\n            from `mezo-portal-data`.`dbt_marts`.`fct_assets_locked`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_marts`.`fct_donated`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as STRING) as `id` ,\n                    cast(`fk__dim1_users` as STRING) as `fk__dim1_users` ,\n                    cast(null as STRING) as `fk_transaction_hash` ,\n                    cast(null as STRING) as `fk__dim1_token` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(null as FLOAT64) as `token_usd_value` ,\n                    cast(null as INT64) as `asset_locked_count` ,\n                    cast(`record_date` as DATE) as `record_date` ,\n                    cast(`donation_count` as INT64) as `donation_count` ,\n                    cast(`recipient_brink_count` as INT64) as `recipient_brink_count` ,\n                    cast(`recipient_shefi_count` as INT64) as `recipient_shefi_count` ,\n                    cast(null as BIGNUMERIC) as `coll_gas_compensation` ,\n                    cast(null as BIGNUMERIC) as `gas_compensation` ,\n                    cast(null as NUMERIC) as `liquidated_principal` ,\n                    cast(null as NUMERIC) as `liquidated_interest` ,\n                    cast(null as NUMERIC) as `liquidated_collateral` ,\n                    cast(null as INT64) as `liquidation_count` ,\n                    cast(null as FLOAT64) as `collateral_usd_value` ,\n                    cast(null as NUMERIC) as `principal` ,\n                    cast(null as NUMERIC) as `interest` ,\n                    cast(null as NUMERIC) as `collateral` ,\n                    cast(null as NUMERIC) as `stake` ,\n                    cast(null as INT64) as `loan_count` ,\n                    cast(null as INT64) as `new_loan_count` ,\n                    cast(null as INT64) as `adjusted_loan_count` ,\n                    cast(null as INT64) as `closed_loan_count` ,\n                    cast(null as STRING) as `fk__dim1_products` ,\n                    cast(null as NUMERIC) as `price` ,\n                    cast(null as INT64) as `order_count` ,\n                    cast(null as FLOAT64) as `spend` ,\n                    cast(null as INT64) as `impressions` ,\n                    cast(null as INT64) as `clicks` ,\n                    cast(null as STRING) as `referrer_source` ,\n                    cast(null as STRING) as `referrer_medium` ,\n                    cast(null as STRING) as `fk__fct_paid` ,\n                    cast(null as DATE) as `fk__dim1_date` ,\n                    cast(null as STRING) as `fk__dim1_campaign` ,\n                    cast(null as STRING) as `fk_landingpage__dim1_page` ,\n                    cast(null as STRING) as `fk_exitpage__dim1_page` ,\n                    cast(null as STRING) as `fk__dim1_attribution` ,\n                    cast(null as INT64) as `button_clicks` ,\n                    cast(null as INT64) as `page_views` ,\n                    cast(null as INT64) as `sign_ups` ,\n                    cast(null as INT64) as `wallet_connections` ,\n                    cast(null as INT64) as `asset_swaps` ,\n                    cast(null as INT64) as `sign_ins` ,\n                    cast(null as INT64) as `swap_assets_starts` ,\n                    cast(null as INT64) as `sign_up_starts` ,\n                    cast(null as INT64) as `funds_additions` ,\n                    cast(null as INT64) as `pool_liquidity_additions` ,\n                    cast(null as INT64) as `add_funds_starts` ,\n                    cast(null as INT64) as `vault_assets_starts` ,\n                    cast(null as INT64) as `username_updates` ,\n                    cast(null as INT64) as `assets_vaulted` ,\n                    cast(null as INT64) as `musd_borrow_starts` ,\n                    cast(null as INT64) as `pool_liquidity_withdrawals` ,\n                    cast(null as INT64) as `musd_donations` ,\n                    cast(null as INT64) as `market_spend_starts` ,\n                    cast(null as INT64) as `musd_borrows` ,\n                    cast(null as INT64) as `items_purchased` ,\n                    cast(null as INT64) as `repay_loan_starts` ,\n                    cast(null as INT64) as `loans_repaid` ,\n                    cast(null as INT64) as `loan_increase_reduce_ratio` ,\n                    cast(null as INT64) as `increase_loan_starts` ,\n                    cast(null as INT64) as `loans_increased` ,\n                    cast(null as INT64) as `loan_collateral_deposits` ,\n                    cast(null as INT64) as `market_spend_completions` ,\n                    cast(null as INT64) as `loan_collateral_withdrawals` ,\n                    cast(null as INT64) as `withdraw_loan_collateral_starts` ,\n                    cast(null as INT64) as `deposit_loan_collateral_starts` ,\n                    cast(null as INT64) as `borrow_more_balance_confirmations` ,\n                    cast(null as INT64) as `assets_swaps` ,\n                    cast(null as INT64) as `borrow_repay_starts` ,\n                    cast(null as INT64) as `borrow_repays` ,\n                    cast(null as INT64) as `market_donation_successes` ,\n                    cast(null as INT64) as `borrow_collateral_deposit_starts` ,\n                    cast(null as INT64) as `borrow_more_increase_coll` ,\n                    cast(null as INT64) as `borrow_more_strategy_increase_coll` ,\n                    cast(null as INT64) as `borrow_collateral_deposits` ,\n                    cast(null as INT64) as `borrow_more_button_clicks` ,\n                    cast(null as INT64) as `borrow_more_confirm_increase_coll` ,\n                    cast(null as INT64) as `llm_shares` ,\n                    cast(null as INT64) as `borrow_more_strategy_reduce_ratio` ,\n                    cast(null as INT64) as `session_duration_in_seconds` \n\n            from `mezo-portal-data`.`dbt_marts`.`fct_donated`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_marts`.`fct_liquidation`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as STRING) as `id` ,\n                    cast(`fk__dim1_users` as STRING) as `fk__dim1_users` ,\n                    cast(`fk_transaction_hash` as STRING) as `fk_transaction_hash` ,\n                    cast(null as STRING) as `fk__dim1_token` ,\n                    cast(null as FLOAT64) as `amount` ,\n                    cast(null as FLOAT64) as `token_usd_value` ,\n                    cast(null as INT64) as `asset_locked_count` ,\n                    cast(`record_date` as DATE) as `record_date` ,\n                    cast(null as INT64) as `donation_count` ,\n                    cast(null as INT64) as `recipient_brink_count` ,\n                    cast(null as INT64) as `recipient_shefi_count` ,\n                    cast(`coll_gas_compensation` as BIGNUMERIC) as `coll_gas_compensation` ,\n                    cast(`gas_compensation` as BIGNUMERIC) as `gas_compensation` ,\n                    cast(`liquidated_principal` as NUMERIC) as `liquidated_principal` ,\n                    cast(`liquidated_interest` as NUMERIC) as `liquidated_interest` ,\n                    cast(`liquidated_collateral` as NUMERIC) as `liquidated_collateral` ,\n                    cast(`liquidation_count` as INT64) as `liquidation_count` ,\n                    cast(null as FLOAT64) as `collateral_usd_value` ,\n                    cast(null as NUMERIC) as `principal` ,\n                    cast(null as NUMERIC) as `interest` ,\n                    cast(null as NUMERIC) as `collateral` ,\n                    cast(null as NUMERIC) as `stake` ,\n                    cast(null as INT64) as `loan_count` ,\n                    cast(null as INT64) as `new_loan_count` ,\n                    cast(null as INT64) as `adjusted_loan_count` ,\n                    cast(null as INT64) as `closed_loan_count` ,\n                    cast(null as STRING) as `fk__dim1_products` ,\n                    cast(null as NUMERIC) as `price` ,\n                    cast(null as INT64) as `order_count` ,\n                    cast(null as FLOAT64) as `spend` ,\n                    cast(null as INT64) as `impressions` ,\n                    cast(null as INT64) as `clicks` ,\n                    cast(null as STRING) as `referrer_source` ,\n                    cast(null as STRING) as `referrer_medium` ,\n                    cast(null as STRING) as `fk__fct_paid` ,\n                    cast(null as DATE) as `fk__dim1_date` ,\n                    cast(null as STRING) as `fk__dim1_campaign` ,\n                    cast(null as STRING) as `fk_landingpage__dim1_page` ,\n                    cast(null as STRING) as `fk_exitpage__dim1_page` ,\n                    cast(null as STRING) as `fk__dim1_attribution` ,\n                    cast(null as INT64) as `button_clicks` ,\n                    cast(null as INT64) as `page_views` ,\n                    cast(null as INT64) as `sign_ups` ,\n                    cast(null as INT64) as `wallet_connections` ,\n                    cast(null as INT64) as `asset_swaps` ,\n                    cast(null as INT64) as `sign_ins` ,\n                    cast(null as INT64) as `swap_assets_starts` ,\n                    cast(null as INT64) as `sign_up_starts` ,\n                    cast(null as INT64) as `funds_additions` ,\n                    cast(null as INT64) as `pool_liquidity_additions` ,\n                    cast(null as INT64) as `add_funds_starts` ,\n                    cast(null as INT64) as `vault_assets_starts` ,\n                    cast(null as INT64) as `username_updates` ,\n                    cast(null as INT64) as `assets_vaulted` ,\n                    cast(null as INT64) as `musd_borrow_starts` ,\n                    cast(null as INT64) as `pool_liquidity_withdrawals` ,\n                    cast(null as INT64) as `musd_donations` ,\n                    cast(null as INT64) as `market_spend_starts` ,\n                    cast(null as INT64) as `musd_borrows` ,\n                    cast(null as INT64) as `items_purchased` ,\n                    cast(null as INT64) as `repay_loan_starts` ,\n                    cast(null as INT64) as `loans_repaid` ,\n                    cast(null as INT64) as `loan_increase_reduce_ratio` ,\n                    cast(null as INT64) as `increase_loan_starts` ,\n                    cast(null as INT64) as `loans_increased` ,\n                    cast(null as INT64) as `loan_collateral_deposits` ,\n                    cast(null as INT64) as `market_spend_completions` ,\n                    cast(null as INT64) as `loan_collateral_withdrawals` ,\n                    cast(null as INT64) as `withdraw_loan_collateral_starts` ,\n                    cast(null as INT64) as `deposit_loan_collateral_starts` ,\n                    cast(null as INT64) as `borrow_more_balance_confirmations` ,\n                    cast(null as INT64) as `assets_swaps` ,\n                    cast(null as INT64) as `borrow_repay_starts` ,\n                    cast(null as INT64) as `borrow_repays` ,\n                    cast(null as INT64) as `market_donation_successes` ,\n                    cast(null as INT64) as `borrow_collateral_deposit_starts` ,\n                    cast(null as INT64) as `borrow_more_increase_coll` ,\n                    cast(null as INT64) as `borrow_more_strategy_increase_coll` ,\n                    cast(null as INT64) as `borrow_collateral_deposits` ,\n                    cast(null as INT64) as `borrow_more_button_clicks` ,\n                    cast(null as INT64) as `borrow_more_confirm_increase_coll` ,\n                    cast(null as INT64) as `llm_shares` ,\n                    cast(null as INT64) as `borrow_more_strategy_reduce_ratio` ,\n                    cast(null as INT64) as `session_duration_in_seconds` \n\n            from `mezo-portal-data`.`dbt_marts`.`fct_liquidation`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_marts`.`fct_loans`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as STRING) as `id` ,\n                    cast(`fk__dim1_users` as STRING) as `fk__dim1_users` ,\n                    cast(null as STRING) as `fk_transaction_hash` ,\n                    cast(null as STRING) as `fk__dim1_token` ,\n                    cast(null as FLOAT64) as `amount` ,\n                    cast(null as FLOAT64) as `token_usd_value` ,\n                    cast(null as INT64) as `asset_locked_count` ,\n                    cast(`record_date` as DATE) as `record_date` ,\n                    cast(null as INT64) as `donation_count` ,\n                    cast(null as INT64) as `recipient_brink_count` ,\n                    cast(null as INT64) as `recipient_shefi_count` ,\n                    cast(null as BIGNUMERIC) as `coll_gas_compensation` ,\n                    cast(null as BIGNUMERIC) as `gas_compensation` ,\n                    cast(null as NUMERIC) as `liquidated_principal` ,\n                    cast(null as NUMERIC) as `liquidated_interest` ,\n                    cast(null as NUMERIC) as `liquidated_collateral` ,\n                    cast(null as INT64) as `liquidation_count` ,\n                    cast(`collateral_usd_value` as FLOAT64) as `collateral_usd_value` ,\n                    cast(`principal` as NUMERIC) as `principal` ,\n                    cast(`interest` as NUMERIC) as `interest` ,\n                    cast(`collateral` as NUMERIC) as `collateral` ,\n                    cast(`stake` as NUMERIC) as `stake` ,\n                    cast(`loan_count` as INT64) as `loan_count` ,\n                    cast(`new_loan_count` as INT64) as `new_loan_count` ,\n                    cast(`adjusted_loan_count` as INT64) as `adjusted_loan_count` ,\n                    cast(`closed_loan_count` as INT64) as `closed_loan_count` ,\n                    cast(null as STRING) as `fk__dim1_products` ,\n                    cast(null as NUMERIC) as `price` ,\n                    cast(null as INT64) as `order_count` ,\n                    cast(null as FLOAT64) as `spend` ,\n                    cast(null as INT64) as `impressions` ,\n                    cast(null as INT64) as `clicks` ,\n                    cast(null as STRING) as `referrer_source` ,\n                    cast(null as STRING) as `referrer_medium` ,\n                    cast(null as STRING) as `fk__fct_paid` ,\n                    cast(null as DATE) as `fk__dim1_date` ,\n                    cast(null as STRING) as `fk__dim1_campaign` ,\n                    cast(null as STRING) as `fk_landingpage__dim1_page` ,\n                    cast(null as STRING) as `fk_exitpage__dim1_page` ,\n                    cast(null as STRING) as `fk__dim1_attribution` ,\n                    cast(null as INT64) as `button_clicks` ,\n                    cast(null as INT64) as `page_views` ,\n                    cast(null as INT64) as `sign_ups` ,\n                    cast(null as INT64) as `wallet_connections` ,\n                    cast(null as INT64) as `asset_swaps` ,\n                    cast(null as INT64) as `sign_ins` ,\n                    cast(null as INT64) as `swap_assets_starts` ,\n                    cast(null as INT64) as `sign_up_starts` ,\n                    cast(null as INT64) as `funds_additions` ,\n                    cast(null as INT64) as `pool_liquidity_additions` ,\n                    cast(null as INT64) as `add_funds_starts` ,\n                    cast(null as INT64) as `vault_assets_starts` ,\n                    cast(null as INT64) as `username_updates` ,\n                    cast(null as INT64) as `assets_vaulted` ,\n                    cast(null as INT64) as `musd_borrow_starts` ,\n                    cast(null as INT64) as `pool_liquidity_withdrawals` ,\n                    cast(null as INT64) as `musd_donations` ,\n                    cast(null as INT64) as `market_spend_starts` ,\n                    cast(null as INT64) as `musd_borrows` ,\n                    cast(null as INT64) as `items_purchased` ,\n                    cast(null as INT64) as `repay_loan_starts` ,\n                    cast(null as INT64) as `loans_repaid` ,\n                    cast(null as INT64) as `loan_increase_reduce_ratio` ,\n                    cast(null as INT64) as `increase_loan_starts` ,\n                    cast(null as INT64) as `loans_increased` ,\n                    cast(null as INT64) as `loan_collateral_deposits` ,\n                    cast(null as INT64) as `market_spend_completions` ,\n                    cast(null as INT64) as `loan_collateral_withdrawals` ,\n                    cast(null as INT64) as `withdraw_loan_collateral_starts` ,\n                    cast(null as INT64) as `deposit_loan_collateral_starts` ,\n                    cast(null as INT64) as `borrow_more_balance_confirmations` ,\n                    cast(null as INT64) as `assets_swaps` ,\n                    cast(null as INT64) as `borrow_repay_starts` ,\n                    cast(null as INT64) as `borrow_repays` ,\n                    cast(null as INT64) as `market_donation_successes` ,\n                    cast(null as INT64) as `borrow_collateral_deposit_starts` ,\n                    cast(null as INT64) as `borrow_more_increase_coll` ,\n                    cast(null as INT64) as `borrow_more_strategy_increase_coll` ,\n                    cast(null as INT64) as `borrow_collateral_deposits` ,\n                    cast(null as INT64) as `borrow_more_button_clicks` ,\n                    cast(null as INT64) as `borrow_more_confirm_increase_coll` ,\n                    cast(null as INT64) as `llm_shares` ,\n                    cast(null as INT64) as `borrow_more_strategy_reduce_ratio` ,\n                    cast(null as INT64) as `session_duration_in_seconds` \n\n            from `mezo-portal-data`.`dbt_marts`.`fct_loans`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_marts`.`fct_orders`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as STRING) as `id` ,\n                    cast(`fk__dim1_users` as STRING) as `fk__dim1_users` ,\n                    cast(`fk_transaction_hash` as STRING) as `fk_transaction_hash` ,\n                    cast(null as STRING) as `fk__dim1_token` ,\n                    cast(null as FLOAT64) as `amount` ,\n                    cast(null as FLOAT64) as `token_usd_value` ,\n                    cast(null as INT64) as `asset_locked_count` ,\n                    cast(`record_date` as DATE) as `record_date` ,\n                    cast(null as INT64) as `donation_count` ,\n                    cast(null as INT64) as `recipient_brink_count` ,\n                    cast(null as INT64) as `recipient_shefi_count` ,\n                    cast(null as BIGNUMERIC) as `coll_gas_compensation` ,\n                    cast(null as BIGNUMERIC) as `gas_compensation` ,\n                    cast(null as NUMERIC) as `liquidated_principal` ,\n                    cast(null as NUMERIC) as `liquidated_interest` ,\n                    cast(null as NUMERIC) as `liquidated_collateral` ,\n                    cast(null as INT64) as `liquidation_count` ,\n                    cast(null as FLOAT64) as `collateral_usd_value` ,\n                    cast(null as NUMERIC) as `principal` ,\n                    cast(null as NUMERIC) as `interest` ,\n                    cast(null as NUMERIC) as `collateral` ,\n                    cast(null as NUMERIC) as `stake` ,\n                    cast(null as INT64) as `loan_count` ,\n                    cast(null as INT64) as `new_loan_count` ,\n                    cast(null as INT64) as `adjusted_loan_count` ,\n                    cast(null as INT64) as `closed_loan_count` ,\n                    cast(`fk__dim1_products` as STRING) as `fk__dim1_products` ,\n                    cast(`price` as NUMERIC) as `price` ,\n                    cast(`order_count` as INT64) as `order_count` ,\n                    cast(null as FLOAT64) as `spend` ,\n                    cast(null as INT64) as `impressions` ,\n                    cast(null as INT64) as `clicks` ,\n                    cast(null as STRING) as `referrer_source` ,\n                    cast(null as STRING) as `referrer_medium` ,\n                    cast(null as STRING) as `fk__fct_paid` ,\n                    cast(null as DATE) as `fk__dim1_date` ,\n                    cast(null as STRING) as `fk__dim1_campaign` ,\n                    cast(null as STRING) as `fk_landingpage__dim1_page` ,\n                    cast(null as STRING) as `fk_exitpage__dim1_page` ,\n                    cast(null as STRING) as `fk__dim1_attribution` ,\n                    cast(null as INT64) as `button_clicks` ,\n                    cast(null as INT64) as `page_views` ,\n                    cast(null as INT64) as `sign_ups` ,\n                    cast(null as INT64) as `wallet_connections` ,\n                    cast(null as INT64) as `asset_swaps` ,\n                    cast(null as INT64) as `sign_ins` ,\n                    cast(null as INT64) as `swap_assets_starts` ,\n                    cast(null as INT64) as `sign_up_starts` ,\n                    cast(null as INT64) as `funds_additions` ,\n                    cast(null as INT64) as `pool_liquidity_additions` ,\n                    cast(null as INT64) as `add_funds_starts` ,\n                    cast(null as INT64) as `vault_assets_starts` ,\n                    cast(null as INT64) as `username_updates` ,\n                    cast(null as INT64) as `assets_vaulted` ,\n                    cast(null as INT64) as `musd_borrow_starts` ,\n                    cast(null as INT64) as `pool_liquidity_withdrawals` ,\n                    cast(null as INT64) as `musd_donations` ,\n                    cast(null as INT64) as `market_spend_starts` ,\n                    cast(null as INT64) as `musd_borrows` ,\n                    cast(null as INT64) as `items_purchased` ,\n                    cast(null as INT64) as `repay_loan_starts` ,\n                    cast(null as INT64) as `loans_repaid` ,\n                    cast(null as INT64) as `loan_increase_reduce_ratio` ,\n                    cast(null as INT64) as `increase_loan_starts` ,\n                    cast(null as INT64) as `loans_increased` ,\n                    cast(null as INT64) as `loan_collateral_deposits` ,\n                    cast(null as INT64) as `market_spend_completions` ,\n                    cast(null as INT64) as `loan_collateral_withdrawals` ,\n                    cast(null as INT64) as `withdraw_loan_collateral_starts` ,\n                    cast(null as INT64) as `deposit_loan_collateral_starts` ,\n                    cast(null as INT64) as `borrow_more_balance_confirmations` ,\n                    cast(null as INT64) as `assets_swaps` ,\n                    cast(null as INT64) as `borrow_repay_starts` ,\n                    cast(null as INT64) as `borrow_repays` ,\n                    cast(null as INT64) as `market_donation_successes` ,\n                    cast(null as INT64) as `borrow_collateral_deposit_starts` ,\n                    cast(null as INT64) as `borrow_more_increase_coll` ,\n                    cast(null as INT64) as `borrow_more_strategy_increase_coll` ,\n                    cast(null as INT64) as `borrow_collateral_deposits` ,\n                    cast(null as INT64) as `borrow_more_button_clicks` ,\n                    cast(null as INT64) as `borrow_more_confirm_increase_coll` ,\n                    cast(null as INT64) as `llm_shares` ,\n                    cast(null as INT64) as `borrow_more_strategy_reduce_ratio` ,\n                    cast(null as INT64) as `session_duration_in_seconds` \n\n            from `mezo-portal-data`.`dbt_marts`.`fct_orders`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_marts`.`fct_paid`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as STRING) as `id` ,\n                    cast(null as STRING) as `fk__dim1_users` ,\n                    cast(null as STRING) as `fk_transaction_hash` ,\n                    cast(null as STRING) as `fk__dim1_token` ,\n                    cast(null as FLOAT64) as `amount` ,\n                    cast(null as FLOAT64) as `token_usd_value` ,\n                    cast(null as INT64) as `asset_locked_count` ,\n                    cast(`record_date` as DATE) as `record_date` ,\n                    cast(null as INT64) as `donation_count` ,\n                    cast(null as INT64) as `recipient_brink_count` ,\n                    cast(null as INT64) as `recipient_shefi_count` ,\n                    cast(null as BIGNUMERIC) as `coll_gas_compensation` ,\n                    cast(null as BIGNUMERIC) as `gas_compensation` ,\n                    cast(null as NUMERIC) as `liquidated_principal` ,\n                    cast(null as NUMERIC) as `liquidated_interest` ,\n                    cast(null as NUMERIC) as `liquidated_collateral` ,\n                    cast(null as INT64) as `liquidation_count` ,\n                    cast(null as FLOAT64) as `collateral_usd_value` ,\n                    cast(null as NUMERIC) as `principal` ,\n                    cast(null as NUMERIC) as `interest` ,\n                    cast(null as NUMERIC) as `collateral` ,\n                    cast(null as NUMERIC) as `stake` ,\n                    cast(null as INT64) as `loan_count` ,\n                    cast(null as INT64) as `new_loan_count` ,\n                    cast(null as INT64) as `adjusted_loan_count` ,\n                    cast(null as INT64) as `closed_loan_count` ,\n                    cast(null as STRING) as `fk__dim1_products` ,\n                    cast(null as NUMERIC) as `price` ,\n                    cast(null as INT64) as `order_count` ,\n                    cast(`spend` as FLOAT64) as `spend` ,\n                    cast(`impressions` as INT64) as `impressions` ,\n                    cast(`clicks` as INT64) as `clicks` ,\n                    cast(`referrer_source` as STRING) as `referrer_source` ,\n                    cast(`referrer_medium` as STRING) as `referrer_medium` ,\n                    cast(null as STRING) as `fk__fct_paid` ,\n                    cast(null as DATE) as `fk__dim1_date` ,\n                    cast(null as STRING) as `fk__dim1_campaign` ,\n                    cast(null as STRING) as `fk_landingpage__dim1_page` ,\n                    cast(null as STRING) as `fk_exitpage__dim1_page` ,\n                    cast(null as STRING) as `fk__dim1_attribution` ,\n                    cast(null as INT64) as `button_clicks` ,\n                    cast(null as INT64) as `page_views` ,\n                    cast(null as INT64) as `sign_ups` ,\n                    cast(null as INT64) as `wallet_connections` ,\n                    cast(null as INT64) as `asset_swaps` ,\n                    cast(null as INT64) as `sign_ins` ,\n                    cast(null as INT64) as `swap_assets_starts` ,\n                    cast(null as INT64) as `sign_up_starts` ,\n                    cast(null as INT64) as `funds_additions` ,\n                    cast(null as INT64) as `pool_liquidity_additions` ,\n                    cast(null as INT64) as `add_funds_starts` ,\n                    cast(null as INT64) as `vault_assets_starts` ,\n                    cast(null as INT64) as `username_updates` ,\n                    cast(null as INT64) as `assets_vaulted` ,\n                    cast(null as INT64) as `musd_borrow_starts` ,\n                    cast(null as INT64) as `pool_liquidity_withdrawals` ,\n                    cast(null as INT64) as `musd_donations` ,\n                    cast(null as INT64) as `market_spend_starts` ,\n                    cast(null as INT64) as `musd_borrows` ,\n                    cast(null as INT64) as `items_purchased` ,\n                    cast(null as INT64) as `repay_loan_starts` ,\n                    cast(null as INT64) as `loans_repaid` ,\n                    cast(null as INT64) as `loan_increase_reduce_ratio` ,\n                    cast(null as INT64) as `increase_loan_starts` ,\n                    cast(null as INT64) as `loans_increased` ,\n                    cast(null as INT64) as `loan_collateral_deposits` ,\n                    cast(null as INT64) as `market_spend_completions` ,\n                    cast(null as INT64) as `loan_collateral_withdrawals` ,\n                    cast(null as INT64) as `withdraw_loan_collateral_starts` ,\n                    cast(null as INT64) as `deposit_loan_collateral_starts` ,\n                    cast(null as INT64) as `borrow_more_balance_confirmations` ,\n                    cast(null as INT64) as `assets_swaps` ,\n                    cast(null as INT64) as `borrow_repay_starts` ,\n                    cast(null as INT64) as `borrow_repays` ,\n                    cast(null as INT64) as `market_donation_successes` ,\n                    cast(null as INT64) as `borrow_collateral_deposit_starts` ,\n                    cast(null as INT64) as `borrow_more_increase_coll` ,\n                    cast(null as INT64) as `borrow_more_strategy_increase_coll` ,\n                    cast(null as INT64) as `borrow_collateral_deposits` ,\n                    cast(null as INT64) as `borrow_more_button_clicks` ,\n                    cast(null as INT64) as `borrow_more_confirm_increase_coll` ,\n                    cast(null as INT64) as `llm_shares` ,\n                    cast(null as INT64) as `borrow_more_strategy_reduce_ratio` ,\n                    cast(null as INT64) as `session_duration_in_seconds` \n\n            from `mezo-portal-data`.`dbt_marts`.`fct_paid`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('''`mezo-portal-data`.`dbt_marts`.`fct_sessions`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as STRING) as `id` ,\n                    cast(`fk__dim1_users` as STRING) as `fk__dim1_users` ,\n                    cast(null as STRING) as `fk_transaction_hash` ,\n                    cast(null as STRING) as `fk__dim1_token` ,\n                    cast(null as FLOAT64) as `amount` ,\n                    cast(null as FLOAT64) as `token_usd_value` ,\n                    cast(null as INT64) as `asset_locked_count` ,\n                    cast(null as DATE) as `record_date` ,\n                    cast(null as INT64) as `donation_count` ,\n                    cast(null as INT64) as `recipient_brink_count` ,\n                    cast(null as INT64) as `recipient_shefi_count` ,\n                    cast(null as BIGNUMERIC) as `coll_gas_compensation` ,\n                    cast(null as BIGNUMERIC) as `gas_compensation` ,\n                    cast(null as NUMERIC) as `liquidated_principal` ,\n                    cast(null as NUMERIC) as `liquidated_interest` ,\n                    cast(null as NUMERIC) as `liquidated_collateral` ,\n                    cast(null as INT64) as `liquidation_count` ,\n                    cast(null as FLOAT64) as `collateral_usd_value` ,\n                    cast(null as NUMERIC) as `principal` ,\n                    cast(null as NUMERIC) as `interest` ,\n                    cast(null as NUMERIC) as `collateral` ,\n                    cast(null as NUMERIC) as `stake` ,\n                    cast(null as INT64) as `loan_count` ,\n                    cast(null as INT64) as `new_loan_count` ,\n                    cast(null as INT64) as `adjusted_loan_count` ,\n                    cast(null as INT64) as `closed_loan_count` ,\n                    cast(null as STRING) as `fk__dim1_products` ,\n                    cast(null as NUMERIC) as `price` ,\n                    cast(null as INT64) as `order_count` ,\n                    cast(null as FLOAT64) as `spend` ,\n                    cast(null as INT64) as `impressions` ,\n                    cast(null as INT64) as `clicks` ,\n                    cast(null as STRING) as `referrer_source` ,\n                    cast(null as STRING) as `referrer_medium` ,\n                    cast(`fk__fct_paid` as STRING) as `fk__fct_paid` ,\n                    cast(`fk__dim1_date` as DATE) as `fk__dim1_date` ,\n                    cast(`fk__dim1_campaign` as STRING) as `fk__dim1_campaign` ,\n                    cast(`fk_landingpage__dim1_page` as STRING) as `fk_landingpage__dim1_page` ,\n                    cast(`fk_exitpage__dim1_page` as STRING) as `fk_exitpage__dim1_page` ,\n                    cast(`fk__dim1_attribution` as STRING) as `fk__dim1_attribution` ,\n                    cast(`button_clicks` as INT64) as `button_clicks` ,\n                    cast(`page_views` as INT64) as `page_views` ,\n                    cast(`sign_ups` as INT64) as `sign_ups` ,\n                    cast(`wallet_connections` as INT64) as `wallet_connections` ,\n                    cast(`asset_swaps` as INT64) as `asset_swaps` ,\n                    cast(`sign_ins` as INT64) as `sign_ins` ,\n                    cast(`swap_assets_starts` as INT64) as `swap_assets_starts` ,\n                    cast(`sign_up_starts` as INT64) as `sign_up_starts` ,\n                    cast(`funds_additions` as INT64) as `funds_additions` ,\n                    cast(`pool_liquidity_additions` as INT64) as `pool_liquidity_additions` ,\n                    cast(`add_funds_starts` as INT64) as `add_funds_starts` ,\n                    cast(`vault_assets_starts` as INT64) as `vault_assets_starts` ,\n                    cast(`username_updates` as INT64) as `username_updates` ,\n                    cast(`assets_vaulted` as INT64) as `assets_vaulted` ,\n                    cast(`musd_borrow_starts` as INT64) as `musd_borrow_starts` ,\n                    cast(`pool_liquidity_withdrawals` as INT64) as `pool_liquidity_withdrawals` ,\n                    cast(`musd_donations` as INT64) as `musd_donations` ,\n                    cast(`market_spend_starts` as INT64) as `market_spend_starts` ,\n                    cast(`musd_borrows` as INT64) as `musd_borrows` ,\n                    cast(`items_purchased` as INT64) as `items_purchased` ,\n                    cast(`repay_loan_starts` as INT64) as `repay_loan_starts` ,\n                    cast(`loans_repaid` as INT64) as `loans_repaid` ,\n                    cast(`loan_increase_reduce_ratio` as INT64) as `loan_increase_reduce_ratio` ,\n                    cast(`increase_loan_starts` as INT64) as `increase_loan_starts` ,\n                    cast(`loans_increased` as INT64) as `loans_increased` ,\n                    cast(`loan_collateral_deposits` as INT64) as `loan_collateral_deposits` ,\n                    cast(`market_spend_completions` as INT64) as `market_spend_completions` ,\n                    cast(`loan_collateral_withdrawals` as INT64) as `loan_collateral_withdrawals` ,\n                    cast(`withdraw_loan_collateral_starts` as INT64) as `withdraw_loan_collateral_starts` ,\n                    cast(`deposit_loan_collateral_starts` as INT64) as `deposit_loan_collateral_starts` ,\n                    cast(`borrow_more_balance_confirmations` as INT64) as `borrow_more_balance_confirmations` ,\n                    cast(`assets_swaps` as INT64) as `assets_swaps` ,\n                    cast(`borrow_repay_starts` as INT64) as `borrow_repay_starts` ,\n                    cast(`borrow_repays` as INT64) as `borrow_repays` ,\n                    cast(`market_donation_successes` as INT64) as `market_donation_successes` ,\n                    cast(`borrow_collateral_deposit_starts` as INT64) as `borrow_collateral_deposit_starts` ,\n                    cast(`borrow_more_increase_coll` as INT64) as `borrow_more_increase_coll` ,\n                    cast(`borrow_more_strategy_increase_coll` as INT64) as `borrow_more_strategy_increase_coll` ,\n                    cast(`borrow_collateral_deposits` as INT64) as `borrow_collateral_deposits` ,\n                    cast(`borrow_more_button_clicks` as INT64) as `borrow_more_button_clicks` ,\n                    cast(`borrow_more_confirm_increase_coll` as INT64) as `borrow_more_confirm_increase_coll` ,\n                    cast(`llm_shares` as INT64) as `llm_shares` ,\n                    cast(`borrow_more_strategy_reduce_ratio` as INT64) as `borrow_more_strategy_reduce_ratio` ,\n                    cast(`session_duration_in_seconds` as INT64) as `session_duration_in_seconds` \n\n            from `mezo-portal-data`.`dbt_marts`.`fct_sessions`\n\n            \n        )\n\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.dim1_page": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "dim1_page", "resource_type": "model", "package_name": "mezo", "path": "80_marts/dim1_page.sql", "original_file_path": "models/80_marts/dim1_page.sql", "unique_id": "model.mezo.dim1_page", "fqn": ["mezo", "80_marts", "dim1_page"], "alias": "dim1_page", "checksum": {"name": "sha256", "checksum": "edf7246ba33e6276df22f7a521cd9280932e90ea5a7e1a7c33da5b6a85b01a86"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Dimension table for pages.", "columns": {"id": {"name": "id", "description": "The unique identifier for the page", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/dim1_page.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.878056, "relation_name": "`mezo-portal-data`.`dbt_marts`.`dim1_page`", "raw_code": "with\n    segment_sessions as (select * from {{ ref(\"int_segment__sessions\") }}),\n\n    all_pages as (\n        select exit_page_url_without_query_string as id\n        from segment_sessions\n        where exit_page_url_without_query_string is not null\n        union all\n        select landing_page_url_without_query_string as id\n        from segment_sessions\n        where landing_page_url_without_query_string is not null\n    ),\n\n    make_unique as (\n        select id\n        from all_pages\n        qualify row_number() over (partition by id order by id) = 1\n    )\n\nselect *\nfrom make_unique", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_segment__sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_page.sql", "compiled": true, "compiled_code": "with\n    segment_sessions as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions`),\n\n    all_pages as (\n        select exit_page_url_without_query_string as id\n        from segment_sessions\n        where exit_page_url_without_query_string is not null\n        union all\n        select landing_page_url_without_query_string as id\n        from segment_sessions\n        where landing_page_url_without_query_string is not null\n    ),\n\n    make_unique as (\n        select id\n        from all_pages\n        qualify row_number() over (partition by id order by id) = 1\n    )\n\nselect *\nfrom make_unique", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.fct_orders": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "fct_orders", "resource_type": "model", "package_name": "mezo", "path": "80_marts/fct_orders.sql", "original_file_path": "models/80_marts/fct_orders.sql", "unique_id": "model.mezo.fct_orders", "fqn": ["mezo", "80_marts", "fct_orders"], "alias": "fct_orders", "checksum": {"name": "sha256", "checksum": "21c5e8dcd912c1428b65a408cf904a96059138bf8e626fcadef8c0fe98538ede"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Fact table for orders.", "columns": {"id": {"name": "id", "description": "Unique identifier for the order record.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_users": {"name": "fk__dim1_users", "description": "Foreign key to Users dimension (Canonical Segment ID). Links the order to a unified user profile.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_transaction_hash": {"name": "fk_transaction_hash", "description": "Hash of the transaction in which the order was placed.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_products": {"name": "fk__dim1_products", "description": "Foreign key to Products dimension. Identifies the product associated with the order.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "Price of the order, expressed in normalized currency.", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_count": {"name": "order_count", "description": "Number of orders represented in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_date": {"name": "record_date", "description": "Date of the record, used for time-based analysis.", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/fct_orders.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.8848572, "relation_name": "`mezo-portal-data`.`dbt_marts`.`fct_orders`", "raw_code": "with\n    orders as (select * from {{ ref(\"int_goldsky_market_mezo__order_placed_graph\") }}),\n\n    filtered_order as (\n        select\n            order_id as id,\n            canonical_segment_id as fk__dim1_users,\n            transaction_hash as fk_transaction_hash,\n            product_id as fk__dim1_products,\n            price,\n            1 as order_count,\n            date(record_timestamp) as record_date\n        from orders\n    )\n\nselect *\nfrom filtered_order", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed_graph", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed_graph"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_orders.sql", "compiled": true, "compiled_code": "with\n    orders as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed_graph`),\n\n    filtered_order as (\n        select\n            order_id as id,\n            canonical_segment_id as fk__dim1_users,\n            transaction_hash as fk_transaction_hash,\n            product_id as fk__dim1_products,\n            price,\n            1 as order_count,\n            date(record_timestamp) as record_date\n        from orders\n    )\n\nselect *\nfrom filtered_order", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.fct_liquidation": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "fct_liquidation", "resource_type": "model", "package_name": "mezo", "path": "80_marts/fct_liquidation.sql", "original_file_path": "models/80_marts/fct_liquidation.sql", "unique_id": "model.mezo.fct_liquidation", "fqn": ["mezo", "80_marts", "fct_liquidation"], "alias": "fct_liquidation", "checksum": {"name": "sha256", "checksum": "4df41b0f348a5f1477d6b7723ac2b71433605d925e454c294393613f9a4be715"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Fact table for liquidations.", "columns": {"id": {"name": "id", "description": "Unique identifier for the liquidation event.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_transaction_hash": {"name": "fk_transaction_hash", "description": "Hash of the transaction that executed the liquidation.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_users": {"name": "fk__dim1_users", "description": "Foreign key to Users dimension (Canonical Segment ID). Links this liquidation event to the unified user profile.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coll_gas_compensation": {"name": "coll_gas_compensation", "description": "Gas compensation related specifically to the collateral in the liquidation process.", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gas_compensation": {"name": "gas_compensation", "description": "General gas compensation awarded for executing the liquidation transaction.", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_principal": {"name": "liquidated_principal", "description": "Amount of principal debt that was liquidated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_interest": {"name": "liquidated_interest", "description": "Amount of interest that was liquidated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_collateral": {"name": "liquidated_collateral", "description": "Amount of collateral that was liquidated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidation_count": {"name": "liquidation_count", "description": "Count of liquidation events represented in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_date": {"name": "record_date", "description": "Date of the liquidation event, used for time-based analysis.", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/fct_liquidation.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.7725675, "relation_name": "`mezo-portal-data`.`dbt_marts`.`fct_liquidation`", "raw_code": "with\n    liquidation as (\n        select * from {{ ref(\"int_goldsky_musd_trove_manager__liquidation_graph\") }}\n    ),\n\n    filtered_liquidation as (\n        select\n            id,\n            transaction_hash as fk_transaction_hash,\n            canonical_segment_id as fk__dim1_users,\n            coll_gas_compensation,\n            gas_compensation,\n            liquidated_principal,\n            liquidated_interest,\n            liquidated_collateral,\n            1 as liquidation_count,\n            date(record_timestamp) as record_date\n        from liquidation\n    )\n\nselect *\nfrom filtered_liquidation", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_musd_trove_manager__liquidation_graph", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_goldsky_musd_trove_manager__liquidation_graph"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_liquidation.sql", "compiled": true, "compiled_code": "with\n    liquidation as (\n        select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_musd_trove_manager__liquidation_graph`\n    ),\n\n    filtered_liquidation as (\n        select\n            id,\n            transaction_hash as fk_transaction_hash,\n            canonical_segment_id as fk__dim1_users,\n            coll_gas_compensation,\n            gas_compensation,\n            liquidated_principal,\n            liquidated_interest,\n            liquidated_collateral,\n            1 as liquidation_count,\n            date(record_timestamp) as record_date\n        from liquidation\n    )\n\nselect *\nfrom filtered_liquidation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.fct_donated": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "fct_donated", "resource_type": "model", "package_name": "mezo", "path": "80_marts/fct_donated.sql", "original_file_path": "models/80_marts/fct_donated.sql", "unique_id": "model.mezo.fct_donated", "fqn": ["mezo", "80_marts", "fct_donated"], "alias": "fct_donated", "checksum": {"name": "sha256", "checksum": "ae6dd3712131195d932842ca9bc06f0ef08487ca1d7ad9e16f63d84d4f8f855f"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Fact table for donations.", "columns": {"id": {"name": "id", "description": "Unique identifier for this donation record.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_users": {"name": "fk__dim1_users", "description": "Foreign key to Users dimension (Canonical Segment ID). Links the donation to the unified user profile.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount that was donated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "donation_count": {"name": "donation_count", "description": "Count of donation events included in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_date": {"name": "record_date", "description": "Date of the donation record, used for time-based analysis.", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient_brink_count": {"name": "recipient_brink_count", "description": "Count of donations where the recipient was categorized as \"Brink\".", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient_shefi_count": {"name": "recipient_shefi_count", "description": "Count of donations where the recipient was categorized as \"Shefi\".", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/fct_donated.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.8401492, "relation_name": "`mezo-portal-data`.`dbt_marts`.`fct_donated`", "raw_code": "with\n    donated as (select * from {{ ref(\"int_goldsky_market_mezo__donated_graph\") }}),\n\n    filtered_donated as (\n        select\n            transaction_hash as id,\n            canonical_segment_id as fk__dim1_users,\n            amount,\n            1 as donation_count,\n            date(record_timestamp) as record_date,\n            case when recipient = 'Brink' then 1 else 0 end as recipient_brink_count,\n            case when recipient = 'SheFi' then 1 else 0 end as recipient_shefi_count\n        from donated\n    )\n\nselect *\nfrom filtered_donated", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__donated_graph", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_goldsky_market_mezo__donated_graph"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_donated.sql", "compiled": true, "compiled_code": "with\n    donated as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__donated_graph`),\n\n    filtered_donated as (\n        select\n            transaction_hash as id,\n            canonical_segment_id as fk__dim1_users,\n            amount,\n            1 as donation_count,\n            date(record_timestamp) as record_date,\n            case when recipient = 'Brink' then 1 else 0 end as recipient_brink_count,\n            case when recipient = 'SheFi' then 1 else 0 end as recipient_shefi_count\n        from donated\n    )\n\nselect *\nfrom filtered_donated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.fct_assets_locked": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "fct_assets_locked", "resource_type": "model", "package_name": "mezo", "path": "80_marts/fct_assets_locked.sql", "original_file_path": "models/80_marts/fct_assets_locked.sql", "unique_id": "model.mezo.fct_assets_locked", "fqn": ["mezo", "80_marts", "fct_assets_locked"], "alias": "fct_assets_locked", "checksum": {"name": "sha256", "checksum": "1e8c84b1e42bfff5b473ff85d364736f8334c01292f82798153a36c81e084e03"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Fact table for assets locked events.", "columns": {"id": {"name": "id", "description": "Unique identifier for this price record", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_users": {"name": "fk__dim1_users", "description": "Foreign key to Users dimension (Canonical Segment ID). Links this record to the unified user profile.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_transaction_hash": {"name": "fk_transaction_hash", "description": "Hash of the transaction that emitted this event.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_token": {"name": "fk__dim1_token", "description": "Foreign key to Token dimension. Identifies the token that was locked", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount of tokens locked (normalized based on token decimals)", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_usd_value": {"name": "token_usd_value", "description": "USD value of the locked tokens at the time of the event.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_locked_count": {"name": "asset_locked_count", "description": "Count of asset lock events included in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_date": {"name": "record_date", "description": "Date of the record, used for time-based analysis.", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/fct_assets_locked.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.8980336, "relation_name": "`mezo-portal-data`.`dbt_marts`.`fct_assets_locked`", "raw_code": "with\n    asset_locked as (\n        select * from {{ ref(\"int_goldsky_mezo_bridge_mainnet__assets_locked_graph\") }}\n    ),\n\n    filtered_assets_locked as (\n        select\n            sequence_number as id,\n            canonical_segment_id as fk__dim1_users,\n            transaction_hash as fk_transaction_hash,\n            token_id as fk__dim1_token,\n            amount,\n            token_usd_value,\n            1 as asset_locked_count,\n            date(record_timestamp) as record_date\n\n        from asset_locked\n    )\n\nselect *\nfrom filtered_assets_locked", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_mezo_bridge_mainnet__assets_locked_graph", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_assets_locked.sql", "compiled": true, "compiled_code": "with\n    asset_locked as (\n        select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_mezo_bridge_mainnet__assets_locked_graph`\n    ),\n\n    filtered_assets_locked as (\n        select\n            sequence_number as id,\n            canonical_segment_id as fk__dim1_users,\n            transaction_hash as fk_transaction_hash,\n            token_id as fk__dim1_token,\n            amount,\n            token_usd_value,\n            1 as asset_locked_count,\n            date(record_timestamp) as record_date\n\n        from asset_locked\n    )\n\nselect *\nfrom filtered_assets_locked", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id"], "time_spine": null}, "model.mezo.rep_marketing": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "rep_marketing", "resource_type": "model", "package_name": "mezo", "path": "80_marts/rep_marketing.sql", "original_file_path": "models/80_marts/rep_marketing.sql", "unique_id": "model.mezo.rep_marketing", "fqn": ["mezo", "80_marts", "rep_marketing"], "alias": "rep_marketing", "checksum": {"name": "sha256", "checksum": "a8fd2c0191194c32e1d2c249fae437d60f342bc5773615a8f45d78653613aab1"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "Union all fact tables.", "columns": {"id": {"name": "id", "description": "Unique identifier.", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_users": {"name": "fk__dim1_users", "description": "Foreign key to Users dimension (Canonical Segment ID). Links this record to the unified user profile.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_transaction_hash": {"name": "fk_transaction_hash", "description": "Hash of the transaction that emitted this event.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_token": {"name": "fk__dim1_token", "description": "Foreign key to Token dimension. Identifies the token that was locked", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount of tokens locked (normalized based on token decimals)", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_usd_value": {"name": "token_usd_value", "description": "USD value of the locked tokens at the time of the event.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_locked_count": {"name": "asset_locked_count", "description": "Count of asset lock events included in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "record_date": {"name": "record_date", "description": "Date of the record, used for time-based analysis.", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "donation_count": {"name": "donation_count", "description": "Count of donation events included in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient_brink_count": {"name": "recipient_brink_count", "description": "Count of donations where the recipient was categorized as \"Brink\".", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient_shefi_count": {"name": "recipient_shefi_count", "description": "Count of donations where the recipient was categorized as \"Shefi\".", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coll_gas_compensation": {"name": "coll_gas_compensation", "description": "Gas compensation related specifically to the collateral in the liquidation process.", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gas_compensation": {"name": "gas_compensation", "description": "General gas compensation awarded for executing the liquidation transaction.", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_principal": {"name": "liquidated_principal", "description": "Amount of principal debt that was liquidated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_interest": {"name": "liquidated_interest", "description": "Amount of interest that was liquidated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_collateral": {"name": "liquidated_collateral", "description": "Amount of collateral that was liquidated (normalized currency).", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidation_count": {"name": "liquidation_count", "description": "Count of liquidation events represented in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral_usd_value": {"name": "collateral_usd_value", "description": "USD value of the collateral backing the loan.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "principal": {"name": "principal", "description": "Debt principal after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "interest": {"name": "interest", "description": "Accrued interest after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "collateral": {"name": "collateral", "description": "Collateral locked after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stake": {"name": "stake", "description": "Borrower stake after the operation.", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_count": {"name": "loan_count", "description": "Total number of loans represented in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "new_loan_count": {"name": "new_loan_count", "description": "Count of newly opened loans on the given record date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "adjusted_loan_count": {"name": "adjusted_loan_count", "description": "Count of existing loans that were adjusted (e.g., collateral or terms changed).", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "closed_loan_count": {"name": "closed_loan_count", "description": "Count of loans that were fully closed or repaid on the given record date.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_products": {"name": "fk__dim1_products", "description": "Foreign key to Products dimension. Identifies the product associated with the order.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "Price of the order, expressed in normalized currency.", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_count": {"name": "order_count", "description": "Number of orders represented in this record.", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount spent on the campaign", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions for the campaign", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks for the campaign", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__fct_paid": {"name": "fk__fct_paid", "description": "The unique identifier for the session", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_date": {"name": "fk__dim1_date", "description": "Foreign key to the DATE dimension", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_campaign": {"name": "fk__dim1_campaign", "description": "Foreign key to the campaign dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_landingpage__dim1_page": {"name": "fk_landingpage__dim1_page", "description": "Foreign key to the landing page dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk_exitpage__dim1_page": {"name": "fk_exitpage__dim1_page", "description": "Foreign key to the exit page dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "fk__dim1_attribution": {"name": "fk__dim1_attribution", "description": "Foreign key to the attribution dimension", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "button_clicks": {"name": "button_clicks", "description": "Count of button click events in the session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "page_views": {"name": "page_views", "description": "The number of pages viewed during the session", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ups": {"name": "sign_ups", "description": "Count of completed sign-up events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "wallet_connections": {"name": "wallet_connections", "description": "Count of wallet connection events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "asset_swaps": {"name": "asset_swaps", "description": "Count of asset swap events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_ins": {"name": "sign_ins", "description": "Count of completed sign-in events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "swap_assets_starts": {"name": "swap_assets_starts", "description": "Count of asset swap start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sign_up_starts": {"name": "sign_up_starts", "description": "Count of sign-up start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funds_additions": {"name": "funds_additions", "description": "Count of funds added events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_additions": {"name": "pool_liquidity_additions", "description": "Count of liquidity pool additions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "add_funds_starts": {"name": "add_funds_starts", "description": "Count of add-funds start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "vault_assets_starts": {"name": "vault_assets_starts", "description": "Count of vault asset start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "username_updates": {"name": "username_updates", "description": "Count of username update events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_vaulted": {"name": "assets_vaulted", "description": "Count of vaulted asset events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrow_starts": {"name": "musd_borrow_starts", "description": "Count of mUSD borrow start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "pool_liquidity_withdrawals": {"name": "pool_liquidity_withdrawals", "description": "Count of liquidity pool withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_donations": {"name": "musd_donations", "description": "Count of mUSD donation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_starts": {"name": "market_spend_starts", "description": "Count of market spend start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "musd_borrows": {"name": "musd_borrows", "description": "Count of mUSD borrow events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "items_purchased": {"name": "items_purchased", "description": "Count of purchase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "repay_loan_starts": {"name": "repay_loan_starts", "description": "Count of repay loan start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_repaid": {"name": "loans_repaid", "description": "Count of loan repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_increase_reduce_ratio": {"name": "loan_increase_reduce_ratio", "description": "Ratio metric for loan increase/reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "increase_loan_starts": {"name": "increase_loan_starts", "description": "Count of loan increase start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loans_increased": {"name": "loans_increased", "description": "Count of loan increase events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_deposits": {"name": "loan_collateral_deposits", "description": "Count of loan collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_spend_completions": {"name": "market_spend_completions", "description": "Count of completed market spend events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loan_collateral_withdrawals": {"name": "loan_collateral_withdrawals", "description": "Count of loan collateral withdrawal events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "withdraw_loan_collateral_starts": {"name": "withdraw_loan_collateral_starts", "description": "Count of withdraw loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deposit_loan_collateral_starts": {"name": "deposit_loan_collateral_starts", "description": "Count of deposit loan collateral start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_balance_confirmations": {"name": "borrow_more_balance_confirmations", "description": "Count of borrow-more balance confirmation events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "assets_swaps": {"name": "assets_swaps", "description": "Count of asset swap events (alternate metric)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repay_starts": {"name": "borrow_repay_starts", "description": "Count of borrow repay start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_repays": {"name": "borrow_repays", "description": "Count of borrow repayment events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "market_donation_successes": {"name": "market_donation_successes", "description": "Count of successful market donations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposit_starts": {"name": "borrow_collateral_deposit_starts", "description": "Count of borrow collateral deposit start events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_increase_coll": {"name": "borrow_more_increase_coll", "description": "Count of borrow-more increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_increase_coll": {"name": "borrow_more_strategy_increase_coll", "description": "Count of borrow-more strategy increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_collateral_deposits": {"name": "borrow_collateral_deposits", "description": "Count of borrow collateral deposit events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_button_clicks": {"name": "borrow_more_button_clicks", "description": "Count of borrow-more button click events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_confirm_increase_coll": {"name": "borrow_more_confirm_increase_coll", "description": "Count of borrow-more confirm increase collateral events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "llm_shares": {"name": "llm_shares", "description": "Count of LLM share events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrow_more_strategy_reduce_ratio": {"name": "borrow_more_strategy_reduce_ratio", "description": "Ratio metric for borrow-more strategy reduction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "session_duration_in_seconds": {"name": "session_duration_in_seconds", "description": "The duration of the session in seconds", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source_paid": {"name": "referrer_source_paid", "description": "Paid-channel original referrer source (e.g., google, facebook, newsletter).", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium_paid": {"name": "referrer_medium_paid", "description": "Paid-channel original referrer medium (e.g., cpc, email, referral, social).", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_source": {"name": "referrer_source", "description": "Original referrer source (e.g., google, facebook, newsletter).", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer_medium": {"name": "referrer_medium", "description": "Original referrer medium (e.g., cpc, email, referral, social).", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "The name of the product.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_symbol": {"name": "token_symbol", "description": "The symbol for the token", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_address": {"name": "token_address", "description": "The address identifier for the token", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token_name": {"name": "token_name", "description": "The name of the token", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_touch_time": {"name": "first_touch_time", "description": "Timestamp of the first session.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_touch_source": {"name": "first_touch_source", "description": "Source of the first touch (e.g. referrer source).", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_touch_medium": {"name": "first_touch_medium", "description": "Medium of the first touch (e.g. referrer medium).", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/rep_marketing.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.9163895, "relation_name": "`mezo-portal-data`.`dbt_marts`.`rep_marketing`", "raw_code": "with\n    facts as (select * from {{ ref(\"fct_all_facts\") }}),\n\n    attribution as (select * from {{ ref(\"dim1_attribution\") }}),\n\n    campaign as (select * from {{ ref(\"dim1_campaign\") }}),\n\n    products as (select * from {{ ref(\"dim1_products\") }}),\n\n    token as (select * from {{ ref(\"dim1_token\") }}),\n\n    users as (select * from {{ ref(\"dim1_users\") }})\n\nselect\n    facts.* except (referrer_source, referrer_medium),\n    a.* except (id),\n    c.* except (id),\n    pr.* except (id),\n    t.* except (id),\n    u.* except (canonical_segment_id),\n    facts.referrer_source as referrer_source_paid,\n    facts.referrer_medium as referrer_medium_paid\nfrom facts\nleft join attribution as a on facts.fk__dim1_attribution = a.id\nleft join campaign as c on facts.fk__dim1_campaign = c.id\nleft join products as pr on facts.fk__dim1_products = pr.id\nleft join token as t on facts.fk__dim1_token = t.id\nleft join users as u on facts.fk__dim1_users = u.canonical_segment_id", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_all_facts", "package": null, "version": null}, {"name": "dim1_attribution", "package": null, "version": null}, {"name": "dim1_campaign", "package": null, "version": null}, {"name": "dim1_products", "package": null, "version": null}, {"name": "dim1_token", "package": null, "version": null}, {"name": "dim1_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.fct_all_facts", "model.mezo.dim1_attribution", "model.mezo.dim1_campaign", "model.mezo.dim1_products", "model.mezo.dim1_token", "model.mezo.dim1_users"]}, "compiled_path": "target/compiled/mezo/models/80_marts/rep_marketing.sql", "compiled": true, "compiled_code": "with\n    facts as (select * from `mezo-portal-data`.`dbt_marts`.`fct_all_facts`),\n\n    attribution as (select * from `mezo-portal-data`.`dbt_marts`.`dim1_attribution`),\n\n    campaign as (select * from `mezo-portal-data`.`dbt_marts`.`dim1_campaign`),\n\n    products as (select * from `mezo-portal-data`.`dbt_marts`.`dim1_products`),\n\n    token as (select * from `mezo-portal-data`.`dbt_marts`.`dim1_token`),\n\n    users as (select * from `mezo-portal-data`.`dbt_marts`.`dim1_users`)\n\nselect\n    facts.* except (referrer_source, referrer_medium),\n    a.* except (id),\n    c.* except (id),\n    pr.* except (id),\n    t.* except (id),\n    u.* except (canonical_segment_id),\n    facts.referrer_source as referrer_source_paid,\n    facts.referrer_medium as referrer_medium_paid\nfrom facts\nleft join attribution as a on facts.fk__dim1_attribution = a.id\nleft join campaign as c on facts.fk__dim1_campaign = c.id\nleft join products as pr on facts.fk__dim1_products = pr.id\nleft join token as t on facts.fk__dim1_token = t.id\nleft join users as u on facts.fk__dim1_users = u.canonical_segment_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.mezo.dim1_users": {"database": "mezo-portal-data", "schema": "dbt_marts", "name": "dim1_users", "resource_type": "model", "package_name": "mezo", "path": "80_marts/dim1_users.sql", "original_file_path": "models/80_marts/dim1_users.sql", "unique_id": "model.mezo.dim1_users", "fqn": ["mezo", "80_marts", "dim1_users"], "alias": "dim1_users", "checksum": {"name": "sha256", "checksum": "3d6db2434a96d220144bee36f0ba840f7443ba7bddf803299929a50c0ed6fee0"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null, "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "dbt-osmosis": "{model}.yml", "timeout": 3000}, "tags": [], "description": "User dimension table with first-touch attribution, based on sessions.", "columns": {"canonical_segment_id": {"name": "canonical_segment_id", "description": "Canonical Segment ID, with fallback if mapping is missing.", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_touch_time": {"name": "first_touch_time", "description": "Timestamp of the first session.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_touch_source": {"name": "first_touch_source", "description": "Source of the first touch (e.g. referrer source).", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "first_touch_medium": {"name": "first_touch_medium", "description": "Medium of the first touch (e.g. referrer medium).", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://models/80_marts/dim1_users.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml", "submission_method": "bigframes", "notebook_template_id": 6574243905263370240, "packages": [], "timeout": 3000, "schema": "marts", "materialized": "table"}, "created_at": 1759221506.881224, "relation_name": "`mezo-portal-data`.`dbt_marts`.`dim1_users`", "raw_code": "with\n    first_touch_point as (\n        select * from {{ ref(\"int_segment__sessions_first_touch_point\") }}\n    ),\n\n    assets_locked as (\n        select * from {{ ref(\"int_goldsky_mezo_bridge_mainnet__assets_locked_graph\") }}\n    ),\n\n    loans as (\n        select * from {{ ref(\"int_goldsky_borrower_operations_mezo__loans_graph\") }}\n    ),\n\n    donations as (select * from {{ ref(\"int_goldsky_market_mezo__donated_graph\") }}),\n\n    orders as (select * from {{ ref(\"int_goldsky_market_mezo__order_placed_graph\") }}),\n\n    filtered_first_touch_point as (\n        select\n            canonical_segment_id,\n            first_touch_time,\n            first_touch_source,\n            first_touch_medium\n        from first_touch_point\n    ),\n\n    filtered_assets_locked as (\n        select\n            canonical_segment_id,\n            min(record_timestamp) as first_touch_time,\n            'unknown' as first_touch_source,\n            'unknown' as first_touch_medium\n        from assets_locked\n        group by 1\n    ),\n\n    filtered_loans as (\n        select\n            canonical_segment_id,\n            min(record_timestamp) as first_touch_time,\n            'unknown' as first_touch_source,\n            'unknown' as first_touch_medium\n        from loans\n        group by 1\n    ),\n\n    filtered_donations as (\n        select\n            canonical_segment_id,\n            min(record_timestamp) as first_touch_time,\n            'unknown' as first_touch_source,\n            'unknown' as first_touch_medium\n        from donations\n        group by 1\n    ),\n\n    filtered_orders as (\n        select\n            canonical_segment_id,\n            min(record_timestamp) as first_touch_time,\n            'unknown' as first_touch_source,\n            'unknown' as first_touch_medium\n        from orders\n        group by 1\n    ),\n\n    combined as (\n        select *\n        from filtered_first_touch_point\n        union distinct\n        select *\n        from filtered_assets_locked\n        union distinct\n        select *\n        from filtered_loans\n        union distinct\n        select *\n        from filtered_donations\n        union distinct\n        select *\n        from filtered_orders\n    ),\n\n    deduplicated as (\n        select *\n        from combined\n        qualify\n            row_number() over (\n                partition by canonical_segment_id order by first_touch_time\n            )\n            = 1\n    )\n\nselect *\nfrom deduplicated", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment__sessions_first_touch_point", "package": null, "version": null}, {"name": "int_goldsky_mezo_bridge_mainnet__assets_locked_graph", "package": null, "version": null}, {"name": "int_goldsky_borrower_operations_mezo__loans_graph", "package": null, "version": null}, {"name": "int_goldsky_market_mezo__donated_graph", "package": null, "version": null}, {"name": "int_goldsky_market_mezo__order_placed_graph", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mezo.int_segment__sessions_first_touch_point", "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph", "model.mezo.int_goldsky_borrower_operations_mezo__loans_graph", "model.mezo.int_goldsky_market_mezo__donated_graph", "model.mezo.int_goldsky_market_mezo__order_placed_graph"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_users.sql", "compiled": true, "compiled_code": "with\n    first_touch_point as (\n        select * from `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions_first_touch_point`\n    ),\n\n    assets_locked as (\n        select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_mezo_bridge_mainnet__assets_locked_graph`\n    ),\n\n    loans as (\n        select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_borrower_operations_mezo__loans_graph`\n    ),\n\n    donations as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__donated_graph`),\n\n    orders as (select * from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed_graph`),\n\n    filtered_first_touch_point as (\n        select\n            canonical_segment_id,\n            first_touch_time,\n            first_touch_source,\n            first_touch_medium\n        from first_touch_point\n    ),\n\n    filtered_assets_locked as (\n        select\n            canonical_segment_id,\n            min(record_timestamp) as first_touch_time,\n            'unknown' as first_touch_source,\n            'unknown' as first_touch_medium\n        from assets_locked\n        group by 1\n    ),\n\n    filtered_loans as (\n        select\n            canonical_segment_id,\n            min(record_timestamp) as first_touch_time,\n            'unknown' as first_touch_source,\n            'unknown' as first_touch_medium\n        from loans\n        group by 1\n    ),\n\n    filtered_donations as (\n        select\n            canonical_segment_id,\n            min(record_timestamp) as first_touch_time,\n            'unknown' as first_touch_source,\n            'unknown' as first_touch_medium\n        from donations\n        group by 1\n    ),\n\n    filtered_orders as (\n        select\n            canonical_segment_id,\n            min(record_timestamp) as first_touch_time,\n            'unknown' as first_touch_source,\n            'unknown' as first_touch_medium\n        from orders\n        group by 1\n    ),\n\n    combined as (\n        select *\n        from filtered_first_touch_point\n        union distinct\n        select *\n        from filtered_assets_locked\n        union distinct\n        select *\n        from filtered_loans\n        union distinct\n        select *\n        from filtered_donations\n        union distinct\n        select *\n        from filtered_orders\n    ),\n\n    deduplicated as (\n        select *\n        from combined\n        qualify\n            row_number() over (\n                partition by canonical_segment_id order by first_touch_time\n            )\n            = 1\n    )\n\nselect *\nfrom deduplicated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["canonical_segment_id"], "time_spine": null}, "seed.mezo.musd_market_map": {"database": "mezo-portal-data", "schema": "dbt", "name": "musd_market_map", "resource_type": "seed", "package_name": "mezo", "path": "musd_market_map.csv", "original_file_path": "seeds/musd_market_map.csv", "unique_id": "seed.mezo.musd_market_map", "fqn": ["mezo", "musd_market_map"], "alias": "musd_market_map", "checksum": {"name": "sha256", "checksum": "3749f1945d660478ec2e0bc60d77f29bcbb2ef10db362a1f85e7464965bbe968"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null, "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://seeds/musd_market_map.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml"}, "created_at": 1759221506.5327241, "relation_name": "`mezo-portal-data`.`dbt`.`musd_market_map`", "raw_code": "", "doc_blocks": [], "root_path": ".", "depends_on": {"macros": []}}, "seed.mezo.referrer_mapping": {"database": "mezo-portal-data", "schema": "dbt", "name": "referrer_mapping", "resource_type": "seed", "package_name": "mezo", "path": "referrer_mapping.csv", "original_file_path": "seeds/referrer_mapping.csv", "unique_id": "seed.mezo.referrer_mapping", "fqn": ["mezo", "referrer_mapping"], "alias": "referrer_mapping", "checksum": {"name": "sha256", "checksum": "ed530adbd9a7695349ae3ad79132be909aa085f0e1713368ec36809150d8e0dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null, "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "This is a CSV version of Snowplow's [referer parser database](https://github.com/snowplow-referer-parser/referer-parser)", "columns": {"medium": {"name": "medium", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "source": {"name": "source", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "host": {"name": "host", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "mezo://seeds/referrer_mapping.yml", "build_path": null, "unrendered_config": {"dbt-osmosis": "{model}.yml"}, "created_at": 1759221506.4520845, "relation_name": "`mezo-portal-data`.`dbt`.`referrer_mapping`", "raw_code": "", "doc_blocks": [], "root_path": ".", "depends_on": {"macros": []}}, "model.twitter_ads.twitter_ads__url_report": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "twitter_ads__url_report", "resource_type": "model", "package_name": "twitter_ads", "path": "twitter_ads__url_report.sql", "original_file_path": "models/twitter_ads__url_report.sql", "unique_id": "model.twitter_ads.twitter_ads__url_report", "fqn": ["twitter_ads", "twitter_ads__url_report"], "alias": "twitter_ads__url_report", "checksum": {"name": "sha256", "checksum": "cdbbd620fb2a055c800fca2fa8925211dc496036c948ac0ef53826b0a55e7032"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record in this table represents the daily performance of ads at the account, campaign, line item (ad group), promoted tweet, and url level, within a placement in Twitter.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item (ad group).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_name": {"name": "line_item_name", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the promoted tweet that the URL appeared in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_name": {"name": "tweet_name", "description": "The name, if provided, of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_full_text": {"name": "tweet_full_text", "description": "The full text of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet + URL on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet + URL on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the promoted tweet + URL on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The spend, in micros, for the tweet + URL on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The URL clicks for the promoted tweet + URL on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/twitter.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "table", "enabled": true}, "created_at": 1759221507.0455444, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`twitter_ads__url_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith report as (\n\n    select \n        *,\n        {# Let's sum up conversions into general fields for ease of use #}\n        {{ var('twitter_ads__conversion_fields') | join(' + ') if var('twitter_ads__conversion_fields') else 0 }} as total_conversions,\n        {{ var('twitter_ads__conversion_sale_amount_fields') | join(' + ') if var('twitter_ads__conversion_sale_amount_fields') else 0 }} as total_conversions_sale_amount\n\n    from {{ ref('stg_twitter_ads__promoted_tweet_report') }}\n),\n\ncampaigns as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history') }}\n    where is_latest_version\n),\n\nline_items as (\n\n    select *\n    from {{ ref('stg_twitter_ads__line_item_history') }}\n    where is_latest_version\n),\n\npromoted_tweets as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_history') }}\n    where is_latest_version\n),\n\ntweets as (\n\n    select *\n    from {{ ref('stg_twitter_ads__tweet') }}\n),\n\ntweet_url as (\n\n    select *\n    from {{ ref('stg_twitter_ads__tweet_url') }}\n    where index = 0\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        accounts.account_id,\n        accounts.name as account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        line_items.line_item_id,\n        line_items.name as line_item_name,\n        promoted_tweets.promoted_tweet_id,\n        promoted_tweets.tweet_id,\n        tweets.name as tweet_name,\n        tweets.full_text as tweet_full_text,\n        tweet_url.base_url,\n        tweet_url.url_host,\n        tweet_url.url_path,\n        tweet_url.utm_source,\n        tweet_url.utm_medium,\n        tweet_url.utm_campaign,\n        tweet_url.utm_content,\n        tweet_url.utm_term,\n        tweet_url.expanded_url,\n        tweet_url.display_url,\n        campaigns.currency,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        {# Persist all of the customizable fields #}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__promoted_tweet_report_passthrough_metrics') }}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_sale_amount_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__promoted_tweet_report_passthrough_metrics') }}\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__promoted_tweet_report_passthrough_metrics', transform='sum') }}\n\n    from report \n    left join promoted_tweets \n        on report.promoted_tweet_id = promoted_tweets.promoted_tweet_id\n        and report.source_relation = promoted_tweets.source_relation\n    left join tweet_url \n        on promoted_tweets.tweet_id = tweet_url.tweet_id\n        and promoted_tweets.source_relation = tweet_url.source_relation\n    left join tweets\n        on promoted_tweets.tweet_id = tweets.tweet_id\n        and promoted_tweets.source_relation = tweets.source_relation\n    left join line_items\n        on promoted_tweets.line_item_id = line_items.line_item_id\n        and promoted_tweets.source_relation = line_items.source_relation\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n        and line_items.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n    \n    {% if var('ad_reporting__url_report__using_null_filter', True) %}\n        where tweet_url.expanded_url is not null\n    {% endif %}\n\n    {{ dbt_utils.group_by(24) }}\n\n    \n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__promoted_tweet_report", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_history", "package": null, "version": null}, {"name": "stg_twitter_ads__account_history", "package": null, "version": null}, {"name": "stg_twitter_ads__line_item_history", "package": null, "version": null}, {"name": "stg_twitter_ads__promoted_tweet_history", "package": null, "version": null}, {"name": "stg_twitter_ads__tweet", "package": null, "version": null}, {"name": "stg_twitter_ads__tweet_url", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.twitter_ads_persist_pass_through_columns", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads.stg_twitter_ads__campaign_history", "model.twitter_ads.stg_twitter_ads__account_history", "model.twitter_ads.stg_twitter_ads__line_item_history", "model.twitter_ads.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads.stg_twitter_ads__tweet", "model.twitter_ads.stg_twitter_ads__tweet_url"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__url_report.sql", "compiled": true, "compiled_code": "\n\nwith report as (\n\n    select \n        *,\n        \n        conversion_purchases_metric + conversion_custom_metric as total_conversions,\n        conversion_purchases_sale_amount + conversion_custom_sale_amount as total_conversions_sale_amount\n\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_report`\n),\n\ncampaigns as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_history`\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\nline_items as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_history`\n    where is_latest_version\n),\n\npromoted_tweets as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_history`\n    where is_latest_version\n),\n\ntweets as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet`\n),\n\ntweet_url as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet_url`\n    where index = 0\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        accounts.account_id,\n        accounts.name as account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        line_items.line_item_id,\n        line_items.name as line_item_name,\n        promoted_tweets.promoted_tweet_id,\n        promoted_tweets.tweet_id,\n        tweets.name as tweet_name,\n        tweets.full_text as tweet_full_text,\n        tweet_url.base_url,\n        tweet_url.url_host,\n        tweet_url.url_path,\n        tweet_url.utm_source,\n        tweet_url.utm_medium,\n        tweet_url.utm_campaign,\n        tweet_url.utm_content,\n        tweet_url.utm_term,\n        tweet_url.expanded_url,\n        tweet_url.display_url,\n        campaigns.currency,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        \n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_metric, 0)) as conversion_purchases_metric\n        \n    \n        \n        , sum(coalesce(conversion_custom_metric, 0)) as conversion_custom_metric\n        \n    \n\n\n\n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_sale_amount, 0)) as conversion_purchases_sale_amount\n        \n    \n        \n        , sum(coalesce(conversion_custom_sale_amount, 0)) as conversion_custom_sale_amount\n        \n    \n\n\n\n        \n\n\n\n\n\n    from report \n    left join promoted_tweets \n        on report.promoted_tweet_id = promoted_tweets.promoted_tweet_id\n        and report.source_relation = promoted_tweets.source_relation\n    left join tweet_url \n        on promoted_tweets.tweet_id = tweet_url.tweet_id\n        and promoted_tweets.source_relation = tweet_url.source_relation\n    left join tweets\n        on promoted_tweets.tweet_id = tweets.tweet_id\n        and promoted_tweets.source_relation = tweets.source_relation\n    left join line_items\n        on promoted_tweets.line_item_id = line_items.line_item_id\n        and promoted_tweets.source_relation = line_items.source_relation\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n        and line_items.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n    \n    \n        where tweet_url.expanded_url is not null\n    \n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\n\n    \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.twitter_ads__campaign_report": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "twitter_ads__campaign_report", "resource_type": "model", "package_name": "twitter_ads", "path": "twitter_ads__campaign_report.sql", "original_file_path": "models/twitter_ads__campaign_report.sql", "unique_id": "model.twitter_ads.twitter_ads__campaign_report", "fqn": ["twitter_ads", "twitter_ads__campaign_report"], "alias": "twitter_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "83ec21dd1a14f586c35629703d9cbf532a15fa7177f64484d284c1a897e11370"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record in this table represents the daily performance of ads at the account and campaign level, within a placement in Twitter.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The amount of spend, in micros, on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "end_timestamp": {"name": "end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_servable": {"name": "is_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_standard_delivery": {"name": "is_standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_timestamp": {"name": "start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daily_budget_amount": {"name": "daily_budget_amount", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/twitter.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "table", "enabled": true}, "created_at": 1759221507.0297198, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`twitter_ads__campaign_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith report as (\n\n    select \n        *,\n        {# Let's sum up conversions into general fields for ease of use #}\n        {{ var('twitter_ads__conversion_fields') | join(' + ') if var('twitter_ads__conversion_fields') else 0 }} as total_conversions,\n        {{ var('twitter_ads__conversion_sale_amount_fields') | join(' + ') if var('twitter_ads__conversion_sale_amount_fields') else 0 }} as total_conversions_sale_amount\n\n    from {{ ref('stg_twitter_ads__campaign_report') }}\n),\n\ncampaigns as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history') }}\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.is_deleted,\n        campaigns.entity_status as campaign_status,\n        campaigns.currency,\n        campaigns.is_servable,\n        campaigns.is_standard_delivery,\n        campaigns.frequency_cap,\n        campaigns.start_timestamp,\n        campaigns.end_timestamp,\n        campaigns.created_timestamp,\n        campaigns.updated_timestamp,\n        campaigns.funding_instrument_id,\n        campaigns.daily_budget_amount,\n        campaigns.total_budget_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        {# Persist all of the customizable fields #}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__campaign_report_passthrough_metrics') }}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_sale_amount_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__campaign_report_passthrough_metrics') }}\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__campaign_report_passthrough_metrics', transform='sum') }}\n\n    from report \n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n        and report.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    {{ dbt_utils.group_by(20) }}\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_report", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_history", "package": null, "version": null}, {"name": "stg_twitter_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.twitter_ads_persist_pass_through_columns", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads.stg_twitter_ads__campaign_report", "model.twitter_ads.stg_twitter_ads__campaign_history", "model.twitter_ads.stg_twitter_ads__account_history"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__campaign_report.sql", "compiled": true, "compiled_code": "\n\nwith report as (\n\n    select \n        *,\n        \n        conversion_purchases_metric + conversion_custom_metric as total_conversions,\n        conversion_purchases_sale_amount + conversion_custom_sale_amount as total_conversions_sale_amount\n\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_report`\n),\n\ncampaigns as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_history`\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.is_deleted,\n        campaigns.entity_status as campaign_status,\n        campaigns.currency,\n        campaigns.is_servable,\n        campaigns.is_standard_delivery,\n        campaigns.frequency_cap,\n        campaigns.start_timestamp,\n        campaigns.end_timestamp,\n        campaigns.created_timestamp,\n        campaigns.updated_timestamp,\n        campaigns.funding_instrument_id,\n        campaigns.daily_budget_amount,\n        campaigns.total_budget_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        \n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_metric, 0)) as conversion_purchases_metric\n        \n    \n        \n        , sum(coalesce(conversion_custom_metric, 0)) as conversion_custom_metric\n        \n    \n\n\n\n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_sale_amount, 0)) as conversion_purchases_sale_amount\n        \n    \n        \n        , sum(coalesce(conversion_custom_sale_amount, 0)) as conversion_custom_sale_amount\n        \n    \n\n\n\n        \n\n\n\n\n\n    from report \n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n        and report.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.twitter_ads__promoted_tweet_report": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "twitter_ads__promoted_tweet_report", "resource_type": "model", "package_name": "twitter_ads", "path": "twitter_ads__promoted_tweet_report.sql", "original_file_path": "models/twitter_ads__promoted_tweet_report.sql", "unique_id": "model.twitter_ads.twitter_ads__promoted_tweet_report", "fqn": ["twitter_ads", "twitter_ads__promoted_tweet_report"], "alias": "twitter_ads__promoted_tweet_report", "checksum": {"name": "sha256", "checksum": "d8306a28ccee3a08ad07b3686cd92aa27db9ced0bb53ca40845d6517736e76cb"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record in this table represents the daily performance of ads at the account, campaign, line item (ad group), and promoted tweet level, within a placement in Twitter.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item (ad group).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_name": {"name": "line_item_name", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the promoted tweet that the URL appeared in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_name": {"name": "tweet_name", "description": "The name, if provided, of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "full_text": {"name": "full_text", "description": "The full text of the tweet that the URL appeared in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet + URL on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet + URL on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the promoted tweet + URL on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The spend, in micros, for the tweet + URL on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The URL clicks for the promoted tweet + URL on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "promoted_tweet_status": {"name": "promoted_tweet_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the tweet's campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_status": {"name": "line_item_status", "description": "The status of the tweet's line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "language": {"name": "language", "description": "Two-letter language code of the tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/twitter.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "table", "enabled": true}, "created_at": 1759221507.0425575, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`twitter_ads__promoted_tweet_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith report as (\n\n    select \n        *,\n        {# Let's sum up conversions into general fields for ease of use #}\n        {{ var('twitter_ads__conversion_fields') | join(' + ') if var('twitter_ads__conversion_fields') else 0 }} as total_conversions,\n        {{ var('twitter_ads__conversion_sale_amount_fields') | join(' + ') if var('twitter_ads__conversion_sale_amount_fields') else 0 }} as total_conversions_sale_amount\n\n    from {{ ref('stg_twitter_ads__promoted_tweet_report') }}\n),\n\ncampaigns as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history') }}\n    where is_latest_version\n),\n\nline_items as (\n\n    select *\n    from {{ ref('stg_twitter_ads__line_item_history') }}\n    where is_latest_version\n),\n\npromoted_tweets as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_history') }}\n    where is_latest_version\n),\n\ntweets as (\n\n    select *\n    from {{ ref('stg_twitter_ads__tweet') }}\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        accounts.account_id,\n        accounts.name as account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        line_items.line_item_id,\n        line_items.name as line_item_name,\n        promoted_tweets.promoted_tweet_id,\n        promoted_tweets.tweet_id,\n        tweets.name as tweet_name,\n        tweets.full_text,\n        promoted_tweets.is_deleted,\n        promoted_tweets.entity_status as promoted_tweet_status,\n        campaigns.entity_status as campaign_status,\n        line_items.entity_status as line_item_status,\n        tweets.language,\n        campaigns.currency,\n        promoted_tweets.approval_status,\n        promoted_tweets.created_timestamp,\n        promoted_tweets.updated_timestamp,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        {# Persist all of the customizable fields #}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__promoted_tweet_report_passthrough_metrics') }}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_sale_amount_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__promoted_tweet_report_passthrough_metrics') }}\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__promoted_tweet_report_passthrough_metrics', transform='sum') }}\n\n    from report \n    left join promoted_tweets \n        on report.promoted_tweet_id = promoted_tweets.promoted_tweet_id\n        and report.source_relation = promoted_tweets.source_relation\n    left join tweets\n        on promoted_tweets.tweet_id = tweets.tweet_id\n        and promoted_tweets.source_relation = tweets.source_relation\n    left join line_items\n        on promoted_tweets.line_item_id = line_items.line_item_id\n        and promoted_tweets.source_relation = line_items.source_relation\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n        and line_items.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    {{ dbt_utils.group_by(22) }}\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__promoted_tweet_report", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_history", "package": null, "version": null}, {"name": "stg_twitter_ads__account_history", "package": null, "version": null}, {"name": "stg_twitter_ads__line_item_history", "package": null, "version": null}, {"name": "stg_twitter_ads__promoted_tweet_history", "package": null, "version": null}, {"name": "stg_twitter_ads__tweet", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.twitter_ads_persist_pass_through_columns", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads.stg_twitter_ads__campaign_history", "model.twitter_ads.stg_twitter_ads__account_history", "model.twitter_ads.stg_twitter_ads__line_item_history", "model.twitter_ads.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads.stg_twitter_ads__tweet"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__promoted_tweet_report.sql", "compiled": true, "compiled_code": "\n\nwith report as (\n\n    select \n        *,\n        \n        conversion_purchases_metric + conversion_custom_metric as total_conversions,\n        conversion_purchases_sale_amount + conversion_custom_sale_amount as total_conversions_sale_amount\n\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_report`\n),\n\ncampaigns as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_history`\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\nline_items as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_history`\n    where is_latest_version\n),\n\npromoted_tweets as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_history`\n    where is_latest_version\n),\n\ntweets as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet`\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        accounts.account_id,\n        accounts.name as account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        line_items.line_item_id,\n        line_items.name as line_item_name,\n        promoted_tweets.promoted_tweet_id,\n        promoted_tweets.tweet_id,\n        tweets.name as tweet_name,\n        tweets.full_text,\n        promoted_tweets.is_deleted,\n        promoted_tweets.entity_status as promoted_tweet_status,\n        campaigns.entity_status as campaign_status,\n        line_items.entity_status as line_item_status,\n        tweets.language,\n        campaigns.currency,\n        promoted_tweets.approval_status,\n        promoted_tweets.created_timestamp,\n        promoted_tweets.updated_timestamp,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        \n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_metric, 0)) as conversion_purchases_metric\n        \n    \n        \n        , sum(coalesce(conversion_custom_metric, 0)) as conversion_custom_metric\n        \n    \n\n\n\n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_sale_amount, 0)) as conversion_purchases_sale_amount\n        \n    \n        \n        , sum(coalesce(conversion_custom_sale_amount, 0)) as conversion_custom_sale_amount\n        \n    \n\n\n\n        \n\n\n\n\n\n    from report \n    left join promoted_tweets \n        on report.promoted_tweet_id = promoted_tweets.promoted_tweet_id\n        and report.source_relation = promoted_tweets.source_relation\n    left join tweets\n        on promoted_tweets.tweet_id = tweets.tweet_id\n        and promoted_tweets.source_relation = tweets.source_relation\n    left join line_items\n        on promoted_tweets.line_item_id = line_items.line_item_id\n        and promoted_tweets.source_relation = line_items.source_relation\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n        and line_items.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.twitter_ads__account_report": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "twitter_ads__account_report", "resource_type": "model", "package_name": "twitter_ads", "path": "twitter_ads__account_report.sql", "original_file_path": "models/twitter_ads__account_report.sql", "unique_id": "model.twitter_ads.twitter_ads__account_report", "fqn": ["twitter_ads", "twitter_ads__account_report"], "alias": "twitter_ads__account_report", "checksum": {"name": "sha256", "checksum": "5cbe68fd857b25e8022c923542748da6bdb26b0c8d9ae39ab62a31c1961fc4c6"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record in this table represents the daily performance of ads at the account level, within a placement in Twitter.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "spend_micro": {"name": "spend_micro", "description": "The spend (in micros) for the account on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the account on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for th account on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the account on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the account on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "Name of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timezone_switched_timestamp": {"name": "timezone_switched_timestamp", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/twitter.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "table", "enabled": true}, "created_at": 1759221507.0379527, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`twitter_ads__account_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith accounts as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history') }}\n    where is_latest_version\n),\n\npromoted_tweet_report as (\n    \n    select \n        *,\n        {# Let's sum up conversions into general fields for ease of use #}\n        {{ var('twitter_ads__conversion_fields') | join(' + ') if var('twitter_ads__conversion_fields') else 0 }} as total_conversions,\n        {{ var('twitter_ads__conversion_sale_amount_fields') | join(' + ') if var('twitter_ads__conversion_sale_amount_fields') else 0 }} as total_conversions_sale_amount\n\n    from {{ ref('stg_twitter_ads__promoted_tweet_report') }}\n),\n\nrollup_report as (\n\n    select \n        source_relation,\n        date_day,\n        account_id,\n        placement,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions,\n        sum(spend) as spend,\n        sum(spend_micro) as spend_micro,\n        sum(url_clicks) as url_clicks,\n        sum(total_conversions) as total_conversions,\n        sum(total_conversions_sale_amount) as total_conversions_sale_amount\n\n        {# Persist all of the customizable fields #}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__promoted_tweet_report_passthrough_metrics') }}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_sale_amount_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__promoted_tweet_report_passthrough_metrics') }}\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__promoted_tweet_report_passthrough_metrics', transform='sum') }}\n    \n    from promoted_tweet_report\n    {{ dbt_utils.group_by(4) }}\n\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        accounts.is_deleted,\n        accounts.timezone,\n        accounts.industry_type,\n        accounts.approval_status,\n        accounts.business_name,\n        accounts.business_id,\n        accounts.created_timestamp,\n        accounts.updated_timestamp,\n        accounts.timezone_switched_timestamp,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        {# Persist all of the customizable fields #}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__promoted_tweet_report_passthrough_metrics') }}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_sale_amount_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__promoted_tweet_report_passthrough_metrics') }}\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__promoted_tweet_report_passthrough_metrics', transform='sum') }}\n\n    from rollup_report as report\n    left join accounts \n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    {{ dbt_utils.group_by(14) }}\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__account_history", "package": null, "version": null}, {"name": "stg_twitter_ads__promoted_tweet_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.twitter_ads_persist_pass_through_columns", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads.stg_twitter_ads__account_history", "model.twitter_ads.stg_twitter_ads__promoted_tweet_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__account_report.sql", "compiled": true, "compiled_code": "\n\nwith accounts as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\npromoted_tweet_report as (\n    \n    select \n        *,\n        \n        conversion_purchases_metric + conversion_custom_metric as total_conversions,\n        conversion_purchases_sale_amount + conversion_custom_sale_amount as total_conversions_sale_amount\n\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_report`\n),\n\nrollup_report as (\n\n    select \n        source_relation,\n        date_day,\n        account_id,\n        placement,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions,\n        sum(spend) as spend,\n        sum(spend_micro) as spend_micro,\n        sum(url_clicks) as url_clicks,\n        sum(total_conversions) as total_conversions,\n        sum(total_conversions_sale_amount) as total_conversions_sale_amount\n\n        \n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_metric, 0)) as conversion_purchases_metric\n        \n    \n        \n        , sum(coalesce(conversion_custom_metric, 0)) as conversion_custom_metric\n        \n    \n\n\n\n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_sale_amount, 0)) as conversion_purchases_sale_amount\n        \n    \n        \n        , sum(coalesce(conversion_custom_sale_amount, 0)) as conversion_custom_sale_amount\n        \n    \n\n\n\n        \n\n\n\n\n    \n    from promoted_tweet_report\n    group by 1,2,3,4\n\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        accounts.is_deleted,\n        accounts.timezone,\n        accounts.industry_type,\n        accounts.approval_status,\n        accounts.business_name,\n        accounts.business_id,\n        accounts.created_timestamp,\n        accounts.updated_timestamp,\n        accounts.timezone_switched_timestamp,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        \n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_metric, 0)) as conversion_purchases_metric\n        \n    \n        \n        , sum(coalesce(conversion_custom_metric, 0)) as conversion_custom_metric\n        \n    \n\n\n\n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_sale_amount, 0)) as conversion_purchases_sale_amount\n        \n    \n        \n        , sum(coalesce(conversion_custom_sale_amount, 0)) as conversion_custom_sale_amount\n        \n    \n\n\n\n        \n\n\n\n\n\n    from rollup_report as report\n    left join accounts \n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.twitter_ads__line_item_report": {"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "twitter_ads__line_item_report", "resource_type": "model", "package_name": "twitter_ads", "path": "twitter_ads__line_item_report.sql", "original_file_path": "models/twitter_ads__line_item_report.sql", "unique_id": "model.twitter_ads.twitter_ads__line_item_report", "fqn": ["twitter_ads", "twitter_ads__line_item_report"], "alias": "twitter_ads__line_item_report", "checksum": {"name": "sha256", "checksum": "cdde5ad082dcf2e5848646fbad87c8efb5540f8a5db0f61e95c7dba5aab28eb7"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record in this table represents the daily performance of ads at the account, campaign, and line item (ad group) level, within a placement in Twitter.\n", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "campaign_id": {"name": "campaign_id", "description": "The ID of the line item's campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the line item's campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_name": {"name": "line_item_name", "description": "The name of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The amount of spend, in micros, on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "end_timestamp": {"name": "end_timestamp", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_status": {"name": "line_item_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the line item's related campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_timestamp": {"name": "start_timestamp", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "bid_amount": {"name": "bid_amount", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target_cpa": {"name": "target_cpa", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/twitter.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "table", "enabled": true}, "created_at": 1759221507.0352218, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`twitter_ads__line_item_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith report as (\n\n    select \n        *,\n        {# Let's sum up conversions into general fields for ease of use #}\n        {{ var('twitter_ads__conversion_fields') | join(' + ') if var('twitter_ads__conversion_fields') else 0 }} as total_conversions,\n        {{ var('twitter_ads__conversion_sale_amount_fields') | join(' + ') if var('twitter_ads__conversion_sale_amount_fields') else 0 }} as total_conversions_sale_amount\n\n    from {{ ref('stg_twitter_ads__line_item_report') }}\n),\n\nline_items as (\n\n    select *\n    from {{ ref('stg_twitter_ads__line_item_history') }}\n    where is_latest_version\n),\n\ncampaigns as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history') }}\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        line_items.campaign_id,\n        campaigns.campaign_name,\n        report.line_item_id,\n        line_items.name as line_item_name,\n        line_items.is_deleted,\n        line_items.entity_status as line_item_status,\n        campaigns.entity_status as campaign_status,\n        line_items.currency,\n        line_items.advertiser_domain,\n        line_items.advertiser_user_id,\n        line_items.bid_type,\n        line_items.bid_unit,\n        line_items.charge_by,\n        line_items.objective,\n        line_items.optimization,\n        line_items.product_type,\n        line_items.primary_web_event_tag,\n        line_items.creative_source,\n        line_items.start_timestamp,\n        line_items.end_timestamp,\n        line_items.created_timestamp,\n        line_items.updated_timestamp,\n        line_items.target_cpa,\n        line_items.total_budget_amount,\n        line_items.bid_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        {# Persist all of the customizable fields #}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__line_item_report_passthrough_metrics') }}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_sale_amount_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__line_item_report_passthrough_metrics') }}\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__line_item_report_passthrough_metrics', transform='sum')}}\n\n    from report \n    left join line_items\n        on report.line_item_id = line_items.line_item_id\n        and report.source_relation = line_items.source_relation\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n        and line_items.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    {{ dbt_utils.group_by(30) }}\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_report", "package": null, "version": null}, {"name": "stg_twitter_ads__line_item_history", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_history", "package": null, "version": null}, {"name": "stg_twitter_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.twitter_ads_persist_pass_through_columns", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": ["model.twitter_ads.stg_twitter_ads__line_item_report", "model.twitter_ads.stg_twitter_ads__line_item_history", "model.twitter_ads.stg_twitter_ads__campaign_history", "model.twitter_ads.stg_twitter_ads__account_history"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter_ads__line_item_report.sql", "compiled": true, "compiled_code": "\n\nwith report as (\n\n    select \n        *,\n        \n        conversion_purchases_metric + conversion_custom_metric as total_conversions,\n        conversion_purchases_sale_amount + conversion_custom_sale_amount as total_conversions_sale_amount\n\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_report`\n),\n\nline_items as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_history`\n    where is_latest_version\n),\n\ncampaigns as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_history`\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__account_history`\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        line_items.campaign_id,\n        campaigns.campaign_name,\n        report.line_item_id,\n        line_items.name as line_item_name,\n        line_items.is_deleted,\n        line_items.entity_status as line_item_status,\n        campaigns.entity_status as campaign_status,\n        line_items.currency,\n        line_items.advertiser_domain,\n        line_items.advertiser_user_id,\n        line_items.bid_type,\n        line_items.bid_unit,\n        line_items.charge_by,\n        line_items.objective,\n        line_items.optimization,\n        line_items.product_type,\n        line_items.primary_web_event_tag,\n        line_items.creative_source,\n        line_items.start_timestamp,\n        line_items.end_timestamp,\n        line_items.created_timestamp,\n        line_items.updated_timestamp,\n        line_items.target_cpa,\n        line_items.total_budget_amount,\n        line_items.bid_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        \n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_metric, 0)) as conversion_purchases_metric\n        \n    \n        \n        , sum(coalesce(conversion_custom_metric, 0)) as conversion_custom_metric\n        \n    \n\n\n\n        \n\n\n\n    \n    \n\n\n\n\n\n    \n        \n        , sum(coalesce(conversion_purchases_sale_amount, 0)) as conversion_purchases_sale_amount\n        \n    \n        \n        , sum(coalesce(conversion_custom_sale_amount, 0)) as conversion_custom_sale_amount\n        \n    \n\n\n\n        \n\n\n\n\n\n    from report \n    left join line_items\n        on report.line_item_id = line_items.line_item_id\n        and report.source_relation = line_items.source_relation\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n        and line_items.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__line_item_history": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__line_item_history", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__line_item_history.sql", "original_file_path": "models/staging/stg_twitter_ads__line_item_history.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__line_item_history", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__line_item_history"], "alias": "stg_twitter_ads__line_item_history", "checksum": {"name": "sha256", "checksum": "6bdccb9ab0772580e1e772008744702ded368e3ba3de6c8b6d4fdad4ad159dce"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents a version of each line item. The versions can be differentiated by the updated_at timestamp.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "automatically_select_bid": {"name": "automatically_select_bid", "description": "Whether automatically optimize bidding is enabled based on daily budget and campaign flight dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bid_amount_local_micro": {"name": "bid_amount_local_micro", "description": "The bid amount to be associated with this line item, in micros.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "end_timestamp": {"name": "end_timestamp", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "entity_status": {"name": "entity_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_timestamp": {"name": "start_timestamp", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target_cpa_local_micro": {"name": "target_cpa_local_micro", "description": "The target cost per acquisition for the line item, in micros.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the line item, in micros.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bid_amount": {"name": "bid_amount", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target_cpa": {"name": "target_cpa", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": true}, "created_at": 1759221507.0863957, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_history`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__line_item_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__line_item_history_tmp')),\n                staging_columns=get_line_item_history_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        advertiser_domain,\n        advertiser_user_id,\n        automatically_select_bid,\n        bid_amount_local_micro,\n        bid_type,\n        bid_unit,\n        campaign_id,\n        charge_by,\n        created_at as created_timestamp,\n        creative_source,\n        currency,\n        deleted as is_deleted,\n        end_time as end_timestamp,\n        entity_status,\n        id as line_item_id,\n        name,\n        objective,\n        optimization,\n        primary_web_event_tag,\n        product_type,\n        start_time as start_timestamp,\n        target_cpa_local_micro,\n        total_budget_amount_local_micro,\n        updated_at as updated_timestamp,\n        round(bid_amount_local_micro / 1000000.0,2) as bid_amount,\n        round(total_budget_amount_local_micro / 1000000.0,2) as total_budget_amount,\n        round(target_cpa_local_micro / 1000000.0,2) as target_cpa,\n        row_number() over (partition by source_relation, id order by updated_at desc) = 1 as is_latest_version\n    \n    from fields \n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_history_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__line_item_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_line_item_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.twitter_ads.stg_twitter_ads__line_item_history_tmp"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads__line_item_history.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_history_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    advertiser_domain\n    \n as \n    \n    advertiser_domain\n    \n, \n    \n    \n    advertiser_user_id\n    \n as \n    \n    advertiser_user_id\n    \n, \n    cast(null as boolean) as \n    \n    automatically_select_bid\n    \n , \n    \n    \n    bid_amount_local_micro\n    \n as \n    \n    bid_amount_local_micro\n    \n, \n    cast(null as string) as \n    \n    bid_type\n    \n , \n    \n    \n    bid_unit\n    \n as \n    \n    bid_unit\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    charge_by\n    \n as \n    \n    charge_by\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creative_source\n    \n as \n    \n    creative_source\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    deleted\n    \n as \n    \n    deleted\n    \n, \n    \n    \n    end_time\n    \n as \n    \n    end_time\n    \n, \n    \n    \n    entity_status\n    \n as \n    \n    entity_status\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    objective\n    \n as \n    \n    objective\n    \n, \n    \n    \n    optimization\n    \n as \n    \n    optimization\n    \n, \n    \n    \n    primary_web_event_tag\n    \n as \n    \n    primary_web_event_tag\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    target_cpa_local_micro\n    \n as \n    \n    target_cpa_local_micro\n    \n, \n    \n    \n    total_budget_amount_local_micro\n    \n as \n    \n    total_budget_amount_local_micro\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        advertiser_domain,\n        advertiser_user_id,\n        automatically_select_bid,\n        bid_amount_local_micro,\n        bid_type,\n        bid_unit,\n        campaign_id,\n        charge_by,\n        created_at as created_timestamp,\n        creative_source,\n        currency,\n        deleted as is_deleted,\n        end_time as end_timestamp,\n        entity_status,\n        id as line_item_id,\n        name,\n        objective,\n        optimization,\n        primary_web_event_tag,\n        product_type,\n        start_time as start_timestamp,\n        target_cpa_local_micro,\n        total_budget_amount_local_micro,\n        updated_at as updated_timestamp,\n        round(bid_amount_local_micro / 1000000.0,2) as bid_amount,\n        round(total_budget_amount_local_micro / 1000000.0,2) as total_budget_amount,\n        round(target_cpa_local_micro / 1000000.0,2) as target_cpa,\n        row_number() over (partition by source_relation, id order by updated_at desc) = 1 as is_latest_version\n    \n    from fields \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__tweet": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__tweet", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__tweet.sql", "original_file_path": "models/staging/stg_twitter_ads__tweet.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__tweet", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__tweet"], "alias": "stg_twitter_ads__tweet", "checksum": {"name": "sha256", "checksum": "a9e49949675961027a786f0c10f358ab6d9261c9d45894002b5ee14c77a9dfc6"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents a tweet, promoted or not.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_id": {"name": "tweet_id", "description": "Unique identifier of the tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "If provided, the non-public title of the tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "full_text": {"name": "full_text", "description": "Full text of the tweet's content.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "language": {"name": "language", "description": "Two-letter language code of the tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": true}, "created_at": 1759221507.0929365, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__tweet_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__tweet_tmp')),\n                staging_columns=get_tweet_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        source_relation, \n        account_id,\n        id as tweet_id,\n        name,\n        full_text,\n        lang as language\n\n    from fields\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__tweet_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__tweet_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_tweet_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.twitter_ads.stg_twitter_ads__tweet_tmp"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads__tweet.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    full_text\n    \n as \n    \n    full_text\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    lang\n    \n as \n    \n    lang\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        source_relation, \n        account_id,\n        id as tweet_id,\n        name,\n        full_text,\n        lang as language\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__promoted_tweet_history": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__promoted_tweet_history", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__promoted_tweet_history.sql", "original_file_path": "models/staging/stg_twitter_ads__promoted_tweet_history.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__promoted_tweet_history", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__promoted_tweet_history"], "alias": "stg_twitter_ads__promoted_tweet_history", "checksum": {"name": "sha256", "checksum": "238f57903743ca6d0e855f633c322444dae9fdecc8fb6d8e2a29c6dd898ae6c8"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents a version of each promoted tweet. The versions can be differentiated by the updated_at timestamp.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "entity_status": {"name": "entity_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": true}, "created_at": 1759221507.0871956, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_history`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_history_tmp')),\n                staging_columns=get_promoted_tweet_history_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        approval_status,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        entity_status,\n        id as promoted_tweet_id,\n        line_item_id,\n        tweet_id,\n        updated_at as updated_timestamp,\n        row_number() over (partition by source_relation, id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__promoted_tweet_history_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__promoted_tweet_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_promoted_tweet_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_history_tmp"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads__promoted_tweet_history.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_history_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    approval_status\n    \n as \n    \n    approval_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deleted\n    \n as \n    \n    deleted\n    \n, \n    \n    \n    entity_status\n    \n as \n    \n    entity_status\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    line_item_id\n    \n as \n    \n    line_item_id\n    \n, \n    \n    \n    tweet_id\n    \n as \n    \n    tweet_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        approval_status,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        entity_status,\n        id as promoted_tweet_id,\n        line_item_id,\n        tweet_id,\n        updated_at as updated_timestamp,\n        row_number() over (partition by source_relation, id order by updated_at desc) = 1 as is_latest_version\n    from fields \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__tweet_url": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__tweet_url", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__tweet_url.sql", "original_file_path": "models/staging/stg_twitter_ads__tweet_url.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__tweet_url", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__tweet_url"], "alias": "stg_twitter_ads__tweet_url", "checksum": {"name": "sha256", "checksum": "c701396877bd53c17b00a41e130f73353d49b138d94d063f7c6177efcd0cee85"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents a URL used in a tweet.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "index": {"name": "index", "description": "The index of the URL within the tweet (ie if there are multiple URLs)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "indices": {"name": "indices", "description": "The start and end point of where the URL is placed in the tweet text.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "The 't.co' shortened URL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": true}, "created_at": 1759221507.089449, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet_url`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__tweet_url_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__tweet_url_tmp')),\n                staging_columns=get_tweet_url_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        display_url,\n        expanded_url,\n        index,\n        indices,\n        tweet_id,\n        url,\n        {{ dbt.split_part('expanded_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('expanded_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('expanded_url') }} as url_path,\n        {{ twitter_ads.twitter_ads_extract_url_parameter('expanded_url', 'utm_source') }} as utm_source,\n        {{ twitter_ads.twitter_ads_extract_url_parameter('expanded_url', 'utm_medium') }} as utm_medium,\n        {{ twitter_ads.twitter_ads_extract_url_parameter('expanded_url', 'utm_campaign') }} as utm_campaign,\n        {{ twitter_ads.twitter_ads_extract_url_parameter('expanded_url', 'utm_content') }} as utm_content,\n        {{ twitter_ads.twitter_ads_extract_url_parameter('expanded_url', 'utm_term') }} as utm_term\n    \n    from fields\n\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__tweet_url_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__tweet_url_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_tweet_url_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.twitter_ads.twitter_ads_extract_url_parameter"], "nodes": ["model.twitter_ads.stg_twitter_ads__tweet_url_tmp"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads__tweet_url.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet_url_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    display_url\n    \n as \n    \n    display_url\n    \n, \n    \n    \n    expanded_url\n    \n as \n    \n    expanded_url\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    indices\n    \n as \n    \n    indices\n    \n, \n    \n    \n    tweet_id\n    \n as \n    \n    tweet_id\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        display_url,\n        expanded_url,\n        index,\n        indices,\n        tweet_id,\n        url,\n        \n\n  \n    split(\n        expanded_url,\n        '?'\n        )[safe_offset(0)]\n  \n\n as base_url,\n        safe_cast(\n\n  \n    split(\n        \n\n  \n    split(\n        \n\n    replace(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'android-app://',\n        ''\n    )\n\n\n,\n        'http://',\n        ''\n    )\n\n\n,\n        'https://',\n        ''\n    )\n\n\n,\n        '/'\n        )[safe_offset(0)]\n  \n\n,\n        '?'\n        )[safe_offset(0)]\n  \n\n as string) as url_host,\n        '/' || safe_cast(\n\n  \n    split(\n        \n\n    case when \n\n    length(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n\n\n,\n        'https://',\n        ''\n    )\n\n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n\n\n,\n        'https://',\n        ''\n    )\n\n\n,\n        '/'\n\n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n\n\n,\n        'https://',\n        ''\n    )\n\n\n,\n        '?'\n\n    ) - 1\n            ) = 0\n        then ''\n    else\n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n\n\n,\n        'https://',\n        ''\n    )\n\n\n,\n            -1 * (\n\n    length(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n\n\n,\n        'https://',\n        ''\n    )\n\n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n\n\n,\n        'https://',\n        ''\n    )\n\n\n,\n        '/'\n\n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n\n\n,\n        'https://',\n        ''\n    )\n\n\n,\n        '?'\n\n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n  \n\n as string) as url_path,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_source='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_source,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_medium='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_medium,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_campaign,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_content='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_content,\n        nullif(\n\n  \n    split(\n        \n\n  \n    split(\n        expanded_url,\n        'utm_term='\n        )[safe_offset(1)]\n  \n\n,\n        '&'\n        )[safe_offset(0)]\n  \n\n,'') as utm_term\n    \n    from fields\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__line_item_report": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__line_item_report", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__line_item_report.sql", "original_file_path": "models/staging/stg_twitter_ads__line_item_report.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__line_item_report", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__line_item_report"], "alias": "stg_twitter_ads__line_item_report", "checksum": {"name": "sha256", "checksum": "15efdf532386a2b1acc4ec9968746429c418ac909ec4f3a2a2e2bab0b8a5ab7e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents the performance of a line item (ad group) on a given day, for its placement in Twitter.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the line item on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the line item on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": true}, "created_at": 1759221507.0912979, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__line_item_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__line_item_report_tmp')),\n                staging_columns=get_line_item_report_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        source_relation, \n        {{ dbt.date_trunc('day', 'date') }} as date_day,\n        account_id,\n        line_item_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        {% for conversion in var('twitter_ads__conversion_fields', []) %}\n            , coalesce(cast({{ conversion }} as {{ dbt.type_bigint() }}), 0) as {{ conversion }}\n        {% endfor %}\n\n        {% for conversion_value in var('twitter_ads__conversion_sale_amount_fields', []) %}\n            , coalesce(cast({{ conversion_value }} as {{ dbt.type_float() }}), 0) as {{ conversion_value }}\n        {% endfor %}\n\n        {{ twitter_ads_fill_pass_through_columns(pass_through_fields=var('twitter_ads__line_item_report_passthrough_metrics'), except=(var('twitter_ads__conversion_fields') + var('twitter_ads__conversion_sale_amount_fields'))) }}\n\n    from fields\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_report_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__line_item_report_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_line_item_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.date_trunc", "macro.dbt.type_bigint", "macro.dbt.type_float", "macro.twitter_ads.twitter_ads_fill_pass_through_columns"], "nodes": ["model.twitter_ads.stg_twitter_ads__line_item_report_tmp"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads__line_item_report.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    billed_charge_local_micro\n    \n as \n    \n    billed_charge_local_micro\n    \n, \n    \n    \n    clicks\n    \n as \n    \n    clicks\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n, \n    \n    \n    line_item_id\n    \n as \n    \n    line_item_id\n    \n, \n    \n    \n    placement\n    \n as \n    \n    placement\n    \n, \n    \n    \n    url_clicks\n    \n as \n    \n    url_clicks\n    \n, \n    \n    \n    conversion_purchases_metric\n    \n as \n    \n    conversion_purchases_metric\n    \n, \n    \n    \n    conversion_custom_metric\n    \n as \n    \n    conversion_custom_metric\n    \n, \n    \n    \n    conversion_purchases_sale_amount\n    \n as \n    \n    conversion_purchases_sale_amount\n    \n, \n    \n    \n    conversion_custom_sale_amount\n    \n as \n    \n    conversion_custom_sale_amount\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        source_relation, \n        timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as date_day,\n        account_id,\n        line_item_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        \n            , coalesce(cast(conversion_purchases_metric as bigint), 0) as conversion_purchases_metric\n        \n            , coalesce(cast(conversion_custom_metric as bigint), 0) as conversion_custom_metric\n        \n\n        \n            , coalesce(cast(conversion_purchases_sale_amount as FLOAT64), 0) as conversion_purchases_sale_amount\n        \n            , coalesce(cast(conversion_custom_sale_amount as FLOAT64), 0) as conversion_custom_sale_amount\n        \n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__campaign_report": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__campaign_report", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__campaign_report.sql", "original_file_path": "models/staging/stg_twitter_ads__campaign_report.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__campaign_report", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__campaign_report"], "alias": "stg_twitter_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "fc0eac20bcf65ef622f9abfb5f8fa263501773568e628524b620ee15cc33dd2a"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents the performance of an ad campaign on a given day, for its placement in Twitter.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the campaign on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the campaign on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the campaign on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the campaign on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the campaign on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": true}, "created_at": 1759221507.0904038, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__campaign_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__campaign_report_tmp')),\n                staging_columns=get_campaign_report_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        source_relation, \n        {{ dbt.date_trunc('day', 'date') }} as date_day,\n        account_id,\n        campaign_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n\n        {% for conversion in var('twitter_ads__conversion_fields', []) %}\n            , coalesce(cast({{ conversion }} as {{ dbt.type_bigint() }}), 0) as {{ conversion }}\n        {% endfor %}\n\n        {% for conversion_value in var('twitter_ads__conversion_sale_amount_fields', []) %}\n            , coalesce(cast({{ conversion_value }} as {{ dbt.type_float() }}), 0) as {{ conversion_value }}\n        {% endfor %}\n\n        {{ twitter_ads_fill_pass_through_columns(pass_through_fields=var('twitter_ads__campaign_report_passthrough_metrics'), except=(var('twitter_ads__conversion_fields') + var('twitter_ads__conversion_sale_amount_fields'))) }}\n    \n    from fields\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_report_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_report_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_campaign_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.date_trunc", "macro.dbt.type_bigint", "macro.dbt.type_float", "macro.twitter_ads.twitter_ads_fill_pass_through_columns"], "nodes": ["model.twitter_ads.stg_twitter_ads__campaign_report_tmp"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads__campaign_report.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_report_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    billed_charge_local_micro\n    \n as \n    \n    billed_charge_local_micro\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    clicks\n    \n as \n    \n    clicks\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n, \n    \n    \n    placement\n    \n as \n    \n    placement\n    \n, \n    \n    \n    url_clicks\n    \n as \n    \n    url_clicks\n    \n, \n    \n    \n    conversion_purchases_metric\n    \n as \n    \n    conversion_purchases_metric\n    \n, \n    \n    \n    conversion_custom_metric\n    \n as \n    \n    conversion_custom_metric\n    \n, \n    \n    \n    conversion_purchases_sale_amount\n    \n as \n    \n    conversion_purchases_sale_amount\n    \n, \n    \n    \n    conversion_custom_sale_amount\n    \n as \n    \n    conversion_custom_sale_amount\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        source_relation, \n        timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as date_day,\n        account_id,\n        campaign_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n\n        \n            , coalesce(cast(conversion_purchases_metric as bigint), 0) as conversion_purchases_metric\n        \n            , coalesce(cast(conversion_custom_metric as bigint), 0) as conversion_custom_metric\n        \n\n        \n            , coalesce(cast(conversion_purchases_sale_amount as FLOAT64), 0) as conversion_purchases_sale_amount\n        \n            , coalesce(cast(conversion_custom_sale_amount as FLOAT64), 0) as conversion_custom_sale_amount\n        \n\n        \n\n\n\n\n    \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__campaign_history": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__campaign_history", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__campaign_history.sql", "original_file_path": "models/staging/stg_twitter_ads__campaign_history.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__campaign_history", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__campaign_history"], "alias": "stg_twitter_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "1f9de910b8d359fe35781260fb5bb8287868b0d5e2bb02063f6d884677ba8320"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents a version of each campaign. The versions can be differentiated by the updated_at timestamp.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daily_budget_amount_local_micro": {"name": "daily_budget_amount_local_micro", "description": "The daily budget amount to be allocated to the campaign, in micros. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "duration_in_days": {"name": "duration_in_days", "description": "The time period within which the frequency_cap is achieved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_timestamp": {"name": "end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "entity_status": {"name": "entity_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_servable": {"name": "is_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_standard_delivery": {"name": "is_standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_timestamp": {"name": "start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the campaign, in micros.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the campaign", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daily_budget_amount": {"name": "daily_budget_amount", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount": {"name": "total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": true}, "created_at": 1759221507.0844262, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_history`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        account_id,\n        created_at as created_timestamp,\n        currency,\n        daily_budget_amount_local_micro,\n        deleted as is_deleted,\n        duration_in_days,\n        end_time as end_timestamp,\n        entity_status,\n        frequency_cap,\n        funding_instrument_id,\n        id as campaign_id,\n        name as campaign_name,\n        servable as is_servable,\n        standard_delivery as is_standard_delivery,\n        start_time as start_timestamp,\n        total_budget_amount_local_micro,\n        updated_at as updated_timestamp,\n        round(daily_budget_amount_local_micro / 1000000.0,2) as daily_budget_amount,\n        round(total_budget_amount_local_micro / 1000000.0,2) as total_budget_amount,\n        row_number() over (partition by source_relation, id order by updated_at desc) = 1 as is_latest_version\n    \n    from fields \n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_history_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.twitter_ads.stg_twitter_ads__campaign_history_tmp"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads__campaign_history.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_history_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    daily_budget_amount_local_micro\n    \n as \n    \n    daily_budget_amount_local_micro\n    \n, \n    \n    \n    deleted\n    \n as \n    \n    deleted\n    \n, \n    \n    \n    duration_in_days\n    \n as \n    \n    duration_in_days\n    \n, \n    \n    \n    end_time\n    \n as \n    \n    end_time\n    \n, \n    \n    \n    entity_status\n    \n as \n    \n    entity_status\n    \n, \n    \n    \n    frequency_cap\n    \n as \n    \n    frequency_cap\n    \n, \n    \n    \n    funding_instrument_id\n    \n as \n    \n    funding_instrument_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    servable\n    \n as \n    \n    servable\n    \n, \n    \n    \n    standard_delivery\n    \n as \n    \n    standard_delivery\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    total_budget_amount_local_micro\n    \n as \n    \n    total_budget_amount_local_micro\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        account_id,\n        created_at as created_timestamp,\n        currency,\n        daily_budget_amount_local_micro,\n        deleted as is_deleted,\n        duration_in_days,\n        end_time as end_timestamp,\n        entity_status,\n        frequency_cap,\n        funding_instrument_id,\n        id as campaign_id,\n        name as campaign_name,\n        servable as is_servable,\n        standard_delivery as is_standard_delivery,\n        start_time as start_timestamp,\n        total_budget_amount_local_micro,\n        updated_at as updated_timestamp,\n        round(daily_budget_amount_local_micro / 1000000.0,2) as daily_budget_amount,\n        round(total_budget_amount_local_micro / 1000000.0,2) as total_budget_amount,\n        row_number() over (partition by source_relation, id order by updated_at desc) = 1 as is_latest_version\n    \n    from fields \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__promoted_tweet_report": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__promoted_tweet_report", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__promoted_tweet_report.sql", "original_file_path": "models/staging/stg_twitter_ads__promoted_tweet_report.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__promoted_tweet_report", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__promoted_tweet_report"], "alias": "stg_twitter_ads__promoted_tweet_report", "checksum": {"name": "sha256", "checksum": "a150a091d0ac8c76e0d3c1030cf2c9031086daaac5e25df654535a58e08c24f2"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents the performance of a promoted tweet on a given day, in the tweet's defined placement.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The spend (in micros) for the promoted tweet on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the promoted tweet on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the related promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": true}, "created_at": 1759221507.0880814, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_report_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_report_tmp')),\n                staging_columns=get_promoted_tweet_report_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from source\n\n), spend_calc as (\n\n    select\n        source_relation,\n        {{ dbt.date_trunc('day', 'date') }} as date_day,\n        account_id,\n        promoted_tweet_id,\n        placement,\n        clicks as clicks,\n        impressions as impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks as url_clicks\n\n        {% for conversion in var('twitter_ads__conversion_fields', []) %}\n            , coalesce(cast({{ conversion }} as {{ dbt.type_bigint() }}), 0) as {{ conversion }}\n        {% endfor %}\n\n        {% for conversion_value in var('twitter_ads__conversion_sale_amount_fields', []) %}\n            , coalesce(cast({{ conversion_value }} as {{ dbt.type_float() }}), 0) as {{ conversion_value }}\n        {% endfor %}\n\n        {{ twitter_ads_fill_pass_through_columns(pass_through_fields=var('twitter_ads__promoted_tweet_report_passthrough_metrics'), except=(var('twitter_ads__conversion_fields') + var('twitter_ads__conversion_sale_amount_fields'))) }}\n\n    from renamed\n\n)\n\nselect * from spend_calc", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__promoted_tweet_report_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__promoted_tweet_report_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_promoted_tweet_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.date_trunc", "macro.dbt.type_bigint", "macro.dbt.type_float", "macro.twitter_ads.twitter_ads_fill_pass_through_columns"], "nodes": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report_tmp"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads__promoted_tweet_report.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_report_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    billed_charge_local_micro\n    \n as \n    \n    billed_charge_local_micro\n    \n, \n    \n    \n    clicks\n    \n as \n    \n    clicks\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n, \n    \n    \n    placement\n    \n as \n    \n    placement\n    \n, \n    \n    \n    promoted_tweet_id\n    \n as \n    \n    promoted_tweet_id\n    \n, \n    \n    \n    url_clicks\n    \n as \n    \n    url_clicks\n    \n, \n    \n    \n    conversion_purchases_metric\n    \n as \n    \n    conversion_purchases_metric\n    \n, \n    \n    \n    conversion_custom_metric\n    \n as \n    \n    conversion_custom_metric\n    \n, \n    \n    \n    conversion_purchases_sale_amount\n    \n as \n    \n    conversion_purchases_sale_amount\n    \n, \n    \n    \n    conversion_custom_sale_amount\n    \n as \n    \n    conversion_custom_sale_amount\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from source\n\n), spend_calc as (\n\n    select\n        source_relation,\n        timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as date_day,\n        account_id,\n        promoted_tweet_id,\n        placement,\n        clicks as clicks,\n        impressions as impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks as url_clicks\n\n        \n            , coalesce(cast(conversion_purchases_metric as bigint), 0) as conversion_purchases_metric\n        \n            , coalesce(cast(conversion_custom_metric as bigint), 0) as conversion_custom_metric\n        \n\n        \n            , coalesce(cast(conversion_purchases_sale_amount as FLOAT64), 0) as conversion_purchases_sale_amount\n        \n            , coalesce(cast(conversion_custom_sale_amount as FLOAT64), 0) as conversion_custom_sale_amount\n        \n\n        \n\n\n\n\n\n    from renamed\n\n)\n\nselect * from spend_calc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__account_history": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__account_history", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__account_history.sql", "original_file_path": "models/staging/stg_twitter_ads__account_history.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__account_history", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__account_history"], "alias": "stg_twitter_ads__account_history", "checksum": {"name": "sha256", "checksum": "e8b3ecfb0c54ca3f8e3f3dd502fa32336821143b89422d7b1cfdfca530ef145b"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents a version of each account. The versions can be differentiated by the updated_at timestamp.", "columns": {"source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.source_relation"]}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timezone_switched_timestamp": {"name": "timezone_switched_timestamp", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the account", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "salt": {"name": "salt", "description": "The random encryption key used to hash data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": true}, "created_at": 1759221507.0822706, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__account_history`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\nwith source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        approval_status,\n        business_id,\n        business_name,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        id as account_id,\n        industry_type,\n        name,\n        salt,\n        timezone,\n        timezone_switch_at as timezone_switched_timestamp,\n        updated_at as updated_timestamp,\n        row_number() over (partition by source_relation, id order by updated_at desc) = 1 as is_latest_version\n    \n    from fields \n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__account_history_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__account_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.twitter_ads.stg_twitter_ads__account_history_tmp"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads__account_history.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select *\n    from `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__account_history_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    approval_status\n    \n as \n    \n    approval_status\n    \n, \n    \n    \n    business_id\n    \n as \n    \n    business_id\n    \n, \n    \n    \n    business_name\n    \n as \n    \n    business_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deleted\n    \n as \n    \n    deleted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    industry_type\n    \n as \n    \n    industry_type\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    salt\n    \n as \n    \n    salt\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    timezone_switch_at\n    \n as \n    \n    timezone_switch_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from source\n\n), \n\nfinal as (\n\n    select\n        source_relation,\n        approval_status,\n        business_id,\n        business_name,\n        created_at as created_timestamp,\n        deleted as is_deleted,\n        id as account_id,\n        industry_type,\n        name,\n        salt,\n        timezone,\n        timezone_switch_at as timezone_switched_timestamp,\n        updated_at as updated_timestamp,\n        row_number() over (partition by source_relation, id order by updated_at desc) = 1 as is_latest_version\n    \n    from fields \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__line_item_history_tmp": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__line_item_history_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__line_item_history_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__line_item_history_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__line_item_history_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__line_item_history_tmp"], "alias": "stg_twitter_ads__line_item_history_tmp", "checksum": {"name": "sha256", "checksum": "c28894c4d5f5a040352f53dda215bf6255e3101148c160d1eaeefa7ccb032f5f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": true}, "created_at": 1759221506.3123899, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_history_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='line_item_history', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='line_item_history',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "line_item_history"], ["twitter_ads", "line_item_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.twitter_ads.twitter_ads.line_item_history"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/tmp/stg_twitter_ads__line_item_history_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `mezo-portal-data`.`raw_paid_twitter_ads`.`line_item_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__tweet_tmp": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__tweet_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__tweet_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__tweet_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__tweet_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__tweet_tmp"], "alias": "stg_twitter_ads__tweet_tmp", "checksum": {"name": "sha256", "checksum": "e1376dd27eb0a23992062c992dfc2c549638ab402c368930ef36270b21ea20e6"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": true}, "created_at": 1759221506.3394496, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='tweet', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='tweet',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "tweet"], ["twitter_ads", "tweet"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.twitter_ads.twitter_ads.tweet"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/tmp/stg_twitter_ads__tweet_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `mezo-portal-data`.`raw_paid_twitter_ads`.`tweet`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__line_item_report_tmp": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__line_item_report_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__line_item_report_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__line_item_report_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__line_item_report_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__line_item_report_tmp"], "alias": "stg_twitter_ads__line_item_report_tmp", "checksum": {"name": "sha256", "checksum": "39ef530f4dbe147a6e9816670be7df4ab36a7fa211079092d1360edb4b23fa2f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": true}, "created_at": 1759221506.3515038, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_report_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='line_item_report', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='line_item_report',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "line_item_report"], ["twitter_ads", "line_item_report"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.twitter_ads.twitter_ads.line_item_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/tmp/stg_twitter_ads__line_item_report_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `mezo-portal-data`.`raw_paid_twitter_ads`.`line_item_report`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__promoted_tweet_history_tmp": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__promoted_tweet_history_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__promoted_tweet_history_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__promoted_tweet_history_tmp"], "alias": "stg_twitter_ads__promoted_tweet_history_tmp", "checksum": {"name": "sha256", "checksum": "0eabeab3709379e124896ece68025723a1f2906b5cc9e5ea00ad448732c5fac1"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": true}, "created_at": 1759221506.3571916, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_history_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='promoted_tweet_history', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='promoted_tweet_history',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "promoted_tweet_history"], ["twitter_ads", "promoted_tweet_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.twitter_ads.twitter_ads.promoted_tweet_history"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `mezo-portal-data`.`raw_paid_twitter_ads`.`promoted_tweet_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__campaign_history_tmp": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__campaign_history_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__campaign_history_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__campaign_history_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__campaign_history_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__campaign_history_tmp"], "alias": "stg_twitter_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "931bd1d7044cb5dc38f0976471bcfafd6ca46142d2d22d2caba968b5c1e4d418"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": true}, "created_at": 1759221506.3642693, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_history_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='campaign_history', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='campaign_history',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "campaign_history"], ["twitter_ads", "campaign_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.twitter_ads.twitter_ads.campaign_history"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/tmp/stg_twitter_ads__campaign_history_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `mezo-portal-data`.`raw_paid_twitter_ads`.`campaign_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__promoted_tweet_report_tmp": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__promoted_tweet_report_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__promoted_tweet_report_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__promoted_tweet_report_tmp"], "alias": "stg_twitter_ads__promoted_tweet_report_tmp", "checksum": {"name": "sha256", "checksum": "c6350469f47f1d64f903dd1c7544df64a2cba610a4f96a05e02b1cbedcdee5ea"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": true}, "created_at": 1759221506.3696778, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_report_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='promoted_tweet_report', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='promoted_tweet_report',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "promoted_tweet_report"], ["twitter_ads", "promoted_tweet_report"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.twitter_ads.twitter_ads.promoted_tweet_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `mezo-portal-data`.`raw_paid_twitter_ads`.`promoted_tweet_report`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__tweet_url_tmp": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__tweet_url_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__tweet_url_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__tweet_url_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__tweet_url_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__tweet_url_tmp"], "alias": "stg_twitter_ads__tweet_url_tmp", "checksum": {"name": "sha256", "checksum": "fe9950ae15f4480ffacb71ca05b667af4207203c118b162b32b307c7423fbaac"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": true}, "created_at": 1759221506.3751578, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet_url_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='tweet_url', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='tweet_url',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "tweet_url"], ["twitter_ads", "tweet_url"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.twitter_ads.twitter_ads.tweet_url"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/tmp/stg_twitter_ads__tweet_url_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `mezo-portal-data`.`raw_paid_twitter_ads`.`tweet_url`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__account_history_tmp": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__account_history_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__account_history_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__account_history_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__account_history_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__account_history_tmp"], "alias": "stg_twitter_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "3434c0ca9dd5fbb61f4227552660234452f56807b259d7eb09aca34cde54c5a9"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": true}, "created_at": 1759221506.3867402, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__account_history_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='account_history', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='account_history',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "account_history"], ["twitter_ads", "account_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.twitter_ads.twitter_ads.account_history"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/tmp/stg_twitter_ads__account_history_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `mezo-portal-data`.`raw_paid_twitter_ads`.`account_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.twitter_ads.stg_twitter_ads__campaign_report_tmp": {"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__campaign_report_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__campaign_report_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__campaign_report_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__campaign_report_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__campaign_report_tmp"], "alias": "stg_twitter_ads__campaign_report_tmp", "checksum": {"name": "sha256", "checksum": "53e768ae1259e656223ec5ff0a7e0980d2e5d1802b1787e32761569de90a2821"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": true}, "created_at": 1759221506.3924901, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_report_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='campaign_report', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='campaign_report',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "campaign_report"], ["twitter_ads", "campaign_report"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.twitter_ads.twitter_ads.campaign_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/tmp/stg_twitter_ads__campaign_report_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `mezo-portal-data`.`raw_paid_twitter_ads`.`campaign_report`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.mezo.not_null_referrer_mapping_medium.df377e3d47": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_referrer_mapping_medium", "resource_type": "test", "package_name": "mezo", "path": "not_null_referrer_mapping_medium.sql", "original_file_path": "seeds/referrer_mapping.yml", "unique_id": "test.mezo.not_null_referrer_mapping_medium.df377e3d47", "fqn": ["mezo", "not_null_referrer_mapping_medium"], "alias": "not_null_referrer_mapping_medium", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.5263112, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.mezo.referrer_mapping"]}, "compiled_path": "target/compiled/mezo/seeds/referrer_mapping.yml/not_null_referrer_mapping_medium.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect medium\nfrom `mezo-portal-data`.`dbt`.`referrer_mapping`\nwhere medium is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "medium", "file_key_name": "seeds.referrer_mapping", "attached_node": "seed.mezo.referrer_mapping", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "medium", "model": "{{ get_where_subquery(ref('referrer_mapping')) }}"}, "namespace": null}}, "test.mezo.not_null_referrer_mapping_source.b73b2b8cd8": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_referrer_mapping_source", "resource_type": "test", "package_name": "mezo", "path": "not_null_referrer_mapping_source.sql", "original_file_path": "seeds/referrer_mapping.yml", "unique_id": "test.mezo.not_null_referrer_mapping_source.b73b2b8cd8", "fqn": ["mezo", "not_null_referrer_mapping_source"], "alias": "not_null_referrer_mapping_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.5278988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.mezo.referrer_mapping"]}, "compiled_path": "target/compiled/mezo/seeds/referrer_mapping.yml/not_null_referrer_mapping_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source\nfrom `mezo-portal-data`.`dbt`.`referrer_mapping`\nwhere source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source", "file_key_name": "seeds.referrer_mapping", "attached_node": "seed.mezo.referrer_mapping", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "source", "model": "{{ get_where_subquery(ref('referrer_mapping')) }}"}, "namespace": null}}, "test.mezo.unique_referrer_mapping_host.bcb81bd488": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_referrer_mapping_host", "resource_type": "test", "package_name": "mezo", "path": "unique_referrer_mapping_host.sql", "original_file_path": "seeds/referrer_mapping.yml", "unique_id": "test.mezo.unique_referrer_mapping_host.bcb81bd488", "fqn": ["mezo", "unique_referrer_mapping_host"], "alias": "unique_referrer_mapping_host", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.529186, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.mezo.referrer_mapping"]}, "compiled_path": "target/compiled/mezo/seeds/referrer_mapping.yml/unique_referrer_mapping_host.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select host as unique_field\n  from `mezo-portal-data`.`dbt`.`referrer_mapping`\n  where host is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "host", "file_key_name": "seeds.referrer_mapping", "attached_node": "seed.mezo.referrer_mapping", "test_metadata": {"name": "unique", "kwargs": {"column_name": "host", "model": "{{ get_where_subquery(ref('referrer_mapping')) }}"}, "namespace": null}}, "test.mezo.not_null_referrer_mapping_host.f7aca82420": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_referrer_mapping_host", "resource_type": "test", "package_name": "mezo", "path": "not_null_referrer_mapping_host.sql", "original_file_path": "seeds/referrer_mapping.yml", "unique_id": "test.mezo.not_null_referrer_mapping_host.f7aca82420", "fqn": ["mezo", "not_null_referrer_mapping_host"], "alias": "not_null_referrer_mapping_host", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.5303993, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.mezo.referrer_mapping"]}, "compiled_path": "target/compiled/mezo/seeds/referrer_mapping.yml/not_null_referrer_mapping_host.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect host\nfrom `mezo-portal-data`.`dbt`.`referrer_mapping`\nwhere host is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "host", "file_key_name": "seeds.referrer_mapping", "attached_node": "seed.mezo.referrer_mapping", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "host", "model": "{{ get_where_subquery(ref('referrer_mapping')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_seed_musd_market_map_market_id.7aed42d931": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_seed_musd_market_map_market_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_seed_musd_market_map_market_id.sql", "original_file_path": "models/10_staging/seed/stg_seed_musd_market_map.yml", "unique_id": "test.mezo.not_null_stg_seed_musd_market_map_market_id.7aed42d931", "fqn": ["mezo", "10_staging", "seed", "not_null_stg_seed_musd_market_map_market_id"], "alias": "not_null_stg_seed_musd_market_map_market_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.5794232, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_seed_musd_market_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_seed_musd_market_map"]}, "compiled_path": "target/compiled/mezo/models/10_staging/seed/stg_seed_musd_market_map.yml/not_null_stg_seed_musd_market_map_market_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect market_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_seed_musd_market_map`\nwhere market_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "market_id", "file_key_name": "models.stg_seed_musd_market_map", "attached_node": "model.mezo.stg_seed_musd_market_map", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "market_id", "model": "{{ get_where_subquery(ref('stg_seed_musd_market_map')) }}"}, "namespace": null}}, "test.mezo.unique_stg_seed_musd_market_map_market_id.3ef476d498": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_stg_seed_musd_market_map_market_id", "resource_type": "test", "package_name": "mezo", "path": "unique_stg_seed_musd_market_map_market_id.sql", "original_file_path": "models/10_staging/seed/stg_seed_musd_market_map.yml", "unique_id": "test.mezo.unique_stg_seed_musd_market_map_market_id.3ef476d498", "fqn": ["mezo", "10_staging", "seed", "unique_stg_seed_musd_market_map_market_id"], "alias": "unique_stg_seed_musd_market_map_market_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.5807772, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_seed_musd_market_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_seed_musd_market_map"]}, "compiled_path": "target/compiled/mezo/models/10_staging/seed/stg_seed_musd_market_map.yml/unique_stg_seed_musd_market_map_market_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select market_id as unique_field\n  from `mezo-portal-data`.`dbt_staging`.`stg_seed_musd_market_map`\n  where market_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "market_id", "file_key_name": "models.stg_seed_musd_market_map", "attached_node": "model.mezo.stg_seed_musd_market_map", "test_metadata": {"name": "unique", "kwargs": {"column_name": "market_id", "model": "{{ get_where_subquery(ref('stg_seed_musd_market_map')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_seed_musd_market_map_market_name.3e0c2d149a": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_seed_musd_market_map_market_name", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_seed_musd_market_map_market_name.sql", "original_file_path": "models/10_staging/seed/stg_seed_musd_market_map.yml", "unique_id": "test.mezo.not_null_stg_seed_musd_market_map_market_name.3e0c2d149a", "fqn": ["mezo", "10_staging", "seed", "not_null_stg_seed_musd_market_map_market_name"], "alias": "not_null_stg_seed_musd_market_map_market_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.5819778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_seed_musd_market_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_seed_musd_market_map"]}, "compiled_path": "target/compiled/mezo/models/10_staging/seed/stg_seed_musd_market_map.yml/not_null_stg_seed_musd_market_map_market_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect market_name\nfrom `mezo-portal-data`.`dbt_staging`.`stg_seed_musd_market_map`\nwhere market_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "market_name", "file_key_name": "models.stg_seed_musd_market_map", "attached_node": "model.mezo.stg_seed_musd_market_map", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "market_name", "model": "{{ get_where_subquery(ref('stg_seed_musd_market_map')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_transaction_hash.8af81e66a4": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_transaction_hash", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_vaul_b33fbf7b245c698b98e5b1116eb3c929.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_transaction_hash.8af81e66a4", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_vaults_mezo__transfer_transaction_hash"], "alias": "not_null_stg_goldsky_mezo_vaul_b33fbf7b245c698b98e5b1116eb3c929", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_mezo_vaul_b33fbf7b245c698b98e5b1116eb3c929", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_mezo_vaul_b33fbf7b245c698b98e5b1116eb3c929"}, "created_at": 1759221506.5883105, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_mezo_vaul_b33fbf7b245c698b98e5b1116eb3c929\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_vaults_mezo__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml/not_null_stg_goldsky_mezo_vaul_b33fbf7b245c698b98e5b1116eb3c929.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_vaults_mezo__transfer`\nwhere transaction_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.stg_goldsky_mezo_vaults_mezo__transfer", "attached_node": "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_vaults_mezo__transfer')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id.aeecfb753a": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id.aeecfb753a", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id"], "alias": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.5894973, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_vaults_mezo__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml/not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_vaults_mezo__transfer`\nwhere contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_id", "file_key_name": "models.stg_goldsky_mezo_vaults_mezo__transfer", "attached_node": "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_id", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_vaults_mezo__transfer')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender.a66a0994b2": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender.a66a0994b2", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender"], "alias": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.590794, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_vaults_mezo__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml/not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sender\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_vaults_mezo__transfer`\nwhere sender is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sender", "file_key_name": "models.stg_goldsky_mezo_vaults_mezo__transfer", "attached_node": "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sender", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_vaults_mezo__transfer')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient.d1ab98d9f1": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient.d1ab98d9f1", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient"], "alias": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.5919507, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_vaults_mezo__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml/not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect recipient\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_vaults_mezo__transfer`\nwhere recipient is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "recipient", "file_key_name": "models.stg_goldsky_mezo_vaults_mezo__transfer", "attached_node": "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "recipient", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_vaults_mezo__transfer')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_record_timestamp.393f97ac29": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_record_timestamp", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_vaul_33316bfe5c23b016c3fdd6cea97ba6e3.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_record_timestamp.393f97ac29", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_vaults_mezo__transfer_record_timestamp"], "alias": "not_null_stg_goldsky_mezo_vaul_33316bfe5c23b016c3fdd6cea97ba6e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_mezo_vaul_33316bfe5c23b016c3fdd6cea97ba6e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_mezo_vaul_33316bfe5c23b016c3fdd6cea97ba6e3"}, "created_at": 1759221506.593083, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_mezo_vaul_33316bfe5c23b016c3fdd6cea97ba6e3\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_vaults_mezo__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml/not_null_stg_goldsky_mezo_vaul_33316bfe5c23b016c3fdd6cea97ba6e3.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect record_timestamp\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_vaults_mezo__transfer`\nwhere record_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "record_timestamp", "file_key_name": "models.stg_goldsky_mezo_vaults_mezo__transfer", "attached_node": "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_timestamp", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_vaults_mezo__transfer')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount.322dc0af00": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount.322dc0af00", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount"], "alias": "not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.5941868, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_vaults_mezo__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_vaults_mezo__transfer.yml/not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_vaults_mezo__transfer`\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amount", "file_key_name": "models.stg_goldsky_mezo_vaults_mezo__transfer", "attached_node": "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_vaults_mezo__transfer')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_transaction_hash.b1856007b8": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__order_placed_transaction_hash", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__order_placed_transaction_hash.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_transaction_hash.b1856007b8", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__order_placed_transaction_hash"], "alias": "not_null_stg_goldsky_market_mezo__order_placed_transaction_hash", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.599228, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml/not_null_stg_goldsky_market_mezo__order_placed_transaction_hash.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__order_placed`\nwhere transaction_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.stg_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.stg_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_contract_id.9d1a5b5990": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__order_placed_contract_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__order_placed_contract_id.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_contract_id.9d1a5b5990", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__order_placed_contract_id"], "alias": "not_null_stg_goldsky_market_mezo__order_placed_contract_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6004138, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml/not_null_stg_goldsky_market_mezo__order_placed_contract_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__order_placed`\nwhere contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_id", "file_key_name": "models.stg_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.stg_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_id", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_order_id.9de674f131": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__order_placed_order_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__order_placed_order_id.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_order_id.9de674f131", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__order_placed_order_id"], "alias": "not_null_stg_goldsky_market_mezo__order_placed_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.601584, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml/not_null_stg_goldsky_market_mezo__order_placed_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__order_placed`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.stg_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.unique_stg_goldsky_market_mezo__order_placed_order_id.57143edc7c": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_stg_goldsky_market_mezo__order_placed_order_id", "resource_type": "test", "package_name": "mezo", "path": "unique_stg_goldsky_market_mezo__order_placed_order_id.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.unique_stg_goldsky_market_mezo__order_placed_order_id.57143edc7c", "fqn": ["mezo", "10_staging", "goldsky", "unique_stg_goldsky_market_mezo__order_placed_order_id"], "alias": "unique_stg_goldsky_market_mezo__order_placed_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.602739, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml/unique_stg_goldsky_market_mezo__order_placed_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_id as unique_field\n  from `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__order_placed`\n  where order_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.stg_goldsky_market_mezo__order_placed", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_customer.cb63900574": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__order_placed_customer", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__order_placed_customer.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_customer.cb63900574", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__order_placed_customer"], "alias": "not_null_stg_goldsky_market_mezo__order_placed_customer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6038992, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml/not_null_stg_goldsky_market_mezo__order_placed_customer.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__order_placed`\nwhere customer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer", "file_key_name": "models.stg_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.stg_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_record_timestamp.4037f5be11": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__order_placed_record_timestamp", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__order_placed_record_timestamp.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_record_timestamp.4037f5be11", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__order_placed_record_timestamp"], "alias": "not_null_stg_goldsky_market_mezo__order_placed_record_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6051562, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml/not_null_stg_goldsky_market_mezo__order_placed_record_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect record_timestamp\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__order_placed`\nwhere record_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "record_timestamp", "file_key_name": "models.stg_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.stg_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_timestamp", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_price.5b34648113": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__order_placed_price", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__order_placed_price.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_price.5b34648113", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__order_placed_price"], "alias": "not_null_stg_goldsky_market_mezo__order_placed_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.606301, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__order_placed.yml/not_null_stg_goldsky_market_mezo__order_placed_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__order_placed`\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.stg_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.stg_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__donated_transaction_hash.c24a4655e5": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__donated_transaction_hash", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__donated_transaction_hash.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__donated_transaction_hash.c24a4655e5", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__donated_transaction_hash"], "alias": "not_null_stg_goldsky_market_mezo__donated_transaction_hash", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6096694, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__donated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml/not_null_stg_goldsky_market_mezo__donated_transaction_hash.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__donated`\nwhere transaction_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.stg_goldsky_market_mezo__donated", "attached_node": "model.mezo.stg_goldsky_market_mezo__donated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__donated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__donated_contract_id.7d89493317": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__donated_contract_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__donated_contract_id.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__donated_contract_id.7d89493317", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__donated_contract_id"], "alias": "not_null_stg_goldsky_market_mezo__donated_contract_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.610876, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__donated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml/not_null_stg_goldsky_market_mezo__donated_contract_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__donated`\nwhere contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_id", "file_key_name": "models.stg_goldsky_market_mezo__donated", "attached_node": "model.mezo.stg_goldsky_market_mezo__donated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_id", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__donated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__donated_donor.ba076fb7c7": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__donated_donor", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__donated_donor.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__donated_donor.ba076fb7c7", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__donated_donor"], "alias": "not_null_stg_goldsky_market_mezo__donated_donor", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6121905, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__donated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml/not_null_stg_goldsky_market_mezo__donated_donor.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect donor\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__donated`\nwhere donor is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "donor", "file_key_name": "models.stg_goldsky_market_mezo__donated", "attached_node": "model.mezo.stg_goldsky_market_mezo__donated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "donor", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__donated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__donated_recipient.0260f33ab2": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__donated_recipient", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__donated_recipient.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__donated_recipient.0260f33ab2", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__donated_recipient"], "alias": "not_null_stg_goldsky_market_mezo__donated_recipient", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6133435, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__donated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml/not_null_stg_goldsky_market_mezo__donated_recipient.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect recipient\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__donated`\nwhere recipient is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "recipient", "file_key_name": "models.stg_goldsky_market_mezo__donated", "attached_node": "model.mezo.stg_goldsky_market_mezo__donated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "recipient", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__donated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__donated_record_timestamp.7a30ed6989": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__donated_record_timestamp", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__donated_record_timestamp.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__donated_record_timestamp.7a30ed6989", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__donated_record_timestamp"], "alias": "not_null_stg_goldsky_market_mezo__donated_record_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.614478, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__donated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml/not_null_stg_goldsky_market_mezo__donated_record_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect record_timestamp\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__donated`\nwhere record_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "record_timestamp", "file_key_name": "models.stg_goldsky_market_mezo__donated", "attached_node": "model.mezo.stg_goldsky_market_mezo__donated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_timestamp", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__donated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_market_mezo__donated_amount.9e357e33e8": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_market_mezo__donated_amount", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_market_mezo__donated_amount.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_market_mezo__donated_amount.9e357e33e8", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_market_mezo__donated_amount"], "alias": "not_null_stg_goldsky_market_mezo__donated_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6156566, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_market_mezo__donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_market_mezo__donated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_market_mezo__donated.yml/not_null_stg_goldsky_market_mezo__donated_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_market_mezo__donated`\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amount", "file_key_name": "models.stg_goldsky_market_mezo__donated", "attached_node": "model.mezo.stg_goldsky_market_mezo__donated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('stg_goldsky_market_mezo__donated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_musd_trove_manager__liquidation_id.8c47e8b2bb": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_musd_trove_manager__liquidation_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_musd_trove_manager__liquidation_id.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_musd_trove_manager__liquidation.yml", "unique_id": "test.mezo.not_null_stg_goldsky_musd_trove_manager__liquidation_id.8c47e8b2bb", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_musd_trove_manager__liquidation_id"], "alias": "not_null_stg_goldsky_musd_trove_manager__liquidation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6200864, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_musd_trove_manager__liquidation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_musd_trove_manager__liquidation"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_musd_trove_manager__liquidation.yml/not_null_stg_goldsky_musd_trove_manager__liquidation_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_musd_trove_manager__liquidation`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_goldsky_musd_trove_manager__liquidation", "attached_node": "model.mezo.stg_goldsky_musd_trove_manager__liquidation", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_goldsky_musd_trove_manager__liquidation')) }}"}, "namespace": null}}, "test.mezo.unique_stg_goldsky_musd_trove_manager__liquidation_id.df6a52690a": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_stg_goldsky_musd_trove_manager__liquidation_id", "resource_type": "test", "package_name": "mezo", "path": "unique_stg_goldsky_musd_trove_manager__liquidation_id.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_musd_trove_manager__liquidation.yml", "unique_id": "test.mezo.unique_stg_goldsky_musd_trove_manager__liquidation_id.df6a52690a", "fqn": ["mezo", "10_staging", "goldsky", "unique_stg_goldsky_musd_trove_manager__liquidation_id"], "alias": "unique_stg_goldsky_musd_trove_manager__liquidation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6212943, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_musd_trove_manager__liquidation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_musd_trove_manager__liquidation"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_musd_trove_manager__liquidation.yml/unique_stg_goldsky_musd_trove_manager__liquidation_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_staging`.`stg_goldsky_musd_trove_manager__liquidation`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_goldsky_musd_trove_manager__liquidation", "attached_node": "model.mezo.stg_goldsky_musd_trove_manager__liquidation", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_goldsky_musd_trove_manager__liquidation')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_transaction_hash.031e032172": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_transaction_hash", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_borrower__67d1dbd35434ee15cc2693649cf9c808.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_transaction_hash.031e032172", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_transaction_hash"], "alias": "not_null_stg_goldsky_borrower__67d1dbd35434ee15cc2693649cf9c808", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_borrower__67d1dbd35434ee15cc2693649cf9c808", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_borrower__67d1dbd35434ee15cc2693649cf9c808"}, "created_at": 1759221506.6260192, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_borrower__67d1dbd35434ee15cc2693649cf9c808\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_borrower_operations_mezo__trove_updated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml/not_null_stg_goldsky_borrower__67d1dbd35434ee15cc2693649cf9c808.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_borrower_operations_mezo__trove_updated`\nwhere transaction_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.stg_goldsky_borrower_operations_mezo__trove_updated", "attached_node": "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('stg_goldsky_borrower_operations_mezo__trove_updated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_contract_id.63b51c0d1d": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_contract_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_borrower__92328d3ed9517f3eca048cd232d56f80.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_contract_id.63b51c0d1d", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_contract_id"], "alias": "not_null_stg_goldsky_borrower__92328d3ed9517f3eca048cd232d56f80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_borrower__92328d3ed9517f3eca048cd232d56f80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_borrower__92328d3ed9517f3eca048cd232d56f80"}, "created_at": 1759221506.6271884, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_borrower__92328d3ed9517f3eca048cd232d56f80\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_borrower_operations_mezo__trove_updated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml/not_null_stg_goldsky_borrower__92328d3ed9517f3eca048cd232d56f80.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_borrower_operations_mezo__trove_updated`\nwhere contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_id", "file_key_name": "models.stg_goldsky_borrower_operations_mezo__trove_updated", "attached_node": "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_id", "model": "{{ get_where_subquery(ref('stg_goldsky_borrower_operations_mezo__trove_updated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_borrower.de165fd7d2": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_borrower", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_borrower__9178c0a8d73264b9728e152ea762289d.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_borrower.de165fd7d2", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_borrower"], "alias": "not_null_stg_goldsky_borrower__9178c0a8d73264b9728e152ea762289d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_borrower__9178c0a8d73264b9728e152ea762289d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_borrower__9178c0a8d73264b9728e152ea762289d"}, "created_at": 1759221506.6283183, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_borrower__9178c0a8d73264b9728e152ea762289d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_borrower_operations_mezo__trove_updated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml/not_null_stg_goldsky_borrower__9178c0a8d73264b9728e152ea762289d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect borrower\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_borrower_operations_mezo__trove_updated`\nwhere borrower is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "borrower", "file_key_name": "models.stg_goldsky_borrower_operations_mezo__trove_updated", "attached_node": "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "borrower", "model": "{{ get_where_subquery(ref('stg_goldsky_borrower_operations_mezo__trove_updated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_record_timestamp.3f1dacb705": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_record_timestamp", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_borrower__1777fe2d5ed79389963b8464956d7e64.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_record_timestamp.3f1dacb705", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_record_timestamp"], "alias": "not_null_stg_goldsky_borrower__1777fe2d5ed79389963b8464956d7e64", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_borrower__1777fe2d5ed79389963b8464956d7e64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_borrower__1777fe2d5ed79389963b8464956d7e64"}, "created_at": 1759221506.6294582, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_borrower__1777fe2d5ed79389963b8464956d7e64\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_borrower_operations_mezo__trove_updated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml/not_null_stg_goldsky_borrower__1777fe2d5ed79389963b8464956d7e64.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect record_timestamp\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_borrower_operations_mezo__trove_updated`\nwhere record_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "record_timestamp", "file_key_name": "models.stg_goldsky_borrower_operations_mezo__trove_updated", "attached_node": "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_timestamp", "model": "{{ get_where_subquery(ref('stg_goldsky_borrower_operations_mezo__trove_updated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_principal.b5690ada3a": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_principal", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_borrower__ea06d4247c696a634476631ff56986bc.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_principal.b5690ada3a", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_principal"], "alias": "not_null_stg_goldsky_borrower__ea06d4247c696a634476631ff56986bc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_borrower__ea06d4247c696a634476631ff56986bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_borrower__ea06d4247c696a634476631ff56986bc"}, "created_at": 1759221506.6306713, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_borrower__ea06d4247c696a634476631ff56986bc\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_borrower_operations_mezo__trove_updated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml/not_null_stg_goldsky_borrower__ea06d4247c696a634476631ff56986bc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect principal\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_borrower_operations_mezo__trove_updated`\nwhere principal is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "principal", "file_key_name": "models.stg_goldsky_borrower_operations_mezo__trove_updated", "attached_node": "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "principal", "model": "{{ get_where_subquery(ref('stg_goldsky_borrower_operations_mezo__trove_updated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_collateral.0222bbb36d": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_collateral", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_borrower__4d0783f02ce8ccea4a6e869c7b2ca23b.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml", "unique_id": "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_collateral.0222bbb36d", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_borrower_operations_mezo__trove_updated_collateral"], "alias": "not_null_stg_goldsky_borrower__4d0783f02ce8ccea4a6e869c7b2ca23b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_borrower__4d0783f02ce8ccea4a6e869c7b2ca23b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_borrower__4d0783f02ce8ccea4a6e869c7b2ca23b"}, "created_at": 1759221506.6319072, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_borrower__4d0783f02ce8ccea4a6e869c7b2ca23b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_borrower_operations_mezo__trove_updated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_borrower_operations_mezo__trove_updated.yml/not_null_stg_goldsky_borrower__4d0783f02ce8ccea4a6e869c7b2ca23b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collateral\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_borrower_operations_mezo__trove_updated`\nwhere collateral is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "collateral", "file_key_name": "models.stg_goldsky_borrower_operations_mezo__trove_updated", "attached_node": "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "collateral", "model": "{{ get_where_subquery(ref('stg_goldsky_borrower_operations_mezo__trove_updated')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_transaction_hash.9f25d46b3a": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_transaction_hash", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_brid_d58aac0ab5d095522c5f28b2618e2ec2.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_transaction_hash.9f25d46b3a", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_transaction_hash"], "alias": "not_null_stg_goldsky_mezo_brid_d58aac0ab5d095522c5f28b2618e2ec2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_mezo_brid_d58aac0ab5d095522c5f28b2618e2ec2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_mezo_brid_d58aac0ab5d095522c5f28b2618e2ec2"}, "created_at": 1759221506.636547, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_mezo_brid_d58aac0ab5d095522c5f28b2618e2ec2\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml/not_null_stg_goldsky_mezo_brid_d58aac0ab5d095522c5f28b2618e2ec2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`\nwhere transaction_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.stg_goldsky_mezo_bridge_mainnet__assets_locked", "attached_node": "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_bridge_mainnet__assets_locked')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_contract_id.34f4641d0d": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_contract_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_brid_034a5c9dab3a1e478abcfa8c0a5b6167.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_contract_id.34f4641d0d", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_contract_id"], "alias": "not_null_stg_goldsky_mezo_brid_034a5c9dab3a1e478abcfa8c0a5b6167", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_mezo_brid_034a5c9dab3a1e478abcfa8c0a5b6167", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_mezo_brid_034a5c9dab3a1e478abcfa8c0a5b6167"}, "created_at": 1759221506.637723, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_mezo_brid_034a5c9dab3a1e478abcfa8c0a5b6167\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml/not_null_stg_goldsky_mezo_brid_034a5c9dab3a1e478abcfa8c0a5b6167.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`\nwhere contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_id", "file_key_name": "models.stg_goldsky_mezo_bridge_mainnet__assets_locked", "attached_node": "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_id", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_bridge_mainnet__assets_locked')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a2579b4ab6": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_brid_e79d8a6197f6b4d7fe92d841eb13e0e8.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a2579b4ab6", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number"], "alias": "not_null_stg_goldsky_mezo_brid_e79d8a6197f6b4d7fe92d841eb13e0e8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_mezo_brid_e79d8a6197f6b4d7fe92d841eb13e0e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_mezo_brid_e79d8a6197f6b4d7fe92d841eb13e0e8"}, "created_at": 1759221506.6390004, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_mezo_brid_e79d8a6197f6b4d7fe92d841eb13e0e8\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml/not_null_stg_goldsky_mezo_brid_e79d8a6197f6b4d7fe92d841eb13e0e8.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sequence_number\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`\nwhere sequence_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequence_number", "file_key_name": "models.stg_goldsky_mezo_bridge_mainnet__assets_locked", "attached_node": "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sequence_number", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_bridge_mainnet__assets_locked')) }}"}, "namespace": null}}, "test.mezo.unique_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a6050ada2e": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number", "resource_type": "test", "package_name": "mezo", "path": "unique_stg_goldsky_mezo_bridge_3b9d2e219a69c50dc13b978691e6e14c.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml", "unique_id": "test.mezo.unique_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a6050ada2e", "fqn": ["mezo", "10_staging", "goldsky", "unique_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number"], "alias": "unique_stg_goldsky_mezo_bridge_3b9d2e219a69c50dc13b978691e6e14c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_goldsky_mezo_bridge_3b9d2e219a69c50dc13b978691e6e14c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_stg_goldsky_mezo_bridge_3b9d2e219a69c50dc13b978691e6e14c"}, "created_at": 1759221506.6401443, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_goldsky_mezo_bridge_3b9d2e219a69c50dc13b978691e6e14c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml/unique_stg_goldsky_mezo_bridge_3b9d2e219a69c50dc13b978691e6e14c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select sequence_number as unique_field\n  from `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`\n  where sequence_number is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequence_number", "file_key_name": "models.stg_goldsky_mezo_bridge_mainnet__assets_locked", "attached_node": "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sequence_number", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_bridge_mainnet__assets_locked')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_recipient.ae8f9d13d4": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_recipient", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_brid_38791819afb0577d7bb39bb131ead828.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_recipient.ae8f9d13d4", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_recipient"], "alias": "not_null_stg_goldsky_mezo_brid_38791819afb0577d7bb39bb131ead828", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_mezo_brid_38791819afb0577d7bb39bb131ead828", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_mezo_brid_38791819afb0577d7bb39bb131ead828"}, "created_at": 1759221506.6412616, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_mezo_brid_38791819afb0577d7bb39bb131ead828\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml/not_null_stg_goldsky_mezo_brid_38791819afb0577d7bb39bb131ead828.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect recipient\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`\nwhere recipient is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "recipient", "file_key_name": "models.stg_goldsky_mezo_bridge_mainnet__assets_locked", "attached_node": "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "recipient", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_bridge_mainnet__assets_locked')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_token_address.72795ef28f": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_token_address", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_brid_b670980876ab57324157024423d32641.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_token_address.72795ef28f", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_token_address"], "alias": "not_null_stg_goldsky_mezo_brid_b670980876ab57324157024423d32641", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_mezo_brid_b670980876ab57324157024423d32641", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_mezo_brid_b670980876ab57324157024423d32641"}, "created_at": 1759221506.6423907, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_mezo_brid_b670980876ab57324157024423d32641\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml/not_null_stg_goldsky_mezo_brid_b670980876ab57324157024423d32641.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect token_address\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`\nwhere token_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token_address", "file_key_name": "models.stg_goldsky_mezo_bridge_mainnet__assets_locked", "attached_node": "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token_address", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_bridge_mainnet__assets_locked')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount.74a97d0622": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount.74a97d0622", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount"], "alias": "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6435323, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml/not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amount", "file_key_name": "models.stg_goldsky_mezo_bridge_mainnet__assets_locked", "attached_node": "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_bridge_mainnet__assets_locked')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_record_timestamp.0ca0ccf782": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_record_timestamp", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_goldsky_mezo_brid_3b5e1c9314b21a53dadd8f8415e3f5dc.sql", "original_file_path": "models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml", "unique_id": "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_record_timestamp.0ca0ccf782", "fqn": ["mezo", "10_staging", "goldsky", "not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_record_timestamp"], "alias": "not_null_stg_goldsky_mezo_brid_3b5e1c9314b21a53dadd8f8415e3f5dc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_goldsky_mezo_brid_3b5e1c9314b21a53dadd8f8415e3f5dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_goldsky_mezo_brid_3b5e1c9314b21a53dadd8f8415e3f5dc"}, "created_at": 1759221506.6447527, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_goldsky_mezo_brid_3b5e1c9314b21a53dadd8f8415e3f5dc\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_goldsky_mezo_bridge_mainnet__assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"]}, "compiled_path": "target/compiled/mezo/models/10_staging/goldsky/stg_goldsky_mezo_bridge_mainnet__assets_locked.yml/not_null_stg_goldsky_mezo_brid_3b5e1c9314b21a53dadd8f8415e3f5dc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect record_timestamp\nfrom `mezo-portal-data`.`dbt_staging`.`stg_goldsky_mezo_bridge_mainnet__assets_locked`\nwhere record_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "record_timestamp", "file_key_name": "models.stg_goldsky_mezo_bridge_mainnet__assets_locked", "attached_node": "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_timestamp", "model": "{{ get_where_subquery(ref('stg_goldsky_mezo_bridge_mainnet__assets_locked')) }}"}, "namespace": null}}, "test.mezo.unique_stg_segment_profiles__pages_id.8b7d146b0e": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_stg_segment_profiles__pages_id", "resource_type": "test", "package_name": "mezo", "path": "unique_stg_segment_profiles__pages_id.sql", "original_file_path": "models/10_staging/segment/base/stg_segment_profiles__pages.yml", "unique_id": "test.mezo.unique_stg_segment_profiles__pages_id.8b7d146b0e", "fqn": ["mezo", "10_staging", "segment", "base", "unique_stg_segment_profiles__pages_id"], "alias": "unique_stg_segment_profiles__pages_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.673707, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_segment_profiles__pages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_segment_profiles__pages"]}, "compiled_path": "target/compiled/mezo/models/10_staging/segment/base/stg_segment_profiles__pages.yml/unique_stg_segment_profiles__pages_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__pages`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_segment_profiles__pages", "attached_node": "model.mezo.stg_segment_profiles__pages", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_segment_profiles__pages')) }}"}, "namespace": null}}, "test.mezo.not_null_stg_segment_profiles__pages_id.47466eb5a3": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_segment_profiles__pages_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_stg_segment_profiles__pages_id.sql", "original_file_path": "models/10_staging/segment/base/stg_segment_profiles__pages.yml", "unique_id": "test.mezo.not_null_stg_segment_profiles__pages_id.47466eb5a3", "fqn": ["mezo", "10_staging", "segment", "base", "not_null_stg_segment_profiles__pages_id"], "alias": "not_null_stg_segment_profiles__pages_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6750026, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_segment_profiles__pages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.stg_segment_profiles__pages"]}, "compiled_path": "target/compiled/mezo/models/10_staging/segment/base/stg_segment_profiles__pages.yml/not_null_stg_segment_profiles__pages_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_segment_profiles__pages`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_segment_profiles__pages", "attached_node": "model.mezo.stg_segment_profiles__pages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_segment_profiles__pages')) }}"}, "namespace": null}}, "test.mezo.not_null_int_goldsky_market_mezo__order_placed_transaction_hash.4b511d469a": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_goldsky_market_mezo__order_placed_transaction_hash", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_goldsky_market_mezo__order_placed_transaction_hash.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_int_goldsky_market_mezo__order_placed_transaction_hash.4b511d469a", "fqn": ["mezo", "50_intermediate", "goldsky", "not_null_int_goldsky_market_mezo__order_placed_transaction_hash"], "alias": "not_null_int_goldsky_market_mezo__order_placed_transaction_hash", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6903512, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml/not_null_int_goldsky_market_mezo__order_placed_transaction_hash.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_hash\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`\nwhere transaction_hash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_hash", "file_key_name": "models.int_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.int_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_hash", "model": "{{ get_where_subquery(ref('int_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_int_goldsky_market_mezo__order_placed_contract_id.6bd7ce7cbe": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_goldsky_market_mezo__order_placed_contract_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_goldsky_market_mezo__order_placed_contract_id.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_int_goldsky_market_mezo__order_placed_contract_id.6bd7ce7cbe", "fqn": ["mezo", "50_intermediate", "goldsky", "not_null_int_goldsky_market_mezo__order_placed_contract_id"], "alias": "not_null_int_goldsky_market_mezo__order_placed_contract_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6916752, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml/not_null_int_goldsky_market_mezo__order_placed_contract_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contract_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`\nwhere contract_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_id", "file_key_name": "models.int_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.int_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_id", "model": "{{ get_where_subquery(ref('int_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_int_goldsky_market_mezo__order_placed_order_id.d36dfd9ebc": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_goldsky_market_mezo__order_placed_order_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_goldsky_market_mezo__order_placed_order_id.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_int_goldsky_market_mezo__order_placed_order_id.d36dfd9ebc", "fqn": ["mezo", "50_intermediate", "goldsky", "not_null_int_goldsky_market_mezo__order_placed_order_id"], "alias": "not_null_int_goldsky_market_mezo__order_placed_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6929295, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml/not_null_int_goldsky_market_mezo__order_placed_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.int_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.int_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('int_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.unique_int_goldsky_market_mezo__order_placed_order_id.c2d5c5d91c": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_int_goldsky_market_mezo__order_placed_order_id", "resource_type": "test", "package_name": "mezo", "path": "unique_int_goldsky_market_mezo__order_placed_order_id.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.unique_int_goldsky_market_mezo__order_placed_order_id.c2d5c5d91c", "fqn": ["mezo", "50_intermediate", "goldsky", "unique_int_goldsky_market_mezo__order_placed_order_id"], "alias": "unique_int_goldsky_market_mezo__order_placed_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6942353, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml/unique_int_goldsky_market_mezo__order_placed_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_id as unique_field\n  from `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`\n  where order_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.int_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.int_goldsky_market_mezo__order_placed", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('int_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_int_goldsky_market_mezo__order_placed_customer.2c38b434ee": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_goldsky_market_mezo__order_placed_customer", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_goldsky_market_mezo__order_placed_customer.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_int_goldsky_market_mezo__order_placed_customer.2c38b434ee", "fqn": ["mezo", "50_intermediate", "goldsky", "not_null_int_goldsky_market_mezo__order_placed_customer"], "alias": "not_null_int_goldsky_market_mezo__order_placed_customer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6953816, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml/not_null_int_goldsky_market_mezo__order_placed_customer.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`\nwhere customer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer", "file_key_name": "models.int_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.int_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer", "model": "{{ get_where_subquery(ref('int_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_int_goldsky_market_mezo__order_placed_record_timestamp.4ba6cb3dde": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_goldsky_market_mezo__order_placed_record_timestamp", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_goldsky_market_mezo__order_placed_record_timestamp.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_int_goldsky_market_mezo__order_placed_record_timestamp.4ba6cb3dde", "fqn": ["mezo", "50_intermediate", "goldsky", "not_null_int_goldsky_market_mezo__order_placed_record_timestamp"], "alias": "not_null_int_goldsky_market_mezo__order_placed_record_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.696564, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml/not_null_int_goldsky_market_mezo__order_placed_record_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect record_timestamp\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`\nwhere record_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "record_timestamp", "file_key_name": "models.int_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.int_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_timestamp", "model": "{{ get_where_subquery(ref('int_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_int_goldsky_market_mezo__order_placed_price.6f86c322d1": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_goldsky_market_mezo__order_placed_price", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_goldsky_market_mezo__order_placed_price.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_int_goldsky_market_mezo__order_placed_price.6f86c322d1", "fqn": ["mezo", "50_intermediate", "goldsky", "not_null_int_goldsky_market_mezo__order_placed_price"], "alias": "not_null_int_goldsky_market_mezo__order_placed_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6977196, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml/not_null_int_goldsky_market_mezo__order_placed_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.int_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.int_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('int_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.not_null_int_goldsky_market_mezo__order_placed_product_name.9117b0762d": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_goldsky_market_mezo__order_placed_product_name", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_goldsky_market_mezo__order_placed_product_name.sql", "original_file_path": "models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml", "unique_id": "test.mezo.not_null_int_goldsky_market_mezo__order_placed_product_name.9117b0762d", "fqn": ["mezo", "50_intermediate", "goldsky", "not_null_int_goldsky_market_mezo__order_placed_product_name"], "alias": "not_null_int_goldsky_market_mezo__order_placed_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.6988692, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_goldsky_market_mezo__order_placed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_goldsky_market_mezo__order_placed"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/goldsky/int_goldsky_market_mezo__order_placed.yml/not_null_int_goldsky_market_mezo__order_placed_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_goldsky_market_mezo__order_placed`\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.int_goldsky_market_mezo__order_placed", "attached_node": "model.mezo.int_goldsky_market_mezo__order_placed", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('int_goldsky_market_mezo__order_placed')) }}"}, "namespace": null}}, "test.mezo.unique_int_segment__sessions_session_id.ae8ff6fd15": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_int_segment__sessions_session_id", "resource_type": "test", "package_name": "mezo", "path": "unique_int_segment__sessions_session_id.sql", "original_file_path": "models/50_intermediate/segment/int_segment__sessions.yml", "unique_id": "test.mezo.unique_int_segment__sessions_session_id.ae8ff6fd15", "fqn": ["mezo", "50_intermediate", "segment", "unique_int_segment__sessions_session_id"], "alias": "unique_int_segment__sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7278664, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment__sessions"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/int_segment__sessions.yml/unique_int_segment__sessions_session_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select session_id as unique_field\n  from `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions`\n  where session_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.int_segment__sessions", "attached_node": "model.mezo.int_segment__sessions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('int_segment__sessions')) }}"}, "namespace": null}}, "test.mezo.not_null_int_segment__sessions_session_id.054a5916b0": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_segment__sessions_session_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_segment__sessions_session_id.sql", "original_file_path": "models/50_intermediate/segment/int_segment__sessions.yml", "unique_id": "test.mezo.not_null_int_segment__sessions_session_id.054a5916b0", "fqn": ["mezo", "50_intermediate", "segment", "not_null_int_segment__sessions_session_id"], "alias": "not_null_int_segment__sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7291589, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment__sessions"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/int_segment__sessions.yml/not_null_int_segment__sessions_session_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions`\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.int_segment__sessions", "attached_node": "model.mezo.int_segment__sessions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('int_segment__sessions')) }}"}, "namespace": null}}, "test.mezo.not_null_int_segment__sessions_referrer_id.e1c5dfd69c": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_segment__sessions_referrer_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_segment__sessions_referrer_id.sql", "original_file_path": "models/50_intermediate/segment/int_segment__sessions.yml", "unique_id": "test.mezo.not_null_int_segment__sessions_referrer_id.e1c5dfd69c", "fqn": ["mezo", "50_intermediate", "segment", "not_null_int_segment__sessions_referrer_id"], "alias": "not_null_int_segment__sessions_referrer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7307901, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment__sessions"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/int_segment__sessions.yml/not_null_int_segment__sessions_referrer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect referrer_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions`\nwhere referrer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "referrer_id", "file_key_name": "models.int_segment__sessions", "attached_node": "model.mezo.int_segment__sessions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "referrer_id", "model": "{{ get_where_subquery(ref('int_segment__sessions')) }}"}, "namespace": null}}, "test.mezo.not_null_int_segment__sessions_paid_id.f8a200c5e6": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_segment__sessions_paid_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_segment__sessions_paid_id.sql", "original_file_path": "models/50_intermediate/segment/int_segment__sessions.yml", "unique_id": "test.mezo.not_null_int_segment__sessions_paid_id.f8a200c5e6", "fqn": ["mezo", "50_intermediate", "segment", "not_null_int_segment__sessions_paid_id"], "alias": "not_null_int_segment__sessions_paid_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7319503, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment__sessions"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/int_segment__sessions.yml/not_null_int_segment__sessions_paid_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect paid_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_segment__sessions`\nwhere paid_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "paid_id", "file_key_name": "models.int_segment__sessions", "attached_node": "model.mezo.int_segment__sessions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "paid_id", "model": "{{ get_where_subquery(ref('int_segment__sessions')) }}"}, "namespace": null}}, "test.mezo.unique_int_segment_web_sessions__initial_session_id.778eb47ffe": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_int_segment_web_sessions__initial_session_id", "resource_type": "test", "package_name": "mezo", "path": "unique_int_segment_web_sessions__initial_session_id.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_sessions__initial.yml", "unique_id": "test.mezo.unique_int_segment_web_sessions__initial_session_id.778eb47ffe", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "unique_int_segment_web_sessions__initial_session_id"], "alias": "unique_int_segment_web_sessions__initial_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7370958, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment_web_sessions__initial", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment_web_sessions__initial"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_sessions__initial.yml/unique_int_segment_web_sessions__initial_session_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select session_id as unique_field\n  from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions__initial`\n  where session_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.int_segment_web_sessions__initial", "attached_node": "model.mezo.int_segment_web_sessions__initial", "test_metadata": {"name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('int_segment_web_sessions__initial')) }}"}, "namespace": null}}, "test.mezo.not_null_int_segment_web_sessions__initial_session_id.03fa76bdd9": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_segment_web_sessions__initial_session_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_segment_web_sessions__initial_session_id.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_sessions__initial.yml", "unique_id": "test.mezo.not_null_int_segment_web_sessions__initial_session_id.03fa76bdd9", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "not_null_int_segment_web_sessions__initial_session_id"], "alias": "not_null_int_segment_web_sessions__initial_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7382946, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment_web_sessions__initial", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment_web_sessions__initial"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_sessions__initial.yml/not_null_int_segment_web_sessions__initial_session_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions__initial`\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.int_segment_web_sessions__initial", "attached_node": "model.mezo.int_segment_web_sessions__initial", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('int_segment_web_sessions__initial')) }}"}, "namespace": null}}, "test.mezo.unique_int_segment_web_sessions_session_id.a8e2446761": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_int_segment_web_sessions_session_id", "resource_type": "test", "package_name": "mezo", "path": "unique_int_segment_web_sessions_session_id.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_sessions.yml", "unique_id": "test.mezo.unique_int_segment_web_sessions_session_id.a8e2446761", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "unique_int_segment_web_sessions_session_id"], "alias": "unique_int_segment_web_sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7447681, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment_web_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment_web_sessions"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_sessions.yml/unique_int_segment_web_sessions_session_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select session_id as unique_field\n  from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions`\n  where session_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.int_segment_web_sessions", "attached_node": "model.mezo.int_segment_web_sessions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('int_segment_web_sessions')) }}"}, "namespace": null}}, "test.mezo.not_null_int_segment_web_sessions_session_id.72fb7c057a": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_segment_web_sessions_session_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_segment_web_sessions_session_id.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_sessions.yml", "unique_id": "test.mezo.not_null_int_segment_web_sessions_session_id.72fb7c057a", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "not_null_int_segment_web_sessions_session_id"], "alias": "not_null_int_segment_web_sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7460268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment_web_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment_web_sessions"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_sessions.yml/not_null_int_segment_web_sessions_session_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_sessions`\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.int_segment_web_sessions", "attached_node": "model.mezo.int_segment_web_sessions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('int_segment_web_sessions')) }}"}, "namespace": null}}, "test.mezo.unique_int_segment_web_events__sessionized_id.5525e3ae39": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_int_segment_web_events__sessionized_id", "resource_type": "test", "package_name": "mezo", "path": "unique_int_segment_web_events__sessionized_id.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_events__sessionized.yml", "unique_id": "test.mezo.unique_int_segment_web_events__sessionized_id.5525e3ae39", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "unique_int_segment_web_events__sessionized_id"], "alias": "unique_int_segment_web_events__sessionized_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7557347, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment_web_events__sessionized", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment_web_events__sessionized"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_events__sessionized.yml/unique_int_segment_web_events__sessionized_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_events__sessionized`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.int_segment_web_events__sessionized", "attached_node": "model.mezo.int_segment_web_events__sessionized", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_segment_web_events__sessionized')) }}"}, "namespace": null}}, "test.mezo.not_null_int_segment_web_events__sessionized_id.e432ffb4ba": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_int_segment_web_events__sessionized_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_int_segment_web_events__sessionized_id.sql", "original_file_path": "models/50_intermediate/segment/sessionization/int_segment_web_events__sessionized.yml", "unique_id": "test.mezo.not_null_int_segment_web_events__sessionized_id.e432ffb4ba", "fqn": ["mezo", "50_intermediate", "segment", "sessionization", "not_null_int_segment_web_events__sessionized_id"], "alias": "not_null_int_segment_web_events__sessionized_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7569947, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_segment_web_events__sessionized", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.int_segment_web_events__sessionized"]}, "compiled_path": "target/compiled/mezo/models/50_intermediate/segment/sessionization/int_segment_web_events__sessionized.yml/not_null_int_segment_web_events__sessionized_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_intermediate`.`int_segment_web_events__sessionized`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.int_segment_web_events__sessionized", "attached_node": "model.mezo.int_segment_web_events__sessionized", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_segment_web_events__sessionized')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_liquidation_id.82354664ab": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_liquidation_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_liquidation_id.sql", "original_file_path": "models/80_marts/fct_liquidation.yml", "unique_id": "test.mezo.not_null_fct_liquidation_id.82354664ab", "fqn": ["mezo", "80_marts", "not_null_fct_liquidation_id"], "alias": "not_null_fct_liquidation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7734869, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_liquidation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_liquidation"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_liquidation.yml/not_null_fct_liquidation_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`fct_liquidation`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_liquidation", "attached_node": "model.mezo.fct_liquidation", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_liquidation')) }}"}, "namespace": null}}, "test.mezo.unique_fct_liquidation_id.9132e7004e": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_fct_liquidation_id", "resource_type": "test", "package_name": "mezo", "path": "unique_fct_liquidation_id.sql", "original_file_path": "models/80_marts/fct_liquidation.yml", "unique_id": "test.mezo.unique_fct_liquidation_id.9132e7004e", "fqn": ["mezo", "80_marts", "unique_fct_liquidation_id"], "alias": "unique_fct_liquidation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.774798, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_liquidation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_liquidation"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_liquidation.yml/unique_fct_liquidation_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`fct_liquidation`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_liquidation", "attached_node": "model.mezo.fct_liquidation", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_liquidation')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_liquidation_fk__dim1_users.1339efc368": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_liquidation_fk__dim1_users", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_liquidation_fk__dim1_users.sql", "original_file_path": "models/80_marts/fct_liquidation.yml", "unique_id": "test.mezo.not_null_fct_liquidation_fk__dim1_users.1339efc368", "fqn": ["mezo", "80_marts", "not_null_fct_liquidation_fk__dim1_users"], "alias": "not_null_fct_liquidation_fk__dim1_users", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7759786, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_liquidation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_liquidation"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_liquidation.yml/not_null_fct_liquidation_fk__dim1_users.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__dim1_users\nfrom `mezo-portal-data`.`dbt_marts`.`fct_liquidation`\nwhere fk__dim1_users is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_liquidation", "attached_node": "model.mezo.fct_liquidation", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_liquidation')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_liquidation_fk__dim1_users__canonical_segment_id__ref_dim1_users_.148c2f314a": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_liquidation_fk__dim1_users__canonical_segment_id__ref_dim1_users_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_liquidation_c88fece412edcf43339b469f238c4372.sql", "original_file_path": "models/80_marts/fct_liquidation.yml", "unique_id": "test.mezo.relationships_fct_liquidation_fk__dim1_users__canonical_segment_id__ref_dim1_users_.148c2f314a", "fqn": ["mezo", "80_marts", "relationships_fct_liquidation_fk__dim1_users__canonical_segment_id__ref_dim1_users_"], "alias": "relationships_fct_liquidation_c88fece412edcf43339b469f238c4372", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_liquidation_c88fece412edcf43339b469f238c4372", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_liquidation_c88fece412edcf43339b469f238c4372"}, "created_at": 1759221506.7771583, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_liquidation_c88fece412edcf43339b469f238c4372\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_users", "package": null, "version": null}, {"name": "fct_liquidation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_users", "model.mezo.fct_liquidation"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_liquidation.yml/relationships_fct_liquidation_c88fece412edcf43339b469f238c4372.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_users as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_liquidation`\n    where fk__dim1_users is not null\n),\n\nparent as (\n    select canonical_segment_id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_users`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_liquidation", "attached_node": "model.mezo.fct_liquidation", "test_metadata": {"name": "relationships", "kwargs": {"field": "canonical_segment_id", "to": "ref('dim1_users')", "column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_liquidation')) }}"}, "namespace": null}}, "test.mezo.not_null_dim1_attribution_id.f269ab92bc": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_dim1_attribution_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_dim1_attribution_id.sql", "original_file_path": "models/80_marts/dim1_attribution.yml", "unique_id": "test.mezo.not_null_dim1_attribution_id.f269ab92bc", "fqn": ["mezo", "80_marts", "not_null_dim1_attribution_id"], "alias": "not_null_dim1_attribution_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7938485, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_attribution", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_attribution"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_attribution.yml/not_null_dim1_attribution_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`dim1_attribution`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.dim1_attribution", "attached_node": "model.mezo.dim1_attribution", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim1_attribution')) }}"}, "namespace": null}}, "test.mezo.unique_dim1_attribution_id.6c0c08311d": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_dim1_attribution_id", "resource_type": "test", "package_name": "mezo", "path": "unique_dim1_attribution_id.sql", "original_file_path": "models/80_marts/dim1_attribution.yml", "unique_id": "test.mezo.unique_dim1_attribution_id.6c0c08311d", "fqn": ["mezo", "80_marts", "unique_dim1_attribution_id"], "alias": "unique_dim1_attribution_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.7950363, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_attribution", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_attribution"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_attribution.yml/unique_dim1_attribution_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`dim1_attribution`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.dim1_attribution", "attached_node": "model.mezo.dim1_attribution", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim1_attribution')) }}"}, "namespace": null}}, "test.mezo.not_null_dim1_products_id.8370faf3be": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_dim1_products_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_dim1_products_id.sql", "original_file_path": "models/80_marts/dim1_products.yml", "unique_id": "test.mezo.not_null_dim1_products_id.8370faf3be", "fqn": ["mezo", "80_marts", "not_null_dim1_products_id"], "alias": "not_null_dim1_products_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.797141, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_products"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_products.yml/not_null_dim1_products_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`dim1_products`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.dim1_products", "attached_node": "model.mezo.dim1_products", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim1_products')) }}"}, "namespace": null}}, "test.mezo.unique_dim1_products_id.4b83c36e82": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_dim1_products_id", "resource_type": "test", "package_name": "mezo", "path": "unique_dim1_products_id.sql", "original_file_path": "models/80_marts/dim1_products.yml", "unique_id": "test.mezo.unique_dim1_products_id.4b83c36e82", "fqn": ["mezo", "80_marts", "unique_dim1_products_id"], "alias": "unique_dim1_products_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.798298, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_products"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_products.yml/unique_dim1_products_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`dim1_products`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.dim1_products", "attached_node": "model.mezo.dim1_products", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim1_products')) }}"}, "namespace": null}}, "test.mezo.not_null_dim1_campaign_id.639da77ba5": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_dim1_campaign_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_dim1_campaign_id.sql", "original_file_path": "models/80_marts/dim1_campaign.yml", "unique_id": "test.mezo.not_null_dim1_campaign_id.639da77ba5", "fqn": ["mezo", "80_marts", "not_null_dim1_campaign_id"], "alias": "not_null_dim1_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8001707, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_campaign", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_campaign"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_campaign.yml/not_null_dim1_campaign_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`dim1_campaign`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.dim1_campaign", "attached_node": "model.mezo.dim1_campaign", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim1_campaign')) }}"}, "namespace": null}}, "test.mezo.unique_dim1_campaign_id.659028b1d8": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_dim1_campaign_id", "resource_type": "test", "package_name": "mezo", "path": "unique_dim1_campaign_id.sql", "original_file_path": "models/80_marts/dim1_campaign.yml", "unique_id": "test.mezo.unique_dim1_campaign_id.659028b1d8", "fqn": ["mezo", "80_marts", "unique_dim1_campaign_id"], "alias": "unique_dim1_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8013148, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_campaign", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_campaign"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_campaign.yml/unique_dim1_campaign_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`dim1_campaign`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.dim1_campaign", "attached_node": "model.mezo.dim1_campaign", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim1_campaign')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_paid_id.5a65dda264": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_paid_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_paid_id.sql", "original_file_path": "models/80_marts/fct_paid.yml", "unique_id": "test.mezo.not_null_fct_paid_id.5a65dda264", "fqn": ["mezo", "80_marts", "not_null_fct_paid_id"], "alias": "not_null_fct_paid_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8040996, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_paid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_paid"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_paid.yml/not_null_fct_paid_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`fct_paid`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_paid", "attached_node": "model.mezo.fct_paid", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_paid')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_paid_spend.8602bccb19": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_paid_spend", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_paid_spend.sql", "original_file_path": "models/80_marts/fct_paid.yml", "unique_id": "test.mezo.not_null_fct_paid_spend.8602bccb19", "fqn": ["mezo", "80_marts", "not_null_fct_paid_spend"], "alias": "not_null_fct_paid_spend", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8052568, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_paid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_paid"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_paid.yml/not_null_fct_paid_spend.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect spend\nfrom `mezo-portal-data`.`dbt_marts`.`fct_paid`\nwhere spend is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "spend", "file_key_name": "models.fct_paid", "attached_node": "model.mezo.fct_paid", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "spend", "model": "{{ get_where_subquery(ref('fct_paid')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_paid_impressions.49b3a284be": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_paid_impressions", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_paid_impressions.sql", "original_file_path": "models/80_marts/fct_paid.yml", "unique_id": "test.mezo.not_null_fct_paid_impressions.49b3a284be", "fqn": ["mezo", "80_marts", "not_null_fct_paid_impressions"], "alias": "not_null_fct_paid_impressions", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.806393, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_paid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_paid"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_paid.yml/not_null_fct_paid_impressions.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect impressions\nfrom `mezo-portal-data`.`dbt_marts`.`fct_paid`\nwhere impressions is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "impressions", "file_key_name": "models.fct_paid", "attached_node": "model.mezo.fct_paid", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "impressions", "model": "{{ get_where_subquery(ref('fct_paid')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_paid_clicks.ae89731850": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_paid_clicks", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_paid_clicks.sql", "original_file_path": "models/80_marts/fct_paid.yml", "unique_id": "test.mezo.not_null_fct_paid_clicks.ae89731850", "fqn": ["mezo", "80_marts", "not_null_fct_paid_clicks"], "alias": "not_null_fct_paid_clicks", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8075078, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_paid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_paid"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_paid.yml/not_null_fct_paid_clicks.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect clicks\nfrom `mezo-portal-data`.`dbt_marts`.`fct_paid`\nwhere clicks is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "clicks", "file_key_name": "models.fct_paid", "attached_node": "model.mezo.fct_paid", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "clicks", "model": "{{ get_where_subquery(ref('fct_paid')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_all_facts_fk__dim1_users__canonical_segment_id__ref_dim1_users_.f486e786ed": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_all_facts_fk__dim1_users__canonical_segment_id__ref_dim1_users_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_all_facts_750eeb4c2fa475ebde4e82e5a95c5e80.sql", "original_file_path": "models/80_marts/fct_all_facts.yml", "unique_id": "test.mezo.relationships_fct_all_facts_fk__dim1_users__canonical_segment_id__ref_dim1_users_.f486e786ed", "fqn": ["mezo", "80_marts", "relationships_fct_all_facts_fk__dim1_users__canonical_segment_id__ref_dim1_users_"], "alias": "relationships_fct_all_facts_750eeb4c2fa475ebde4e82e5a95c5e80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_all_facts_750eeb4c2fa475ebde4e82e5a95c5e80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_all_facts_750eeb4c2fa475ebde4e82e5a95c5e80"}, "created_at": 1759221506.820337, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_all_facts_750eeb4c2fa475ebde4e82e5a95c5e80\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_users", "package": null, "version": null}, {"name": "fct_all_facts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_users", "model.mezo.fct_all_facts"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_all_facts.yml/relationships_fct_all_facts_750eeb4c2fa475ebde4e82e5a95c5e80.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_users as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_all_facts`\n    where fk__dim1_users is not null\n),\n\nparent as (\n    select canonical_segment_id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_users`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_all_facts", "attached_node": "model.mezo.fct_all_facts", "test_metadata": {"name": "relationships", "kwargs": {"field": "canonical_segment_id", "to": "ref('dim1_users')", "column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_all_facts')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_.a840a539d9": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_.sql", "original_file_path": "models/80_marts/fct_all_facts.yml", "unique_id": "test.mezo.relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_.a840a539d9", "fqn": ["mezo", "80_marts", "relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_"], "alias": "relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.824267, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_token", "package": null, "version": null}, {"name": "fct_all_facts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_token", "model.mezo.fct_all_facts"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_all_facts.yml/relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_token as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_all_facts`\n    where fk__dim1_token is not null\n),\n\nparent as (\n    select id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_token`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_token", "file_key_name": "models.fct_all_facts", "attached_node": "model.mezo.fct_all_facts", "test_metadata": {"name": "relationships", "kwargs": {"field": "id", "to": "ref('dim1_token')", "column_name": "fk__dim1_token", "model": "{{ get_where_subquery(ref('fct_all_facts')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_all_facts_fk__dim1_products__id__ref_dim1_products_.c2dc8a2b22": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_all_facts_fk__dim1_products__id__ref_dim1_products_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_all_facts_fce2e23a0889a5f0cd967033af47cb25.sql", "original_file_path": "models/80_marts/fct_all_facts.yml", "unique_id": "test.mezo.relationships_fct_all_facts_fk__dim1_products__id__ref_dim1_products_.c2dc8a2b22", "fqn": ["mezo", "80_marts", "relationships_fct_all_facts_fk__dim1_products__id__ref_dim1_products_"], "alias": "relationships_fct_all_facts_fce2e23a0889a5f0cd967033af47cb25", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_all_facts_fce2e23a0889a5f0cd967033af47cb25", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_all_facts_fce2e23a0889a5f0cd967033af47cb25"}, "created_at": 1759221506.8277645, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_all_facts_fce2e23a0889a5f0cd967033af47cb25\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_products", "package": null, "version": null}, {"name": "fct_all_facts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_products", "model.mezo.fct_all_facts"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_all_facts.yml/relationships_fct_all_facts_fce2e23a0889a5f0cd967033af47cb25.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_products as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_all_facts`\n    where fk__dim1_products is not null\n),\n\nparent as (\n    select id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_products`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_products", "file_key_name": "models.fct_all_facts", "attached_node": "model.mezo.fct_all_facts", "test_metadata": {"name": "relationships", "kwargs": {"field": "id", "to": "ref('dim1_products')", "column_name": "fk__dim1_products", "model": "{{ get_where_subquery(ref('fct_all_facts')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_all_facts_fk__dim1_campaign__id__ref_dim1_campaign_.dc5d3cf6ab": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_all_facts_fk__dim1_campaign__id__ref_dim1_campaign_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_all_facts_00873a8972abb94f6232fac141fbbf2f.sql", "original_file_path": "models/80_marts/fct_all_facts.yml", "unique_id": "test.mezo.relationships_fct_all_facts_fk__dim1_campaign__id__ref_dim1_campaign_.dc5d3cf6ab", "fqn": ["mezo", "80_marts", "relationships_fct_all_facts_fk__dim1_campaign__id__ref_dim1_campaign_"], "alias": "relationships_fct_all_facts_00873a8972abb94f6232fac141fbbf2f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_all_facts_00873a8972abb94f6232fac141fbbf2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_all_facts_00873a8972abb94f6232fac141fbbf2f"}, "created_at": 1759221506.8315449, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_all_facts_00873a8972abb94f6232fac141fbbf2f\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_campaign", "package": null, "version": null}, {"name": "fct_all_facts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_campaign", "model.mezo.fct_all_facts"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_all_facts.yml/relationships_fct_all_facts_00873a8972abb94f6232fac141fbbf2f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_campaign as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_all_facts`\n    where fk__dim1_campaign is not null\n),\n\nparent as (\n    select id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_campaign`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_campaign", "file_key_name": "models.fct_all_facts", "attached_node": "model.mezo.fct_all_facts", "test_metadata": {"name": "relationships", "kwargs": {"field": "id", "to": "ref('dim1_campaign')", "column_name": "fk__dim1_campaign", "model": "{{ get_where_subquery(ref('fct_all_facts')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_all_facts_fk__dim1_attribution__id__ref_dim1_attribution_.be7497d220": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_all_facts_fk__dim1_attribution__id__ref_dim1_attribution_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_all_facts_fc96cf0621537dc1f4a04dea407b588c.sql", "original_file_path": "models/80_marts/fct_all_facts.yml", "unique_id": "test.mezo.relationships_fct_all_facts_fk__dim1_attribution__id__ref_dim1_attribution_.be7497d220", "fqn": ["mezo", "80_marts", "relationships_fct_all_facts_fk__dim1_attribution__id__ref_dim1_attribution_"], "alias": "relationships_fct_all_facts_fc96cf0621537dc1f4a04dea407b588c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_all_facts_fc96cf0621537dc1f4a04dea407b588c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_all_facts_fc96cf0621537dc1f4a04dea407b588c"}, "created_at": 1759221506.8353283, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_all_facts_fc96cf0621537dc1f4a04dea407b588c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_attribution", "package": null, "version": null}, {"name": "fct_all_facts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_attribution", "model.mezo.fct_all_facts"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_all_facts.yml/relationships_fct_all_facts_fc96cf0621537dc1f4a04dea407b588c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_attribution as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_all_facts`\n    where fk__dim1_attribution is not null\n),\n\nparent as (\n    select id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_attribution`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_attribution", "file_key_name": "models.fct_all_facts", "attached_node": "model.mezo.fct_all_facts", "test_metadata": {"name": "relationships", "kwargs": {"field": "id", "to": "ref('dim1_attribution')", "column_name": "fk__dim1_attribution", "model": "{{ get_where_subquery(ref('fct_all_facts')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_donated_id.49a53e74fd": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_donated_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_donated_id.sql", "original_file_path": "models/80_marts/fct_donated.yml", "unique_id": "test.mezo.not_null_fct_donated_id.49a53e74fd", "fqn": ["mezo", "80_marts", "not_null_fct_donated_id"], "alias": "not_null_fct_donated_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8408735, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_donated"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_donated.yml/not_null_fct_donated_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`fct_donated`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_donated", "attached_node": "model.mezo.fct_donated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_donated')) }}"}, "namespace": null}}, "test.mezo.unique_fct_donated_id.c0b02eaa9a": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_fct_donated_id", "resource_type": "test", "package_name": "mezo", "path": "unique_fct_donated_id.sql", "original_file_path": "models/80_marts/fct_donated.yml", "unique_id": "test.mezo.unique_fct_donated_id.c0b02eaa9a", "fqn": ["mezo", "80_marts", "unique_fct_donated_id"], "alias": "unique_fct_donated_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8420784, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_donated"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_donated.yml/unique_fct_donated_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`fct_donated`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_donated", "attached_node": "model.mezo.fct_donated", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_donated')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_donated_fk__dim1_users.7f596bd9be": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_donated_fk__dim1_users", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_donated_fk__dim1_users.sql", "original_file_path": "models/80_marts/fct_donated.yml", "unique_id": "test.mezo.not_null_fct_donated_fk__dim1_users.7f596bd9be", "fqn": ["mezo", "80_marts", "not_null_fct_donated_fk__dim1_users"], "alias": "not_null_fct_donated_fk__dim1_users", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.843246, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_donated"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_donated.yml/not_null_fct_donated_fk__dim1_users.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__dim1_users\nfrom `mezo-portal-data`.`dbt_marts`.`fct_donated`\nwhere fk__dim1_users is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_donated", "attached_node": "model.mezo.fct_donated", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_donated')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_donated_fk__dim1_users__canonical_segment_id__ref_dim1_users_.a311a9c4f6": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_donated_fk__dim1_users__canonical_segment_id__ref_dim1_users_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_donated_19a82828e3e268aac2a62425d83bd5c3.sql", "original_file_path": "models/80_marts/fct_donated.yml", "unique_id": "test.mezo.relationships_fct_donated_fk__dim1_users__canonical_segment_id__ref_dim1_users_.a311a9c4f6", "fqn": ["mezo", "80_marts", "relationships_fct_donated_fk__dim1_users__canonical_segment_id__ref_dim1_users_"], "alias": "relationships_fct_donated_19a82828e3e268aac2a62425d83bd5c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_donated_19a82828e3e268aac2a62425d83bd5c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_donated_19a82828e3e268aac2a62425d83bd5c3"}, "created_at": 1759221506.8444092, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_donated_19a82828e3e268aac2a62425d83bd5c3\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_users", "package": null, "version": null}, {"name": "fct_donated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_users", "model.mezo.fct_donated"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_donated.yml/relationships_fct_donated_19a82828e3e268aac2a62425d83bd5c3.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_users as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_donated`\n    where fk__dim1_users is not null\n),\n\nparent as (\n    select canonical_segment_id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_users`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_donated", "attached_node": "model.mezo.fct_donated", "test_metadata": {"name": "relationships", "kwargs": {"field": "canonical_segment_id", "to": "ref('dim1_users')", "column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_donated')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_loans_id.435fdcc0bf": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_loans_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_loans_id.sql", "original_file_path": "models/80_marts/fct_loans.yml", "unique_id": "test.mezo.not_null_fct_loans_id.435fdcc0bf", "fqn": ["mezo", "80_marts", "not_null_fct_loans_id"], "alias": "not_null_fct_loans_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8496547, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_loans", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_loans"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_loans.yml/not_null_fct_loans_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`fct_loans`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_loans", "attached_node": "model.mezo.fct_loans", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_loans')) }}"}, "namespace": null}}, "test.mezo.unique_fct_loans_id.0e1f397ccb": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_fct_loans_id", "resource_type": "test", "package_name": "mezo", "path": "unique_fct_loans_id.sql", "original_file_path": "models/80_marts/fct_loans.yml", "unique_id": "test.mezo.unique_fct_loans_id.0e1f397ccb", "fqn": ["mezo", "80_marts", "unique_fct_loans_id"], "alias": "unique_fct_loans_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8509703, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_loans", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_loans"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_loans.yml/unique_fct_loans_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`fct_loans`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_loans", "attached_node": "model.mezo.fct_loans", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_loans')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_loans_fk__dim1_users.376a7b06d9": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_loans_fk__dim1_users", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_loans_fk__dim1_users.sql", "original_file_path": "models/80_marts/fct_loans.yml", "unique_id": "test.mezo.not_null_fct_loans_fk__dim1_users.376a7b06d9", "fqn": ["mezo", "80_marts", "not_null_fct_loans_fk__dim1_users"], "alias": "not_null_fct_loans_fk__dim1_users", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8521261, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_loans", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_loans"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_loans.yml/not_null_fct_loans_fk__dim1_users.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__dim1_users\nfrom `mezo-portal-data`.`dbt_marts`.`fct_loans`\nwhere fk__dim1_users is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_loans", "attached_node": "model.mezo.fct_loans", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_loans')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_loans_fk__dim1_users__canonical_segment_id__ref_dim1_users_.6beb5f3617": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_loans_fk__dim1_users__canonical_segment_id__ref_dim1_users_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_loans_a5c6e9d0dbadd8b2434dc21d34a454b5.sql", "original_file_path": "models/80_marts/fct_loans.yml", "unique_id": "test.mezo.relationships_fct_loans_fk__dim1_users__canonical_segment_id__ref_dim1_users_.6beb5f3617", "fqn": ["mezo", "80_marts", "relationships_fct_loans_fk__dim1_users__canonical_segment_id__ref_dim1_users_"], "alias": "relationships_fct_loans_a5c6e9d0dbadd8b2434dc21d34a454b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_loans_a5c6e9d0dbadd8b2434dc21d34a454b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_loans_a5c6e9d0dbadd8b2434dc21d34a454b5"}, "created_at": 1759221506.8532784, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_loans_a5c6e9d0dbadd8b2434dc21d34a454b5\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_users", "package": null, "version": null}, {"name": "fct_loans", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_users", "model.mezo.fct_loans"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_loans.yml/relationships_fct_loans_a5c6e9d0dbadd8b2434dc21d34a454b5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_users as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_loans`\n    where fk__dim1_users is not null\n),\n\nparent as (\n    select canonical_segment_id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_users`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_loans", "attached_node": "model.mezo.fct_loans", "test_metadata": {"name": "relationships", "kwargs": {"field": "canonical_segment_id", "to": "ref('dim1_users')", "column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_loans')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_sessions_id.ac5a8064a2": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_sessions_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_sessions_id.sql", "original_file_path": "models/80_marts/fct_sessions.yml", "unique_id": "test.mezo.not_null_fct_sessions_id.ac5a8064a2", "fqn": ["mezo", "80_marts", "not_null_fct_sessions_id"], "alias": "not_null_fct_sessions_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8602211, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_sessions.yml/not_null_fct_sessions_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`fct_sessions`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_sessions", "attached_node": "model.mezo.fct_sessions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_sessions')) }}"}, "namespace": null}}, "test.mezo.unique_fct_sessions_id.51322284c8": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_fct_sessions_id", "resource_type": "test", "package_name": "mezo", "path": "unique_fct_sessions_id.sql", "original_file_path": "models/80_marts/fct_sessions.yml", "unique_id": "test.mezo.unique_fct_sessions_id.51322284c8", "fqn": ["mezo", "80_marts", "unique_fct_sessions_id"], "alias": "unique_fct_sessions_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.861387, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_sessions.yml/unique_fct_sessions_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`fct_sessions`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_sessions", "attached_node": "model.mezo.fct_sessions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_sessions')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_sessions_fk__fct_paid.c2154be23d": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_sessions_fk__fct_paid", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_sessions_fk__fct_paid.sql", "original_file_path": "models/80_marts/fct_sessions.yml", "unique_id": "test.mezo.not_null_fct_sessions_fk__fct_paid.c2154be23d", "fqn": ["mezo", "80_marts", "not_null_fct_sessions_fk__fct_paid"], "alias": "not_null_fct_sessions_fk__fct_paid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8625376, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_sessions.yml/not_null_fct_sessions_fk__fct_paid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__fct_paid\nfrom `mezo-portal-data`.`dbt_marts`.`fct_sessions`\nwhere fk__fct_paid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__fct_paid", "file_key_name": "models.fct_sessions", "attached_node": "model.mezo.fct_sessions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__fct_paid", "model": "{{ get_where_subquery(ref('fct_sessions')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_sessions_fk__dim1_users.dd1a161df0": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_sessions_fk__dim1_users", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_sessions_fk__dim1_users.sql", "original_file_path": "models/80_marts/fct_sessions.yml", "unique_id": "test.mezo.not_null_fct_sessions_fk__dim1_users.dd1a161df0", "fqn": ["mezo", "80_marts", "not_null_fct_sessions_fk__dim1_users"], "alias": "not_null_fct_sessions_fk__dim1_users", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8636706, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_sessions.yml/not_null_fct_sessions_fk__dim1_users.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__dim1_users\nfrom `mezo-portal-data`.`dbt_marts`.`fct_sessions`\nwhere fk__dim1_users is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_sessions", "attached_node": "model.mezo.fct_sessions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_sessions')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_sessions_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2f0fdc2db6": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_sessions_fk__dim1_users__canonical_segment_id__ref_dim1_users_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_sessions_115cb172ebd7316daac63585457e3efe.sql", "original_file_path": "models/80_marts/fct_sessions.yml", "unique_id": "test.mezo.relationships_fct_sessions_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2f0fdc2db6", "fqn": ["mezo", "80_marts", "relationships_fct_sessions_fk__dim1_users__canonical_segment_id__ref_dim1_users_"], "alias": "relationships_fct_sessions_115cb172ebd7316daac63585457e3efe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_sessions_115cb172ebd7316daac63585457e3efe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_sessions_115cb172ebd7316daac63585457e3efe"}, "created_at": 1759221506.8649232, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_sessions_115cb172ebd7316daac63585457e3efe\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_users", "package": null, "version": null}, {"name": "fct_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_users", "model.mezo.fct_sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_sessions.yml/relationships_fct_sessions_115cb172ebd7316daac63585457e3efe.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_users as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_sessions`\n    where fk__dim1_users is not null\n),\n\nparent as (\n    select canonical_segment_id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_users`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_sessions", "attached_node": "model.mezo.fct_sessions", "test_metadata": {"name": "relationships", "kwargs": {"field": "canonical_segment_id", "to": "ref('dim1_users')", "column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_sessions')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_sessions_fk__dim1_campaign__id__ref_dim1_campaign_.84f22422e7": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_sessions_fk__dim1_campaign__id__ref_dim1_campaign_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_sessions_b65a8458eba9e68bed77085b208b72ff.sql", "original_file_path": "models/80_marts/fct_sessions.yml", "unique_id": "test.mezo.relationships_fct_sessions_fk__dim1_campaign__id__ref_dim1_campaign_.84f22422e7", "fqn": ["mezo", "80_marts", "relationships_fct_sessions_fk__dim1_campaign__id__ref_dim1_campaign_"], "alias": "relationships_fct_sessions_b65a8458eba9e68bed77085b208b72ff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_sessions_b65a8458eba9e68bed77085b208b72ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_sessions_b65a8458eba9e68bed77085b208b72ff"}, "created_at": 1759221506.8687506, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_sessions_b65a8458eba9e68bed77085b208b72ff\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_campaign", "package": null, "version": null}, {"name": "fct_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_campaign", "model.mezo.fct_sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_sessions.yml/relationships_fct_sessions_b65a8458eba9e68bed77085b208b72ff.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_campaign as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_sessions`\n    where fk__dim1_campaign is not null\n),\n\nparent as (\n    select id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_campaign`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_campaign", "file_key_name": "models.fct_sessions", "attached_node": "model.mezo.fct_sessions", "test_metadata": {"name": "relationships", "kwargs": {"field": "id", "to": "ref('dim1_campaign')", "column_name": "fk__dim1_campaign", "model": "{{ get_where_subquery(ref('fct_sessions')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_sessions_fk__dim1_attribution.f18c7ead96": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_sessions_fk__dim1_attribution", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_sessions_fk__dim1_attribution.sql", "original_file_path": "models/80_marts/fct_sessions.yml", "unique_id": "test.mezo.not_null_fct_sessions_fk__dim1_attribution.f18c7ead96", "fqn": ["mezo", "80_marts", "not_null_fct_sessions_fk__dim1_attribution"], "alias": "not_null_fct_sessions_fk__dim1_attribution", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8731148, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_sessions.yml/not_null_fct_sessions_fk__dim1_attribution.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__dim1_attribution\nfrom `mezo-portal-data`.`dbt_marts`.`fct_sessions`\nwhere fk__dim1_attribution is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_attribution", "file_key_name": "models.fct_sessions", "attached_node": "model.mezo.fct_sessions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__dim1_attribution", "model": "{{ get_where_subquery(ref('fct_sessions')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_sessions_fk__dim1_attribution__id__ref_dim1_attribution_.ec12164321": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_sessions_fk__dim1_attribution__id__ref_dim1_attribution_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_sessions_e4039e6e2b24f5e92f182e84d7b290cd.sql", "original_file_path": "models/80_marts/fct_sessions.yml", "unique_id": "test.mezo.relationships_fct_sessions_fk__dim1_attribution__id__ref_dim1_attribution_.ec12164321", "fqn": ["mezo", "80_marts", "relationships_fct_sessions_fk__dim1_attribution__id__ref_dim1_attribution_"], "alias": "relationships_fct_sessions_e4039e6e2b24f5e92f182e84d7b290cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_sessions_e4039e6e2b24f5e92f182e84d7b290cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_sessions_e4039e6e2b24f5e92f182e84d7b290cd"}, "created_at": 1759221506.8743029, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_sessions_e4039e6e2b24f5e92f182e84d7b290cd\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_attribution", "package": null, "version": null}, {"name": "fct_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_attribution", "model.mezo.fct_sessions"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_sessions.yml/relationships_fct_sessions_e4039e6e2b24f5e92f182e84d7b290cd.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_attribution as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_sessions`\n    where fk__dim1_attribution is not null\n),\n\nparent as (\n    select id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_attribution`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_attribution", "file_key_name": "models.fct_sessions", "attached_node": "model.mezo.fct_sessions", "test_metadata": {"name": "relationships", "kwargs": {"field": "id", "to": "ref('dim1_attribution')", "column_name": "fk__dim1_attribution", "model": "{{ get_where_subquery(ref('fct_sessions')) }}"}, "namespace": null}}, "test.mezo.not_null_dim1_page_id.d79d3fd1e4": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_dim1_page_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_dim1_page_id.sql", "original_file_path": "models/80_marts/dim1_page.yml", "unique_id": "test.mezo.not_null_dim1_page_id.d79d3fd1e4", "fqn": ["mezo", "80_marts", "not_null_dim1_page_id"], "alias": "not_null_dim1_page_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8787572, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_page", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_page"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_page.yml/not_null_dim1_page_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`dim1_page`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.dim1_page", "attached_node": "model.mezo.dim1_page", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim1_page')) }}"}, "namespace": null}}, "test.mezo.unique_dim1_page_id.9a4091b5ea": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_dim1_page_id", "resource_type": "test", "package_name": "mezo", "path": "unique_dim1_page_id.sql", "original_file_path": "models/80_marts/dim1_page.yml", "unique_id": "test.mezo.unique_dim1_page_id.9a4091b5ea", "fqn": ["mezo", "80_marts", "unique_dim1_page_id"], "alias": "unique_dim1_page_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8799164, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_page", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_page"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_page.yml/unique_dim1_page_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`dim1_page`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.dim1_page", "attached_node": "model.mezo.dim1_page", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim1_page')) }}"}, "namespace": null}}, "test.mezo.not_null_dim1_users_canonical_segment_id.312c1fd5f5": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_dim1_users_canonical_segment_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_dim1_users_canonical_segment_id.sql", "original_file_path": "models/80_marts/dim1_users.yml", "unique_id": "test.mezo.not_null_dim1_users_canonical_segment_id.312c1fd5f5", "fqn": ["mezo", "80_marts", "not_null_dim1_users_canonical_segment_id"], "alias": "not_null_dim1_users_canonical_segment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8819332, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_users"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_users.yml/not_null_dim1_users_canonical_segment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect canonical_segment_id\nfrom `mezo-portal-data`.`dbt_marts`.`dim1_users`\nwhere canonical_segment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "canonical_segment_id", "file_key_name": "models.dim1_users", "attached_node": "model.mezo.dim1_users", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "canonical_segment_id", "model": "{{ get_where_subquery(ref('dim1_users')) }}"}, "namespace": null}}, "test.mezo.unique_dim1_users_canonical_segment_id.da65158f76": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_dim1_users_canonical_segment_id", "resource_type": "test", "package_name": "mezo", "path": "unique_dim1_users_canonical_segment_id.sql", "original_file_path": "models/80_marts/dim1_users.yml", "unique_id": "test.mezo.unique_dim1_users_canonical_segment_id.da65158f76", "fqn": ["mezo", "80_marts", "unique_dim1_users_canonical_segment_id"], "alias": "unique_dim1_users_canonical_segment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8830974, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_users"]}, "compiled_path": "target/compiled/mezo/models/80_marts/dim1_users.yml/unique_dim1_users_canonical_segment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select canonical_segment_id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`dim1_users`\n  where canonical_segment_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "canonical_segment_id", "file_key_name": "models.dim1_users", "attached_node": "model.mezo.dim1_users", "test_metadata": {"name": "unique", "kwargs": {"column_name": "canonical_segment_id", "model": "{{ get_where_subquery(ref('dim1_users')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_orders_id.600c7b2b67": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_orders_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_orders_id.sql", "original_file_path": "models/80_marts/fct_orders.yml", "unique_id": "test.mezo.not_null_fct_orders_id.600c7b2b67", "fqn": ["mezo", "80_marts", "not_null_fct_orders_id"], "alias": "not_null_fct_orders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8855293, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_orders"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_orders.yml/not_null_fct_orders_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`fct_orders`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_orders", "attached_node": "model.mezo.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.mezo.unique_fct_orders_id.2a20231a0b": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_fct_orders_id", "resource_type": "test", "package_name": "mezo", "path": "unique_fct_orders_id.sql", "original_file_path": "models/80_marts/fct_orders.yml", "unique_id": "test.mezo.unique_fct_orders_id.2a20231a0b", "fqn": ["mezo", "80_marts", "unique_fct_orders_id"], "alias": "unique_fct_orders_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.886674, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_orders"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_orders.yml/unique_fct_orders_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`fct_orders`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_orders", "attached_node": "model.mezo.fct_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_orders_fk__dim1_users.1f7b989a3b": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_orders_fk__dim1_users", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_orders_fk__dim1_users.sql", "original_file_path": "models/80_marts/fct_orders.yml", "unique_id": "test.mezo.not_null_fct_orders_fk__dim1_users.1f7b989a3b", "fqn": ["mezo", "80_marts", "not_null_fct_orders_fk__dim1_users"], "alias": "not_null_fct_orders_fk__dim1_users", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8877845, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_orders"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_orders.yml/not_null_fct_orders_fk__dim1_users.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__dim1_users\nfrom `mezo-portal-data`.`dbt_marts`.`fct_orders`\nwhere fk__dim1_users is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_orders", "attached_node": "model.mezo.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_orders_fk__dim1_users__canonical_segment_id__ref_dim1_users_.752ad53e0c": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_orders_fk__dim1_users__canonical_segment_id__ref_dim1_users_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_orders_cba4cd23d71d3324cb70ee1ab29cc505.sql", "original_file_path": "models/80_marts/fct_orders.yml", "unique_id": "test.mezo.relationships_fct_orders_fk__dim1_users__canonical_segment_id__ref_dim1_users_.752ad53e0c", "fqn": ["mezo", "80_marts", "relationships_fct_orders_fk__dim1_users__canonical_segment_id__ref_dim1_users_"], "alias": "relationships_fct_orders_cba4cd23d71d3324cb70ee1ab29cc505", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_orders_cba4cd23d71d3324cb70ee1ab29cc505", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_orders_cba4cd23d71d3324cb70ee1ab29cc505"}, "created_at": 1759221506.8889327, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_orders_cba4cd23d71d3324cb70ee1ab29cc505\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_users", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_users", "model.mezo.fct_orders"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_orders.yml/relationships_fct_orders_cba4cd23d71d3324cb70ee1ab29cc505.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_users as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_orders`\n    where fk__dim1_users is not null\n),\n\nparent as (\n    select canonical_segment_id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_users`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_orders", "attached_node": "model.mezo.fct_orders", "test_metadata": {"name": "relationships", "kwargs": {"field": "canonical_segment_id", "to": "ref('dim1_users')", "column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_orders_fk__dim1_products.1363455aa1": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_orders_fk__dim1_products", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_orders_fk__dim1_products.sql", "original_file_path": "models/80_marts/fct_orders.yml", "unique_id": "test.mezo.not_null_fct_orders_fk__dim1_products.1363455aa1", "fqn": ["mezo", "80_marts", "not_null_fct_orders_fk__dim1_products"], "alias": "not_null_fct_orders_fk__dim1_products", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.892645, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_orders"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_orders.yml/not_null_fct_orders_fk__dim1_products.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__dim1_products\nfrom `mezo-portal-data`.`dbt_marts`.`fct_orders`\nwhere fk__dim1_products is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_products", "file_key_name": "models.fct_orders", "attached_node": "model.mezo.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__dim1_products", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_orders_fk__dim1_products__id__ref_dim1_products_.1f6ee6743d": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_orders_fk__dim1_products__id__ref_dim1_products_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_orders_74a48a9415a81ccccbbf6e295ccbd765.sql", "original_file_path": "models/80_marts/fct_orders.yml", "unique_id": "test.mezo.relationships_fct_orders_fk__dim1_products__id__ref_dim1_products_.1f6ee6743d", "fqn": ["mezo", "80_marts", "relationships_fct_orders_fk__dim1_products__id__ref_dim1_products_"], "alias": "relationships_fct_orders_74a48a9415a81ccccbbf6e295ccbd765", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_orders_74a48a9415a81ccccbbf6e295ccbd765", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_orders_74a48a9415a81ccccbbf6e295ccbd765"}, "created_at": 1759221506.8938293, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_orders_74a48a9415a81ccccbbf6e295ccbd765\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_products", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_products", "model.mezo.fct_orders"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_orders.yml/relationships_fct_orders_74a48a9415a81ccccbbf6e295ccbd765.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_products as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_orders`\n    where fk__dim1_products is not null\n),\n\nparent as (\n    select id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_products`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_products", "file_key_name": "models.fct_orders", "attached_node": "model.mezo.fct_orders", "test_metadata": {"name": "relationships", "kwargs": {"field": "id", "to": "ref('dim1_products')", "column_name": "fk__dim1_products", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_assets_locked_id.9d6d794e56": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_assets_locked_id", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_assets_locked_id.sql", "original_file_path": "models/80_marts/fct_assets_locked.yml", "unique_id": "test.mezo.not_null_fct_assets_locked_id.9d6d794e56", "fqn": ["mezo", "80_marts", "not_null_fct_assets_locked_id"], "alias": "not_null_fct_assets_locked_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8987348, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_assets_locked"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_assets_locked.yml/not_null_fct_assets_locked_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `mezo-portal-data`.`dbt_marts`.`fct_assets_locked`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_assets_locked", "attached_node": "model.mezo.fct_assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_assets_locked')) }}"}, "namespace": null}}, "test.mezo.unique_fct_assets_locked_id.5202c9d5e4": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "unique_fct_assets_locked_id", "resource_type": "test", "package_name": "mezo", "path": "unique_fct_assets_locked_id.sql", "original_file_path": "models/80_marts/fct_assets_locked.yml", "unique_id": "test.mezo.unique_fct_assets_locked_id.5202c9d5e4", "fqn": ["mezo", "80_marts", "unique_fct_assets_locked_id"], "alias": "unique_fct_assets_locked_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.8999107, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_assets_locked"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_assets_locked.yml/unique_fct_assets_locked_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `mezo-portal-data`.`dbt_marts`.`fct_assets_locked`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.fct_assets_locked", "attached_node": "model.mezo.fct_assets_locked", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fct_assets_locked')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_assets_locked_fk__dim1_users.1fc52f16cd": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_assets_locked_fk__dim1_users", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_assets_locked_fk__dim1_users.sql", "original_file_path": "models/80_marts/fct_assets_locked.yml", "unique_id": "test.mezo.not_null_fct_assets_locked_fk__dim1_users.1fc52f16cd", "fqn": ["mezo", "80_marts", "not_null_fct_assets_locked_fk__dim1_users"], "alias": "not_null_fct_assets_locked_fk__dim1_users", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.9011114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_assets_locked"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_assets_locked.yml/not_null_fct_assets_locked_fk__dim1_users.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__dim1_users\nfrom `mezo-portal-data`.`dbt_marts`.`fct_assets_locked`\nwhere fk__dim1_users is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_assets_locked", "attached_node": "model.mezo.fct_assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_assets_locked')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_assets_locked_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2a4d83ae29": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_assets_locked_fk__dim1_users__canonical_segment_id__ref_dim1_users_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_assets_locke_37344764fa51790c8857bb2ef8aa51c7.sql", "original_file_path": "models/80_marts/fct_assets_locked.yml", "unique_id": "test.mezo.relationships_fct_assets_locked_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2a4d83ae29", "fqn": ["mezo", "80_marts", "relationships_fct_assets_locked_fk__dim1_users__canonical_segment_id__ref_dim1_users_"], "alias": "relationships_fct_assets_locke_37344764fa51790c8857bb2ef8aa51c7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_assets_locke_37344764fa51790c8857bb2ef8aa51c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_assets_locke_37344764fa51790c8857bb2ef8aa51c7"}, "created_at": 1759221506.9024236, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_assets_locke_37344764fa51790c8857bb2ef8aa51c7\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_users", "package": null, "version": null}, {"name": "fct_assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_users", "model.mezo.fct_assets_locked"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_assets_locked.yml/relationships_fct_assets_locke_37344764fa51790c8857bb2ef8aa51c7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_users as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_assets_locked`\n    where fk__dim1_users is not null\n),\n\nparent as (\n    select canonical_segment_id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_users`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_users", "file_key_name": "models.fct_assets_locked", "attached_node": "model.mezo.fct_assets_locked", "test_metadata": {"name": "relationships", "kwargs": {"field": "canonical_segment_id", "to": "ref('dim1_users')", "column_name": "fk__dim1_users", "model": "{{ get_where_subquery(ref('fct_assets_locked')) }}"}, "namespace": null}}, "test.mezo.not_null_fct_assets_locked_fk__dim1_token.145a3f35fe": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_fct_assets_locked_fk__dim1_token", "resource_type": "test", "package_name": "mezo", "path": "not_null_fct_assets_locked_fk__dim1_token.sql", "original_file_path": "models/80_marts/fct_assets_locked.yml", "unique_id": "test.mezo.not_null_fct_assets_locked_fk__dim1_token.145a3f35fe", "fqn": ["mezo", "80_marts", "not_null_fct_assets_locked_fk__dim1_token"], "alias": "not_null_fct_assets_locked_fk__dim1_token", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221506.9059868, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.fct_assets_locked"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_assets_locked.yml/not_null_fct_assets_locked_fk__dim1_token.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fk__dim1_token\nfrom `mezo-portal-data`.`dbt_marts`.`fct_assets_locked`\nwhere fk__dim1_token is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_token", "file_key_name": "models.fct_assets_locked", "attached_node": "model.mezo.fct_assets_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fk__dim1_token", "model": "{{ get_where_subquery(ref('fct_assets_locked')) }}"}, "namespace": null}}, "test.mezo.relationships_fct_assets_locked_fk__dim1_token__id__ref_dim1_token_.5c4a334c0f": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "relationships_fct_assets_locked_fk__dim1_token__id__ref_dim1_token_", "resource_type": "test", "package_name": "mezo", "path": "relationships_fct_assets_locke_4ade6e4884bdfa97842b233c163ef156.sql", "original_file_path": "models/80_marts/fct_assets_locked.yml", "unique_id": "test.mezo.relationships_fct_assets_locked_fk__dim1_token__id__ref_dim1_token_.5c4a334c0f", "fqn": ["mezo", "80_marts", "relationships_fct_assets_locked_fk__dim1_token__id__ref_dim1_token_"], "alias": "relationships_fct_assets_locke_4ade6e4884bdfa97842b233c163ef156", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_assets_locke_4ade6e4884bdfa97842b233c163ef156", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_assets_locke_4ade6e4884bdfa97842b233c163ef156"}, "created_at": 1759221506.9071724, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_assets_locke_4ade6e4884bdfa97842b233c163ef156\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim1_token", "package": null, "version": null}, {"name": "fct_assets_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.mezo.dim1_token", "model.mezo.fct_assets_locked"]}, "compiled_path": "target/compiled/mezo/models/80_marts/fct_assets_locked.yml/relationships_fct_assets_locke_4ade6e4884bdfa97842b233c163ef156.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select fk__dim1_token as from_field\n    from `mezo-portal-data`.`dbt_marts`.`fct_assets_locked`\n    where fk__dim1_token is not null\n),\n\nparent as (\n    select id as to_field\n    from `mezo-portal-data`.`dbt_marts`.`dim1_token`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fk__dim1_token", "file_key_name": "models.fct_assets_locked", "attached_node": "model.mezo.fct_assets_locked", "test_metadata": {"name": "relationships", "kwargs": {"field": "id", "to": "ref('dim1_token')", "column_name": "fk__dim1_token", "model": "{{ get_where_subquery(ref('fct_assets_locked')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__campaign_report_campaign_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__campaign_report_campaign_id.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_report_campaign_id"], "alias": "not_null_twitter_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0533674, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__campaign_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__campaign_report_campaign_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_id", "file_key_name": "models.twitter_ads__campaign_report", "attached_node": "model.twitter_ads.twitter_ads__campaign_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__campaign_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__campaign_report_date_day.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_report_date_day"], "alias": "not_null_twitter_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0546777, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__campaign_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__campaign_report_date_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.twitter_ads__campaign_report", "attached_node": "model.twitter_ads.twitter_ads__campaign_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__campaign_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__campaign_report_placement.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_report_placement"], "alias": "not_null_twitter_ads__campaign_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.055844, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__campaign_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__campaign_report_placement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect placement\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__campaign_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.twitter_ads__campaign_report", "attached_node": "model.twitter_ads.twitter_ads__campaign_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__line_item_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__line_item_report_date_day.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce", "fqn": ["twitter_ads", "not_null_twitter_ads__line_item_report_date_day"], "alias": "not_null_twitter_ads__line_item_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0570107, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__line_item_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__line_item_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__line_item_report_date_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__line_item_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.twitter_ads__line_item_report", "attached_node": "model.twitter_ads.twitter_ads__line_item_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__line_item_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__line_item_report_line_item_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__line_item_report_line_item_id.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211", "fqn": ["twitter_ads", "not_null_twitter_ads__line_item_report_line_item_id"], "alias": "not_null_twitter_ads__line_item_report_line_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0581582, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__line_item_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__line_item_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__line_item_report_line_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_item_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__line_item_report`\nwhere line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_item_id", "file_key_name": "models.twitter_ads__line_item_report", "attached_node": "model.twitter_ads.twitter_ads__line_item_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_item_id", "model": "{{ get_where_subquery(ref('twitter_ads__line_item_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__line_item_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__line_item_report_placement.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312", "fqn": ["twitter_ads", "not_null_twitter_ads__line_item_report_placement"], "alias": "not_null_twitter_ads__line_item_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0593748, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__line_item_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__line_item_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__line_item_report_placement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect placement\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__line_item_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.twitter_ads__line_item_report", "attached_node": "model.twitter_ads.twitter_ads__line_item_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__line_item_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__account_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__account_report_date_day.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846", "fqn": ["twitter_ads", "not_null_twitter_ads__account_report_date_day"], "alias": "not_null_twitter_ads__account_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0605059, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__account_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__account_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__account_report_date_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__account_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.twitter_ads__account_report", "attached_node": "model.twitter_ads.twitter_ads__account_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__account_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__account_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__account_report_placement.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194", "fqn": ["twitter_ads", "not_null_twitter_ads__account_report_placement"], "alias": "not_null_twitter_ads__account_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0616832, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__account_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__account_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__account_report_placement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect placement\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__account_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.twitter_ads__account_report", "attached_node": "model.twitter_ads.twitter_ads__account_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__account_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__account_report_account_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__account_report_account_id.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908", "fqn": ["twitter_ads", "not_null_twitter_ads__account_report_account_id"], "alias": "not_null_twitter_ads__account_report_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0628114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__account_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__account_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__account_report_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__account_report`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.twitter_ads__account_report", "attached_node": "model.twitter_ads.twitter_ads__account_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('twitter_ads__account_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__keyword_report_date_day.e0ce90c1ec": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__keyword_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__keyword_report_date_day.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__keyword_report_date_day.e0ce90c1ec", "fqn": ["twitter_ads", "not_null_twitter_ads__keyword_report_date_day"], "alias": "not_null_twitter_ads__keyword_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.063935, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__keyword_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.twitter_ads__keyword_report", "attached_node": "model.twitter_ads.twitter_ads__keyword_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__keyword_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__keyword_report_keyword_id.91efa0a538": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__keyword_report_keyword_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__keyword_report_keyword_id.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__keyword_report_keyword_id.91efa0a538", "fqn": ["twitter_ads", "not_null_twitter_ads__keyword_report_keyword_id"], "alias": "not_null_twitter_ads__keyword_report_keyword_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0651813, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__keyword_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "keyword_id", "file_key_name": "models.twitter_ads__keyword_report", "attached_node": "model.twitter_ads.twitter_ads__keyword_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('twitter_ads__keyword_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__promoted_tweet_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__promoted_tweet_report_placement.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5", "fqn": ["twitter_ads", "not_null_twitter_ads__promoted_tweet_report_placement"], "alias": "not_null_twitter_ads__promoted_tweet_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.066343, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__promoted_tweet_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__promoted_tweet_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__promoted_tweet_report_placement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect placement\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__promoted_tweet_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.twitter_ads__promoted_tweet_report", "attached_node": "model.twitter_ads.twitter_ads__promoted_tweet_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e", "fqn": ["twitter_ads", "not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id"], "alias": "not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.067477, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__promoted_tweet_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__promoted_tweet_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect promoted_tweet_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__promoted_tweet_report`\nwhere promoted_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "promoted_tweet_id", "file_key_name": "models.twitter_ads__promoted_tweet_report", "attached_node": "model.twitter_ads.twitter_ads__promoted_tweet_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promoted_tweet_id", "model": "{{ get_where_subquery(ref('twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__url_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__url_report_date_day.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b", "fqn": ["twitter_ads", "not_null_twitter_ads__url_report_date_day"], "alias": "not_null_twitter_ads__url_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0686338, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__url_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__url_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__url_report_date_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__url_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.twitter_ads__url_report", "attached_node": "model.twitter_ads.twitter_ads__url_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__url_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__url_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__url_report_placement.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e", "fqn": ["twitter_ads", "not_null_twitter_ads__url_report_placement"], "alias": "not_null_twitter_ads__url_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.069766, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__url_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__url_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__url_report_placement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect placement\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__url_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.twitter_ads__url_report", "attached_node": "model.twitter_ads.twitter_ads__url_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__url_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__url_report_promoted_tweet_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__url_report_promoted_tweet_id.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143", "fqn": ["twitter_ads", "not_null_twitter_ads__url_report_promoted_tweet_id"], "alias": "not_null_twitter_ads__url_report_promoted_tweet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0709114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__url_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__url_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__url_report_promoted_tweet_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect promoted_tweet_id\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__url_report`\nwhere promoted_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "promoted_tweet_id", "file_key_name": "models.twitter_ads__url_report", "attached_node": "model.twitter_ads.twitter_ads__url_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promoted_tweet_id", "model": "{{ get_where_subquery(ref('twitter_ads__url_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__url_report_base_url.dfd7ab549e": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__url_report_base_url", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__url_report_base_url.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__url_report_base_url.dfd7ab549e", "fqn": ["twitter_ads", "not_null_twitter_ads__url_report_base_url"], "alias": "not_null_twitter_ads__url_report_base_url", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1759221507.0728917, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=True) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__url_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.twitter_ads__url_report"]}, "compiled_path": "target/compiled/twitter_ads/models/twitter.yml/not_null_twitter_ads__url_report_base_url.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect base_url\nfrom `mezo-portal-data`.`dbt_intermediate`.`twitter_ads__url_report`\nwhere base_url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "base_url", "file_key_name": "models.twitter_ads__url_report", "attached_node": "model.twitter_ads.twitter_ads__url_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "base_url", "model": "{{ get_where_subquery(ref('twitter_ads__url_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__campaign_country_report_campaign_id.d08c7d25a2": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__campaign_country_report_campaign_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__campaign_country_report_campaign_id.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_country_report_campaign_id.d08c7d25a2", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_country_report_campaign_id"], "alias": "not_null_twitter_ads__campaign_country_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.074088, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_country_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_id", "file_key_name": "models.twitter_ads__campaign_country_report", "attached_node": "model.twitter_ads.twitter_ads__campaign_country_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_country_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__campaign_country_report_date_day.33eabfbcaa": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__campaign_country_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__campaign_country_report_date_day.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_country_report_date_day.33eabfbcaa", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_country_report_date_day"], "alias": "not_null_twitter_ads__campaign_country_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.075228, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_country_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.twitter_ads__campaign_country_report", "attached_node": "model.twitter_ads.twitter_ads__campaign_country_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_country_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__campaign_country_report_placement.3a4c65b9c5": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__campaign_country_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__campaign_country_report_placement.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_country_report_placement.3a4c65b9c5", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_country_report_placement"], "alias": "not_null_twitter_ads__campaign_country_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0763755, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_country_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.twitter_ads__campaign_country_report", "attached_node": "model.twitter_ads.twitter_ads__campaign_country_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_country_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__campaign_region_report_campaign_id.c06b8be032": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__campaign_region_report_campaign_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__campaign_region_report_campaign_id.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_region_report_campaign_id.c06b8be032", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_region_report_campaign_id"], "alias": "not_null_twitter_ads__campaign_region_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0775511, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_region_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_id", "file_key_name": "models.twitter_ads__campaign_region_report", "attached_node": "model.twitter_ads.twitter_ads__campaign_region_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_region_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__campaign_region_report_date_day.884ad86a28": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__campaign_region_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__campaign_region_report_date_day.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_region_report_date_day.884ad86a28", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_region_report_date_day"], "alias": "not_null_twitter_ads__campaign_region_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0788164, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_region_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.twitter_ads__campaign_region_report", "attached_node": "model.twitter_ads.twitter_ads__campaign_region_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_region_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_twitter_ads__campaign_region_report_placement.e6fb374bf5": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_twitter_ads__campaign_region_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_twitter_ads__campaign_region_report_placement.sql", "original_file_path": "models/twitter.yml", "unique_id": "test.twitter_ads.not_null_twitter_ads__campaign_region_report_placement.e6fb374bf5", "fqn": ["twitter_ads", "not_null_twitter_ads__campaign_region_report_placement"], "alias": "not_null_twitter_ads__campaign_region_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0799685, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "twitter_ads__campaign_region_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.twitter_ads__campaign_region_report", "attached_node": "model.twitter_ads.twitter_ads__campaign_region_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('twitter_ads__campaign_region_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__account_history_account_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__account_history_account_id.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__account_history_account_id"], "alias": "not_null_stg_twitter_ads__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.095665, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__account_history"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__account_history_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__account_history`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_twitter_ads__account_history", "attached_node": "model.twitter_ads.stg_twitter_ads__account_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__account_history')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_history_campaign_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_history_campaign_id.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_history_campaign_id"], "alias": "not_null_stg_twitter_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0969112, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__campaign_history"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__campaign_history_campaign_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_id", "file_key_name": "models.stg_twitter_ads__campaign_history", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_history')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__line_item_history_line_item_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__line_item_history_line_item_id.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__line_item_history_line_item_id"], "alias": "not_null_stg_twitter_ads__line_item_history_line_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.0980732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__line_item_history"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_history_line_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_item_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_history`\nwhere line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_item_id", "file_key_name": "models.stg_twitter_ads__line_item_history", "attached_node": "model.twitter_ads.stg_twitter_ads__line_item_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_item_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_history')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id"], "alias": "not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976"}, "created_at": 1759221507.0992568, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__promoted_tweet_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_history"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__prom_b9fd075f90e22952cf35b8a246a98976.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect promoted_tweet_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_history`\nwhere promoted_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "promoted_tweet_id", "file_key_name": "models.stg_twitter_ads__promoted_tweet_history", "attached_node": "model.twitter_ads.stg_twitter_ads__promoted_tweet_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promoted_tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_history')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__promoted_tweet_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__promoted_tweet_report_date_day.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__promoted_tweet_report_date_day"], "alias": "not_null_stg_twitter_ads__promoted_tweet_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1004114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__promoted_tweet_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__promoted_tweet_report_date_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__promoted_tweet_report", "attached_node": "model.twitter_ads.stg_twitter_ads__promoted_tweet_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id"], "alias": "not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa"}, "created_at": 1759221507.1016831, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__promoted_tweet_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__prom_46616b936836e80f58bf2b489d5247aa.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect promoted_tweet_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_report`\nwhere promoted_tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "promoted_tweet_id", "file_key_name": "models.stg_twitter_ads__promoted_tweet_report", "attached_node": "model.twitter_ads.stg_twitter_ads__promoted_tweet_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promoted_tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__promoted_tweet_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__promoted_tweet_report_placement.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__promoted_tweet_report_placement"], "alias": "not_null_stg_twitter_ads__promoted_tweet_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1028404, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__promoted_tweet_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__promoted_tweet_report_placement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect placement\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__promoted_tweet_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.stg_twitter_ads__promoted_tweet_report", "attached_node": "model.twitter_ads.stg_twitter_ads__promoted_tweet_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('stg_twitter_ads__promoted_tweet_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_index.e998fb67be": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__tweet_url_index", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__tweet_url_index.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_index.e998fb67be", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__tweet_url_index"], "alias": "not_null_stg_twitter_ads__tweet_url_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1040142, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__tweet_url", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__tweet_url"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__tweet_url_index.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet_url`\nwhere index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "index", "file_key_name": "models.stg_twitter_ads__tweet_url", "attached_node": "model.twitter_ads.stg_twitter_ads__tweet_url", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "index", "model": "{{ get_where_subquery(ref('stg_twitter_ads__tweet_url')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__tweet_url_tweet_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__tweet_url_tweet_id.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__tweet_url_tweet_id"], "alias": "not_null_stg_twitter_ads__tweet_url_tweet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1051574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__tweet_url", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__tweet_url"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__tweet_url_tweet_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tweet_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet_url`\nwhere tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tweet_id", "file_key_name": "models.stg_twitter_ads__tweet_url", "attached_node": "model.twitter_ads.stg_twitter_ads__tweet_url", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__tweet_url')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_report_date_day.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_report_date_day"], "alias": "not_null_stg_twitter_ads__campaign_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.106305, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__campaign_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__campaign_report_date_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__campaign_report", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_report_campaign_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_report_campaign_id.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_report_campaign_id"], "alias": "not_null_stg_twitter_ads__campaign_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1075516, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__campaign_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__campaign_report_campaign_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_report`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_id", "file_key_name": "models.stg_twitter_ads__campaign_report", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_report_placement.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_report_placement"], "alias": "not_null_stg_twitter_ads__campaign_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1087554, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__campaign_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__campaign_report_placement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect placement\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.stg_twitter_ads__campaign_report", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__line_item_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__line_item_report_date_day.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__line_item_report_date_day"], "alias": "not_null_stg_twitter_ads__line_item_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.109918, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__line_item_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_report_date_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_report`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__line_item_report", "attached_node": "model.twitter_ads.stg_twitter_ads__line_item_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__line_item_report_line_item_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__line_item_report_line_item_id.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__line_item_report_line_item_id"], "alias": "not_null_stg_twitter_ads__line_item_report_line_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1110563, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__line_item_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_report_line_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_item_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_report`\nwhere line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_item_id", "file_key_name": "models.stg_twitter_ads__line_item_report", "attached_node": "model.twitter_ads.stg_twitter_ads__line_item_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_item_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__line_item_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__line_item_report_placement.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__line_item_report_placement"], "alias": "not_null_stg_twitter_ads__line_item_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1122053, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__line_item_report"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__line_item_report_placement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect placement\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_report`\nwhere placement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.stg_twitter_ads__line_item_report", "attached_node": "model.twitter_ads.stg_twitter_ads__line_item_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__line_item_keywords_report_keyword_id.e5f015e9ec": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__line_item_keywords_report_keyword_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__line_item_keywords_report_keyword_id.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__line_item_keywords_report_keyword_id.e5f015e9ec", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__line_item_keywords_report_keyword_id"], "alias": "not_null_stg_twitter_ads__line_item_keywords_report_keyword_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1139376, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_keywords_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "keyword_id", "file_key_name": "models.stg_twitter_ads__line_item_keywords_report", "attached_node": "model.twitter_ads.stg_twitter_ads__line_item_keywords_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "keyword_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_keywords_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__line_item_keywords_report_date_day.c7e7155b13": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__line_item_keywords_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__line_item_keywords_report_date_day.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__line_item_keywords_report_date_day.c7e7155b13", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__line_item_keywords_report_date_day"], "alias": "not_null_stg_twitter_ads__line_item_keywords_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.115085, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_keywords_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__line_item_keywords_report", "attached_node": "model.twitter_ads.stg_twitter_ads__line_item_keywords_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__line_item_keywords_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__tweet_tweet_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__tweet_tweet_id.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__tweet_tweet_id"], "alias": "not_null_stg_twitter_ads__tweet_tweet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.116221, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__tweet", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.twitter_ads.stg_twitter_ads__tweet"]}, "compiled_path": "target/compiled/twitter_ads/models/staging/stg_twitter_ads.yml/not_null_stg_twitter_ads__tweet_tweet_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tweet_id\nfrom `mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__tweet`\nwhere tweet_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tweet_id", "file_key_name": "models.stg_twitter_ads__tweet", "attached_node": "model.twitter_ads.stg_twitter_ads__tweet", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tweet_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__tweet')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_country.8bc44f6e39": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_locations_report_country", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_locations_report_country.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_country.8bc44f6e39", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_locations_report_country"], "alias": "not_null_stg_twitter_ads__campaign_locations_report_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1173532, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_locations_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.stg_twitter_ads__campaign_locations_report", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_locations_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_locations_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_date_day.bf69378746": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_locations_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_locations_report_date_day.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_date_day.bf69378746", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_locations_report_date_day"], "alias": "not_null_stg_twitter_ads__campaign_locations_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1185071, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_locations_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__campaign_locations_report", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_locations_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_locations_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_campaign_id.e1ddc306c2": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_locations_report_campaign_id", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_locations_report_campaign_id.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_campaign_id.e1ddc306c2", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_locations_report_campaign_id"], "alias": "not_null_stg_twitter_ads__campaign_locations_report_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.119677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_locations_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_id", "file_key_name": "models.stg_twitter_ads__campaign_locations_report", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_locations_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_locations_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_placement.638fb0cf03": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_locations_report_placement", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_locations_report_placement.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_placement.638fb0cf03", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_locations_report_placement"], "alias": "not_null_stg_twitter_ads__campaign_locations_report_placement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1209497, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_locations_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "placement", "file_key_name": "models.stg_twitter_ads__campaign_locations_report", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_locations_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "placement", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_locations_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_regions_report_region.7b8b6fd555": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_regions_report_region", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_regions_report_region.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_regions_report_region.7b8b6fd555", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_regions_report_region"], "alias": "not_null_stg_twitter_ads__campaign_regions_report_region", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1221085, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_regions_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "region", "file_key_name": "models.stg_twitter_ads__campaign_regions_report", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_regions_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "region", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_regions_report')) }}"}, "namespace": null}}, "test.twitter_ads.not_null_stg_twitter_ads__campaign_regions_report_date_day.e7f9f99776": {"database": "mezo-portal-data", "schema": "dbt_dbt_test__audit", "name": "not_null_stg_twitter_ads__campaign_regions_report_date_day", "resource_type": "test", "package_name": "twitter_ads", "path": "not_null_stg_twitter_ads__campaign_regions_report_date_day.sql", "original_file_path": "models/staging/stg_twitter_ads.yml", "unique_id": "test.twitter_ads.not_null_stg_twitter_ads__campaign_regions_report_date_day.e7f9f99776", "fqn": ["twitter_ads", "staging", "not_null_stg_twitter_ads__campaign_regions_report_date_day"], "alias": "not_null_stg_twitter_ads__campaign_regions_report_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1759221507.1232486, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_regions_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_day", "file_key_name": "models.stg_twitter_ads__campaign_regions_report", "attached_node": "model.twitter_ads.stg_twitter_ads__campaign_regions_report", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('stg_twitter_ads__campaign_regions_report')) }}"}, "namespace": null}}}, "sources": {"source.mezo.raw_other_marketing_costs.other_marketing_costs": {"database": "mezo-portal-data", "schema": "raw_other_marketing_costs", "name": "other_marketing_costs", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/cost_import_sheet.yml", "original_file_path": "models/00_sources/cost_import_sheet.yml", "unique_id": "source.mezo.raw_other_marketing_costs.other_marketing_costs", "fqn": ["mezo", "00_sources", "raw_other_marketing_costs", "other_marketing_costs"], "source_name": "raw_other_marketing_costs", "source_description": "", "loader": "", "identifier": "other_marketing_costs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": null, "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null, "options": {"format": "GOOGLE_SHEETS", "uris": ["https://docs.google.com/spreadsheets/d/1ayInoMFB6jwTUhExq9XmQDuzw6GzYmE88O39kLgjyU8/edit?usp=sharing"], "sheet_range": "Sheet1!A1:H1000", "skip_leading_rows": 1}}, "description": "Other marketing costs imported from Google Sheets", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_other_marketing_costs`.`other_marketing_costs`", "created_at": 1759221507.175381, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_other_marketing_costs", "doc_blocks": []}, "source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__liquidation": {"database": "mezo-portal-data", "schema": "raw_goldsky", "name": "raw_goldsky_musd_trove_manager__liquidation", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/goldsky.yml", "original_file_path": "models/00_sources/goldsky.yml", "unique_id": "source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__liquidation", "fqn": ["mezo", "00_sources", "raw_goldsky", "raw_goldsky_musd_trove_manager__liquidation"], "source_name": "raw_goldsky", "source_description": "", "loader": "", "identifier": "raw_goldsky_musd_trove_manager__liquidation", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/musd_trove_manager/event_type=liquidation/", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "event_date", "data_type": "date", "description": "The date of the event"}], "options": {"format": "PARQUET", "hive_partition_uri_prefix": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/musd_trove_manager/event_type=liquidation", "uris": ["gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/musd_trove_manager/event_type=liquidation/*"]}}, "description": "Liquidation events from the MUSD Trove Manager", "columns": {"vid": {"name": "vid", "description": "Version ID", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block": {"name": "block", "description": "Block number", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as BIGNUMERIC", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of the event", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Contract identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_principal": {"name": "liquidated_principal", "description": "Liquidated principal amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_interest": {"name": "liquidated_interest", "description": "Liquidated interest amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "liquidated_coll": {"name": "liquidated_coll", "description": "Liquidated collateral amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coll_gas_compensation": {"name": "coll_gas_compensation", "description": "Collateral gas compensation", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gas_compensation": {"name": "gas_compensation", "description": "Gas compensation", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Global identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_goldsky`.`raw_goldsky_musd_trove_manager__liquidation`", "created_at": 1759221507.176875, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_goldsky", "doc_blocks": []}, "source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__trove_liquidated": {"database": "mezo-portal-data", "schema": "raw_goldsky", "name": "raw_goldsky_musd_trove_manager__trove_liquidated", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/goldsky.yml", "original_file_path": "models/00_sources/goldsky.yml", "unique_id": "source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__trove_liquidated", "fqn": ["mezo", "00_sources", "raw_goldsky", "raw_goldsky_musd_trove_manager__trove_liquidated"], "source_name": "raw_goldsky", "source_description": "", "loader": "", "identifier": "raw_goldsky_musd_trove_manager__trove_liquidated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/musd_trove_manager/event_type=trove_liquidated/", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "event_date", "data_type": "date", "description": "The date of the event"}], "options": {"format": "PARQUET", "hive_partition_uri_prefix": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/musd_trove_manager/event_type=trove_liquidated", "uris": ["gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/musd_trove_manager/event_type=trove_liquidated/*"]}}, "description": "Trove liquidated events from the MUSD Trove Manager", "columns": {"vid": {"name": "vid", "description": "Version ID", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block": {"name": "block", "description": "Block number", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as BIGNUMERIC", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of the event", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Contract identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrower": {"name": "borrower", "description": "Borrower address", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "debt": {"name": "debt", "description": "Debt amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coll": {"name": "coll", "description": "Collateral amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "operation": {"name": "operation", "description": "Operation type", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Global identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_goldsky`.`raw_goldsky_musd_trove_manager__trove_liquidated`", "created_at": 1759221507.177273, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_goldsky", "doc_blocks": []}, "source.mezo.raw_goldsky.raw_goldsky_borrower_operations_mezo__trove_updated": {"database": "mezo-portal-data", "schema": "raw_goldsky", "name": "raw_goldsky_borrower_operations_mezo__trove_updated", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/goldsky.yml", "original_file_path": "models/00_sources/goldsky.yml", "unique_id": "source.mezo.raw_goldsky.raw_goldsky_borrower_operations_mezo__trove_updated", "fqn": ["mezo", "00_sources", "raw_goldsky", "raw_goldsky_borrower_operations_mezo__trove_updated"], "source_name": "raw_goldsky", "source_description": "", "loader": "", "identifier": "raw_goldsky_borrower_operations_mezo__trove_updated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/borrower_operations_mezo/event_type=trove_updated/", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "event_date", "data_type": "date", "description": "The date of the event"}], "options": {"format": "PARQUET", "hive_partition_uri_prefix": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/borrower_operations_mezo/event_type=trove_updated", "uris": ["gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/borrower_operations_mezo/event_type=trove_updated/*"]}}, "description": "Trove updated events from Borrower Operations", "columns": {"block": {"name": "block", "description": "Block number", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as BIGNUMERIC", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of the event", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Contract identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "borrower": {"name": "borrower", "description": "Borrower address", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "principal": {"name": "principal", "description": "Principal amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "interest": {"name": "interest", "description": "Interest amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coll": {"name": "coll", "description": "Collateral amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "stake": {"name": "stake", "description": "Stake amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "interest_rate": {"name": "interest_rate", "description": "Interest rate", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_interest_update_time": {"name": "last_interest_update_time", "description": "Last interest update time", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "operation": {"name": "operation", "description": "Operation type", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Global identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_goldsky`.`raw_goldsky_borrower_operations_mezo__trove_updated`", "created_at": 1759221507.1776779, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_goldsky", "doc_blocks": []}, "source.mezo.raw_goldsky.raw_goldsky_market_mezo__donated": {"database": "mezo-portal-data", "schema": "raw_goldsky", "name": "raw_goldsky_market_mezo__donated", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/goldsky.yml", "original_file_path": "models/00_sources/goldsky.yml", "unique_id": "source.mezo.raw_goldsky.raw_goldsky_market_mezo__donated", "fqn": ["mezo", "00_sources", "raw_goldsky", "raw_goldsky_market_mezo__donated"], "source_name": "raw_goldsky", "source_description": "", "loader": "", "identifier": "raw_goldsky_market_mezo__donated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/market_mezo/event_type=donated/", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "event_date", "data_type": "date", "description": "The date of the event"}], "options": {"format": "PARQUET", "hive_partition_uri_prefix": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/market_mezo/event_type=donated", "uris": ["gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/market_mezo/event_type=donated/*"]}}, "description": "Donation events from Market", "columns": {"block": {"name": "block", "description": "Block number", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as BIGNUMERIC", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of the event", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Contract identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "donor": {"name": "donor", "description": "Donor address", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "beneficiary_id": {"name": "beneficiary_id", "description": "Beneficiary identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "Recipient address", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Donation amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Global identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_goldsky`.`raw_goldsky_market_mezo__donated`", "created_at": 1759221507.178041, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_goldsky", "doc_blocks": []}, "source.mezo.raw_goldsky.raw_goldsky_market_mezo__order_placed": {"database": "mezo-portal-data", "schema": "raw_goldsky", "name": "raw_goldsky_market_mezo__order_placed", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/goldsky.yml", "original_file_path": "models/00_sources/goldsky.yml", "unique_id": "source.mezo.raw_goldsky.raw_goldsky_market_mezo__order_placed", "fqn": ["mezo", "00_sources", "raw_goldsky", "raw_goldsky_market_mezo__order_placed"], "source_name": "raw_goldsky", "source_description": "", "loader": "", "identifier": "raw_goldsky_market_mezo__order_placed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/market_mezo/event_type=order_placed/", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "event_date", "data_type": "date", "description": "The date of the event"}], "options": {"format": "PARQUET", "hive_partition_uri_prefix": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/market_mezo/event_type=order_placed", "uris": ["gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/market_mezo/event_type=order_placed/*"]}}, "description": "Order placed events from Market", "columns": {"block": {"name": "block", "description": "Block number", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as BIGNUMERIC", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of the event", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Contract identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "Order identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer": {"name": "customer", "description": "Customer address", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "Product identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "Price amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Global identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_goldsky`.`raw_goldsky_market_mezo__order_placed`", "created_at": 1759221507.1783879, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_goldsky", "doc_blocks": []}, "source.mezo.raw_goldsky.raw_goldsky_mezo_bridge_mainnet__assets_locked": {"database": "mezo-portal-data", "schema": "raw_goldsky", "name": "raw_goldsky_mezo_bridge_mainnet__assets_locked", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/goldsky.yml", "original_file_path": "models/00_sources/goldsky.yml", "unique_id": "source.mezo.raw_goldsky.raw_goldsky_mezo_bridge_mainnet__assets_locked", "fqn": ["mezo", "00_sources", "raw_goldsky", "raw_goldsky_mezo_bridge_mainnet__assets_locked"], "source_name": "raw_goldsky", "source_description": "", "loader": "", "identifier": "raw_goldsky_mezo_bridge_mainnet__assets_locked", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/mezo_bridge_mainnet/event_type=assets_locked/", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "event_date", "data_type": "date", "description": "The date of the event"}], "options": {"format": "PARQUET", "hive_partition_uri_prefix": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/mezo_bridge_mainnet/event_type=assets_locked", "uris": ["gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/mezo_bridge_mainnet/event_type=assets_locked/*"]}}, "description": "Assets locked events from Mezo Bridge", "columns": {"block": {"name": "block", "description": "Block number", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as BIGNUMERIC", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of the event", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Contract identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sequence_number": {"name": "sequence_number", "description": "Sequence number", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "recipient": {"name": "recipient", "description": "Recipient address", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "token": {"name": "token", "description": "Token address", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "amount": {"name": "amount", "description": "Amount locked", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Global identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_goldsky`.`raw_goldsky_mezo_bridge_mainnet__assets_locked`", "created_at": 1759221507.1787448, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_goldsky", "doc_blocks": []}, "source.mezo.raw_goldsky.raw_goldsky_mezo_vaults_mezo__transfer": {"database": "mezo-portal-data", "schema": "raw_goldsky", "name": "raw_goldsky_mezo_vaults_mezo__transfer", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/goldsky.yml", "original_file_path": "models/00_sources/goldsky.yml", "unique_id": "source.mezo.raw_goldsky.raw_goldsky_mezo_vaults_mezo__transfer", "fqn": ["mezo", "00_sources", "raw_goldsky", "raw_goldsky_mezo_vaults_mezo__transfer"], "source_name": "raw_goldsky", "source_description": "", "loader": "", "identifier": "raw_goldsky_mezo_vaults_mezo__transfer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/mezo_vaults_mezo/event_type=transfer/", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "event_date", "data_type": "date", "description": "The date of the event"}], "options": {"format": "PARQUET", "hive_partition_uri_prefix": "gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/mezo_vaults_mezo/event_type=transfer", "uris": ["gs://mezo-prod-dp-dwh-lnd-goldsky-cs-0/mezo_vaults_mezo/event_type=transfer/*"]}}, "description": "Transfer events from Mezo Vaults", "columns": {"block": {"name": "block", "description": "Block number", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "block_number": {"name": "block_number", "description": "Block number as BIGNUMERIC", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of the event", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_hash": {"name": "transaction_hash", "description": "Transaction hash", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contract_id": {"name": "contract_id", "description": "Contract identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "from": {"name": "from", "description": "Sender address", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "to": {"name": "to", "description": "Recipient address", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "value": {"name": "value", "description": "Transfer amount", "meta": {}, "data_type": "BIGNUMERIC", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_chain": {"name": "_gs_chain", "description": "Chain identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_gs_gid": {"name": "_gs_gid", "description": "Global identifier", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_goldsky`.`raw_goldsky_mezo_vaults_mezo__transfer`", "created_at": 1759221507.1790926, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_goldsky", "doc_blocks": []}, "source.mezo.raw_coin_gecko.coins": {"database": "mezo-portal-data", "schema": "raw_coin_gecko", "name": "coins", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/coin_gecko.yml", "original_file_path": "models/00_sources/coin_gecko.yml", "unique_id": "source.mezo.raw_coin_gecko.coins", "fqn": ["mezo", "00_sources", "raw_coin_gecko", "coins"], "source_name": "raw_coin_gecko", "source_description": "", "loader": "", "identifier": "coins", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "symbol": {"name": "symbol", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "platforms": {"name": "platforms", "description": "", "meta": {}, "data_type": "JSON", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_dlt_load_id": {"name": "_dlt_load_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_dlt_id": {"name": "_dlt_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_coin_gecko`.`coins`", "created_at": 1759221507.179419, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_coin_gecko", "doc_blocks": []}, "source.mezo.raw_coin_gecko.prices": {"database": "mezo-portal-data", "schema": "raw_coin_gecko", "name": "prices", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/coin_gecko.yml", "original_file_path": "models/00_sources/coin_gecko.yml", "unique_id": "source.mezo.raw_coin_gecko.prices", "fqn": ["mezo", "00_sources", "raw_coin_gecko", "prices"], "source_name": "raw_coin_gecko", "source_description": "", "loader": "", "identifier": "prices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "coin_id": {"name": "coin_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "usd_value": {"name": "usd_value", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_updated_at": {"name": "last_updated_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_dlt_load_id": {"name": "_dlt_load_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_dlt_id": {"name": "_dlt_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_coin_gecko`.`prices`", "created_at": 1759221507.1797614, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_coin_gecko", "doc_blocks": []}, "source.mezo.raw_segment_profiles.tracks_view": {"database": "mezo-portal-data", "schema": "raw_segment_profiles", "name": "tracks_view", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/segment.yml", "original_file_path": "models/00_sources/segment.yml", "unique_id": "source.mezo.raw_segment_profiles.tracks_view", "fqn": ["mezo", "00_sources", "raw_segment_profiles", "tracks_view"], "source_name": "raw_segment_profiles", "source_description": "", "loader": "", "identifier": "tracks_view", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"context_ip": {"name": "context_ip", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_library_name": {"name": "context_library_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_library_version": {"name": "context_library_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_locale": {"name": "context_locale", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_path": {"name": "context_page_path", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_referrer": {"name": "context_page_referrer", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_search": {"name": "context_page_search", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_title": {"name": "context_page_title", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_url": {"name": "context_page_url", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_source_id": {"name": "context_protocols_source_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_violations": {"name": "context_protocols_violations", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_timezone": {"name": "context_timezone", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent": {"name": "context_user_agent", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_brands": {"name": "context_user_agent_data_brands", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_mobile": {"name": "context_user_agent_data_mobile", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_platform": {"name": "context_user_agent_data_platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event": {"name": "event", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_id": {"name": "event_source_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_name": {"name": "event_source_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_slug": {"name": "event_source_slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_text": {"name": "event_text", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loaded_at": {"name": "loaded_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_timestamp": {"name": "original_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_at": {"name": "received_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_id": {"name": "segment_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sent_at": {"name": "sent_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "uuid_ts": {"name": "uuid_ts", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_segment_profiles`.`tracks_view`", "created_at": 1759221507.1801934, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_segment_profiles", "doc_blocks": []}, "source.mezo.raw_segment_profiles.pages_view": {"database": "mezo-portal-data", "schema": "raw_segment_profiles", "name": "pages_view", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/segment.yml", "original_file_path": "models/00_sources/segment.yml", "unique_id": "source.mezo.raw_segment_profiles.pages_view", "fqn": ["mezo", "00_sources", "raw_segment_profiles", "pages_view"], "source_name": "raw_segment_profiles", "source_description": "", "loader": "", "identifier": "pages_view", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"context_campaign_medium": {"name": "context_campaign_medium", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_campaign_name": {"name": "context_campaign_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_campaign_source": {"name": "context_campaign_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_ip": {"name": "context_ip", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_library_name": {"name": "context_library_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_library_version": {"name": "context_library_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_locale": {"name": "context_locale", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_path": {"name": "context_page_path", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_referrer": {"name": "context_page_referrer", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_search": {"name": "context_page_search", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_title": {"name": "context_page_title", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_page_url": {"name": "context_page_url", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_protocols_source_id": {"name": "context_protocols_source_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_timezone": {"name": "context_timezone", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent": {"name": "context_user_agent", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_brands": {"name": "context_user_agent_data_brands", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_mobile": {"name": "context_user_agent_data_mobile", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "context_user_agent_data_platform": {"name": "context_user_agent_data_platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_id": {"name": "event_source_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_name": {"name": "event_source_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "event_source_slug": {"name": "event_source_slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loaded_at": {"name": "loaded_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "original_timestamp": {"name": "original_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_at": {"name": "received_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "referrer": {"name": "referrer", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "search": {"name": "search", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment_id": {"name": "segment_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "sent_at": {"name": "sent_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "title": {"name": "title", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "uuid_ts": {"name": "uuid_ts", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_segment_profiles`.`pages_view`", "created_at": 1759221507.1806028, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_segment_profiles", "doc_blocks": []}, "source.mezo.raw_segment_profiles.identify": {"database": "mezo-portal-data", "schema": "raw_segment_profiles", "name": "identify", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/segment.yml", "original_file_path": "models/00_sources/segment.yml", "unique_id": "source.mezo.raw_segment_profiles.identify", "fqn": ["mezo", "00_sources", "raw_segment_profiles", "identify"], "source_name": "raw_segment_profiles", "source_description": "", "loader": "", "identifier": "identify", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_segment_profiles`.`identify`", "created_at": 1759221507.1808944, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_segment_profiles", "doc_blocks": []}, "source.mezo.raw_segment_profiles.user_identifiers": {"database": "mezo-portal-data", "schema": "raw_segment_profiles", "name": "user_identifiers", "resource_type": "source", "package_name": "mezo", "path": "models/00_sources/segment.yml", "original_file_path": "models/00_sources/segment.yml", "unique_id": "source.mezo.raw_segment_profiles.user_identifiers", "fqn": ["mezo", "00_sources", "raw_segment_profiles", "user_identifiers"], "source_name": "raw_segment_profiles", "source_description": "", "loader": "", "identifier": "user_identifiers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"__profile_version": {"name": "__profile_version", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "canonical_segment_id": {"name": "canonical_segment_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loaded_at": {"name": "loaded_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_at": {"name": "received_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "seq": {"name": "seq", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "uuid_ts": {"name": "uuid_ts", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "value": {"name": "value", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "`mezo-portal-data`.`raw_segment_profiles`.`user_identifiers`", "created_at": 1759221507.1812098, "unrendered_database": "mezo-portal-data", "unrendered_schema": "raw_segment_profiles", "doc_blocks": []}, "source.twitter_ads.twitter_ads.account_history": {"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "account_history", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.account_history", "fqn": ["twitter_ads", "staging", "twitter_ads", "account_history"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "account_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of each account. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads._fivetran_synced"]}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "id": {"name": "id", "description": "The ID of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "timezone_switch_at": {"name": "timezone_switch_at", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "salt": {"name": "salt", "description": "The random encryption key used to has data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": true, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`account_history`", "created_at": 1759221507.1816194, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}, "source.twitter_ads.twitter_ads.campaign_history": {"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "campaign_history", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.campaign_history", "fqn": ["twitter_ads", "staging", "twitter_ads", "campaign_history"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "campaign_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of each campaign. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads._fivetran_synced"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "currency": {"name": "currency", "description": "The currently all metrics for the account are set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "daily_budget_amount_local_micro": {"name": "daily_budget_amount_local_micro", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "duration_in_days": {"name": "duration_in_days", "description": "The time period within which the frequency_cap is achieved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_time": {"name": "end_time", "description": "The time the campaign will end", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "entity_status": {"name": "entity_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "servable": {"name": "servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "standard_delivery": {"name": "standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_time": {"name": "start_time", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}, "funding_instrument_id": {"name": "funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": true, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`campaign_history`", "created_at": 1759221507.1820214, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}, "source.twitter_ads.twitter_ads.line_item_history": {"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "line_item_history", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.line_item_history", "fqn": ["twitter_ads", "staging", "twitter_ads", "line_item_history"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "line_item_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of each line item. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads._fivetran_synced"]}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "automatically_select_bid": {"name": "automatically_select_bid", "description": "Whether automatically optimize bidding is enabled based on daily budget and campaign flight dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bid_amount_local_micro": {"name": "bid_amount_local_micro", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "end_time": {"name": "end_time", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "entity_status": {"name": "entity_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "The name of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_time": {"name": "start_time", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "target_cpa_local_micro": {"name": "target_cpa_local_micro", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": true, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`line_item_history`", "created_at": 1759221507.1824648, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}, "source.twitter_ads.twitter_ads.promoted_tweet_history": {"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "promoted_tweet_history", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.promoted_tweet_history", "fqn": ["twitter_ads", "staging", "twitter_ads", "promoted_tweet_history"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "promoted_tweet_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a version of each promoted tweet. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads._fivetran_synced"]}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.created_at"]}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.deleted"]}, "entity_status": {"name": "entity_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "The ID of the promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads.updated_at"]}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": true, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`promoted_tweet_history`", "created_at": 1759221507.1828384, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}, "source.twitter_ads.twitter_ads.tweet_url": {"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "tweet_url", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.tweet_url", "fqn": ["twitter_ads", "staging", "twitter_ads", "tweet_url"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "tweet_url", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a URL used in a tweet.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads._fivetran_synced"]}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "index": {"name": "index", "description": "The index of the URL within the tweet (ie if there are multiple URLs in the tweet).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "indices": {"name": "indices", "description": "The start and end point of where the URL is placed in the tweet text.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url": {"name": "url", "description": "The 't.co' shortened URL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": true, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`tweet_url`", "created_at": 1759221507.1831837, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}, "source.twitter_ads.twitter_ads.promoted_tweet_report": {"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "promoted_tweet_report", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.promoted_tweet_report", "fqn": ["twitter_ads", "staging", "twitter_ads", "promoted_tweet_report"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "promoted_tweet_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of a promoted tweet on a given day, in its defined placement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads._fivetran_synced"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the promoted tweet on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the related promoted tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_assisted": {"name": "mobile_conversion_payment_info_additions_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_engagement": {"name": "mobile_conversion_payment_info_additions_post_engagement", "description": "Number of **post-engagement** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_view": {"name": "mobile_conversion_payment_info_additions_post_view", "description": "Number of **post-view** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_assisted": {"name": "mobile_conversion_add_to_wishlists_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_engagement": {"name": "mobile_conversion_add_to_wishlists_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_view": {"name": "mobile_conversion_add_to_wishlists_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_assisted": {"name": "mobile_conversion_add_to_carts_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_engagement": {"name": "mobile_conversion_add_to_carts_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_view": {"name": "mobile_conversion_add_to_carts_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_metric": {"name": "conversion_sign_ups_metric", "description": "Total number of sign ups. This is the same as the sum of post views, post engagements and assisted sign ups. This is also the sum of website and mobile app sign ups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_assisted": {"name": "mobile_conversion_checkouts_initiated_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_engagement": {"name": "mobile_conversion_checkouts_initiated_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_view": {"name": "mobile_conversion_checkouts_initiated_post_view", "description": "Number of **post-view** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_assisted": {"name": "mobile_conversion_searches_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_engagement": {"name": "mobile_conversion_searches_post_engagement", "description": "Number of **post-engagement** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_view": {"name": "mobile_conversion_searches_post_view", "description": "Number of **post-view** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_assisted": {"name": "mobile_conversion_content_views_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_engagement": {"name": "mobile_conversion_content_views_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_view": {"name": "mobile_conversion_content_views_post_view", "description": "Number of **post-view** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_sale_amount": {"name": "mobile_conversion_payment_info_additions_sale_amount", "description": "The sale amount corresponding to mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_sale_amount": {"name": "mobile_conversion_add_to_wishlists_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_sale_amount": {"name": "mobile_conversion_add_to_carts_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_sale_amount": {"name": "conversion_sign_ups_sale_amount", "description": "The sale amount corresponding to sign ups.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_sale_amount": {"name": "mobile_conversion_checkouts_initiated_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_sale_amount": {"name": "mobile_conversion_searches_sale_amount", "description": "The sale amount corresponding to mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_sale_amount": {"name": "mobile_conversion_content_views_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": true, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`promoted_tweet_report`", "created_at": 1759221507.1836307, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}, "source.twitter_ads.twitter_ads.tweet": {"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "tweet", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.tweet", "fqn": ["twitter_ads", "staging", "twitter_ads", "tweet"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "tweet", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a tweet, promoted or not.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads._fivetran_synced"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "id": {"name": "id", "description": "Unique identifier of the tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "If provided, the non-public title of the tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "full_text": {"name": "full_text", "description": "Full text of the tweet's content.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "lang": {"name": "lang", "description": "Two-letter language code of the tweet.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": true, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`tweet`", "created_at": 1759221507.1839747, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}, "source.twitter_ads.twitter_ads.campaign_report": {"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "campaign_report", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.campaign_report", "fqn": ["twitter_ads", "staging", "twitter_ads", "campaign_report"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "campaign_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of an ad campaign on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads._fivetran_synced"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the campaign on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the campaign on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the campaign on that day. This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the ad campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the campaign on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_assisted": {"name": "mobile_conversion_payment_info_additions_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_engagement": {"name": "mobile_conversion_payment_info_additions_post_engagement", "description": "Number of **post-engagement** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_view": {"name": "mobile_conversion_payment_info_additions_post_view", "description": "Number of **post-view** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_assisted": {"name": "mobile_conversion_add_to_wishlists_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_engagement": {"name": "mobile_conversion_add_to_wishlists_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_view": {"name": "mobile_conversion_add_to_wishlists_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_assisted": {"name": "mobile_conversion_add_to_carts_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_engagement": {"name": "mobile_conversion_add_to_carts_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_view": {"name": "mobile_conversion_add_to_carts_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_metric": {"name": "conversion_sign_ups_metric", "description": "Total number of sign ups. This is the same as the sum of post views, post engagements and assisted sign ups. This is also the sum of website and mobile app sign ups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_assisted": {"name": "mobile_conversion_checkouts_initiated_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_engagement": {"name": "mobile_conversion_checkouts_initiated_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_view": {"name": "mobile_conversion_checkouts_initiated_post_view", "description": "Number of **post-view** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_assisted": {"name": "mobile_conversion_searches_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_engagement": {"name": "mobile_conversion_searches_post_engagement", "description": "Number of **post-engagement** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_view": {"name": "mobile_conversion_searches_post_view", "description": "Number of **post-view** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_assisted": {"name": "mobile_conversion_content_views_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_engagement": {"name": "mobile_conversion_content_views_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_view": {"name": "mobile_conversion_content_views_post_view", "description": "Number of **post-view** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_sale_amount": {"name": "mobile_conversion_payment_info_additions_sale_amount", "description": "The sale amount corresponding to mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_sale_amount": {"name": "mobile_conversion_add_to_wishlists_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_sale_amount": {"name": "mobile_conversion_add_to_carts_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_sale_amount": {"name": "conversion_sign_ups_sale_amount", "description": "The sale amount corresponding to sign ups.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_sale_amount": {"name": "mobile_conversion_checkouts_initiated_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_sale_amount": {"name": "mobile_conversion_searches_sale_amount", "description": "The sale amount corresponding to mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_sale_amount": {"name": "mobile_conversion_content_views_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": true, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`campaign_report`", "created_at": 1759221507.1844373, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}, "source.twitter_ads.twitter_ads.line_item_report": {"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "line_item_report", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.line_item_report", "fqn": ["twitter_ads", "staging", "twitter_ads", "line_item_report"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "line_item_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of a line item (ad group) on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": ["doc.twitter_ads._fivetran_synced"]}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the line item on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_assisted": {"name": "mobile_conversion_payment_info_additions_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_engagement": {"name": "mobile_conversion_payment_info_additions_post_engagement", "description": "Number of **post-engagement** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_view": {"name": "mobile_conversion_payment_info_additions_post_view", "description": "Number of **post-view** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_assisted": {"name": "mobile_conversion_add_to_wishlists_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_engagement": {"name": "mobile_conversion_add_to_wishlists_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_view": {"name": "mobile_conversion_add_to_wishlists_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_assisted": {"name": "mobile_conversion_add_to_carts_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_engagement": {"name": "mobile_conversion_add_to_carts_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_view": {"name": "mobile_conversion_add_to_carts_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_metric": {"name": "conversion_sign_ups_metric", "description": "Total number of sign ups. This is the same as the sum of post views, post engagements and assisted sign ups. This is also the sum of website and mobile app sign ups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_assisted": {"name": "mobile_conversion_checkouts_initiated_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_engagement": {"name": "mobile_conversion_checkouts_initiated_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_view": {"name": "mobile_conversion_checkouts_initiated_post_view", "description": "Number of **post-view** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_assisted": {"name": "mobile_conversion_searches_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_engagement": {"name": "mobile_conversion_searches_post_engagement", "description": "Number of **post-engagement** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_view": {"name": "mobile_conversion_searches_post_view", "description": "Number of **post-view** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_assisted": {"name": "mobile_conversion_content_views_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_engagement": {"name": "mobile_conversion_content_views_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_view": {"name": "mobile_conversion_content_views_post_view", "description": "Number of **post-view** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_sale_amount": {"name": "mobile_conversion_payment_info_additions_sale_amount", "description": "The sale amount corresponding to mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_sale_amount": {"name": "mobile_conversion_add_to_wishlists_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_sale_amount": {"name": "mobile_conversion_add_to_carts_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_sale_amount": {"name": "conversion_sign_ups_sale_amount", "description": "The sale amount corresponding to sign ups.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_sale_amount": {"name": "mobile_conversion_checkouts_initiated_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_sale_amount": {"name": "mobile_conversion_searches_sale_amount", "description": "The sale amount corresponding to mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_sale_amount": {"name": "mobile_conversion_content_views_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": true, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`line_item_report`", "created_at": 1759221507.184863, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}}, "macros": {"macro.mezo.format_currency": {"name": "format_currency", "resource_type": "macro", "package_name": "mezo", "path": "macros/currency_conversions.sql", "original_file_path": "macros/currency_conversions.sql", "unique_id": "macro.mezo.format_currency", "macro_sql": "{% macro format_currency(column_to_format, asset_column) %}\n    (\n        coalesce(safe_cast({{ column_to_format }} as numeric), 0) / case\n            when {{ asset_column }} in ('usdc', 'usdt')\n            then 1e6\n            when {{ asset_column }} in ('wbtc', 'fbtc', 'cbbtc', 'swbtc')\n            then 1e8\n            else 1e18\n        end\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2346344, "supported_languages": null}, "macro.mezo.format_musd_currency_columns": {"name": "format_musd_currency_columns", "resource_type": "macro", "package_name": "mezo", "path": "macros/currency_conversions.sql", "original_file_path": "macros/currency_conversions.sql", "unique_id": "macro.mezo.format_musd_currency_columns", "macro_sql": "{% macro format_musd_currency_columns(columns) %}\n    {% for column in columns %}\n        coalesce(safe_cast({{ column }} as numeric), 0) / 1e18 as {{ column }}\n        {% if not loop.last %},{% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.235075, "supported_languages": null}, "macro.mezo.generate_sessionization_incremental_filter": {"name": "generate_sessionization_incremental_filter", "resource_type": "macro", "package_name": "mezo", "path": "macros/generate_sessionization_incremental_filter.sql", "original_file_path": "macros/generate_sessionization_incremental_filter.sql", "unique_id": "macro.mezo.generate_sessionization_incremental_filter", "macro_sql": "{% macro generate_sessionization_incremental_filter(merge_target, filter_tstamp, max_tstamp, operator) %}\n    {{ return(adapter.dispatch('generate_sessionization_incremental_filter', 'dbt_segment') (merge_target, filter_tstamp, max_tstamp, operator)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.mezo.bigquery__generate_sessionization_incremental_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.235813, "supported_languages": null}, "macro.mezo.default__generate_sessionization_incremental_filter": {"name": "default__generate_sessionization_incremental_filter", "resource_type": "macro", "package_name": "mezo", "path": "macros/generate_sessionization_incremental_filter.sql", "original_file_path": "macros/generate_sessionization_incremental_filter.sql", "unique_id": "macro.mezo.default__generate_sessionization_incremental_filter", "macro_sql": "{% macro default__generate_sessionization_incremental_filter(merge_target, filter_tstamp, max_tstamp, operator) %}\n    where {{ filter_tstamp }} {{ operator }} (\n        select\n            {{ dbt.dateadd(\n                'hour',\n                -var('segment_sessionization_trailing_window'),\n                'max(' ~ max_tstamp ~ ')'\n            ) }}\n        from {{ merge_target }} \n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2362683, "supported_languages": null}, "macro.mezo.bigquery__generate_sessionization_incremental_filter": {"name": "bigquery__generate_sessionization_incremental_filter", "resource_type": "macro", "package_name": "mezo", "path": "macros/generate_sessionization_incremental_filter.sql", "original_file_path": "macros/generate_sessionization_incremental_filter.sql", "unique_id": "macro.mezo.bigquery__generate_sessionization_incremental_filter", "macro_sql": "{% macro bigquery__generate_sessionization_incremental_filter(merge_target, filter_tstamp, max_tstamp, operator) %}\n    where {{ filter_tstamp }} {{ operator }} (\n        select \n            timestamp_sub(\n                max({{ max_tstamp }}), \n                interval {{ var('segment_sessionization_trailing_window') }} hour\n                )\n        from {{ merge_target }} \n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2366412, "supported_languages": null}, "macro.mezo.postgres__generate_sessionization_incremental_filter": {"name": "postgres__generate_sessionization_incremental_filter", "resource_type": "macro", "package_name": "mezo", "path": "macros/generate_sessionization_incremental_filter.sql", "original_file_path": "macros/generate_sessionization_incremental_filter.sql", "unique_id": "macro.mezo.postgres__generate_sessionization_incremental_filter", "macro_sql": "{% macro postgres__generate_sessionization_incremental_filter(merge_target, filter_tstamp, max_tstamp, operator) %}\n    where cast({{ filter_tstamp }} as timestamp) {{ operator }} (\n        select\n            {{ dbt.dateadd(\n                'hour',\n                -var('segment_sessionization_trailing_window'),\n                'max(' ~ max_tstamp ~ ')'\n            ) }}\n        from {{ merge_target }} \n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.237217, "supported_languages": null}, "macro.mezo.drop_pr_staging_schemas": {"name": "drop_pr_staging_schemas", "resource_type": "macro", "package_name": "mezo", "path": "macros/drop_pr_staging_schemas.sql", "original_file_path": "macros/drop_pr_staging_schemas.sql", "unique_id": "macro.mezo.drop_pr_staging_schemas", "macro_sql": "{%- macro drop_pr_staging_schemas(schema_suffix=null, PR_number=null) %}\n\n    {% set pr_cleanup_query %}\n        with pr_staging_schemas as (\n            select schema_name\n            from INFORMATION_SCHEMA.SCHEMATA\n            where 1!=1\n            {% if PR_number %}\n                or schema_name like 'pr_'||{{ PR_number }}||'__%'\n            {% endif %}\n            {% if schema_suffix %}\n                or schema_name like '{{ \"%\" ~ schema_suffix }}'\n            {% endif %}\n        )\n\n        select\n            'drop schema if exists '||schema_name||' cascade;' as drop_command\n        from pr_staging_schemas\n    {% endset %}\n\n    {% do log(pr_cleanup_query, info=TRUE) %}\n\n    {% set drop_commands = run_query(pr_cleanup_query).columns[0].values() %}\n\n    {% if drop_commands %}\n        {% for drop_command in drop_commands %}\n            {% do log(drop_command, True) %} {% do run_query(drop_command) %}\n        {% endfor %}\n    {% else %} {% do log(\"No schemas to drop.\", True) %}\n    {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2385986, "supported_languages": null}, "macro.mezo.categorize_operation": {"name": "categorize_operation", "resource_type": "macro", "package_name": "mezo", "path": "macros/loan_categorization.sql", "original_file_path": "macros/loan_categorization.sql", "unique_id": "macro.mezo.categorize_operation", "macro_sql": "{% macro categorize_operation(operation) %}\n    case\n        when operation = \"0\"\n        then \"new_loan\"\n        when operation = \"1\"\n        then \"closed_loan\"\n        when operation = \"2\"\n        then \"adjusted_loan\"\n        when operation = \"3\"\n        then \"refinanced_loan\"\n        else \"unknown_operation\"\n    end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2388315, "supported_languages": null}, "macro.mezo.url_without_query_strings": {"name": "url_without_query_strings", "resource_type": "macro", "package_name": "mezo", "path": "macros/url_parsing.sql", "original_file_path": "macros/url_parsing.sql", "unique_id": "macro.mezo.url_without_query_strings", "macro_sql": "{% macro url_without_query_strings(url) %}\n    regexp_replace({{ url }}, '\\\\?.*$', '')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2390337, "supported_languages": null}, "macro.mezo.resolve_identities": {"name": "resolve_identities", "resource_type": "macro", "package_name": "mezo", "path": "macros/add_id_graph_goldsky.sql", "original_file_path": "macros/add_id_graph_goldsky.sql", "unique_id": "macro.mezo.resolve_identities", "macro_sql": "{% macro resolve_identities(source_ref, join_key) %}\n    with\n        goldsky as (select * from {{ source_ref }}),\n\n        graph as (\n            select *\n            from {{ ref(\"stg_segment_profiles__user_identifiers\") }}\n            where id_type = 'wallet_address'\n        ),\n\n        joined as (\n            select\n                goldsky.*,\n                graph.trait_value is not null as is_in_graph,\n                coalesce(\n                    graph.canonical_segment_id, goldsky.{{ join_key }}\n                ) as canonical_segment_id\n            from goldsky\n            left join graph on lower(goldsky.{{ join_key }}) = lower(graph.trait_value)\n        )\n\n    select *\n    from joined\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.239455, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {% if catalog_relation.table_format == 'iceberg' and not temporary %}with connection default{% endif %}\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {%- set submission_method = config.get(\"submission_method\", \"serverless\") -%}\n    {%- if submission_method in (\"serverless\", \"cluster\") -%}\n      {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n    {%- elif submission_method == \"bigframes\" -%}\n      {{ bigframes_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported dataframe syntax, it got %s\" % submission_method) %} {%- endif -%}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table", "macro.dbt_bigquery.bigframes_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2439702, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2446392, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2448254, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2450235, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2452173, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2454145, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.245681, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2460456, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.246258, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.246803, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.247298, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2481866, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.24842, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.248796, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.249144, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.249407, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2497683, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2501004, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.251913, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2524145, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2526536, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2528427, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.255861, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2576954, "supported_languages": null}, "macro.dbt_bigquery.bigframes_write_table": {"name": "bigframes_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.bigframes_write_table", "macro_sql": "{% macro bigframes_write_table(compiled_code, target_relation) %}\nimport bigframes.pandas as bpd\nbpd.options.compute.extra_query_labels[\"bigframes-dbt-api\"] = \"python-model-table\"\nbpd.options.bigquery.application_name = f\"dbt-bigquery-{{dbt_version}}\"\nbpd.options.bigquery.ordering_mode = \"partial\"\nbpd.options.bigquery.project = \"{{ target.project }}\"\n{% if target.location %}\nbpd.options.bigquery.location = \"{{ target.location }}\"\n{% endif %}\nsession = bpd.get_global_session()\n{{ compiled_code }}\ndbt = dbtObj(bpd.read_gbq)\ndf = model(dbt, session)\ndf.to_gbq(\"{{ target_relation }}\", if_exists=\"replace\")\ndf._session.close()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2580948, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2583573, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    drop table if exists {{ this_relation }};\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }};\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.258594, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2591422, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2600384, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_validate_microbatch_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2621253, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2625034, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2634497, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2647216, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2702847, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.materialization_materialized_view_bigquery": {"name": "materialization_materialized_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_bigquery.materialization_materialized_view_bigquery", "macro_sql": "{% materialization materialized_view, adapter='bigquery' -%}\n\n    {% set relations = materialization_materialized_view_default() %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {{ return(relations) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.materialization_materialized_view_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2710845, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.271455, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2716935, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override, model['config']['delimiter']) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2726984, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2748418, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2764904, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n    {# static #}\n    {% if partitions is not none and partitions != [] %}\n        {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n\n    {# dynamic #}\n    {% else %}\n        {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2772224, "supported_languages": null}, "macro.dbt_bigquery.bq_static_select_insert_overwrite_sql": {"name": "bq_static_select_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_select_insert_overwrite_sql", "macro_sql": "{% macro bq_static_select_insert_overwrite_sql(tmp_relation, sql, partition_by, tmp_relation_exists) %}\n  {%- set source_sql -%}\n  (\n    {% if tmp_relation_exists %}\n      select\n        {% if partition_by.time_ingestion_partitioning %}\n          {{ partition_by.insertable_time_partitioning_field() }},\n        {% endif %}\n        * from {{ tmp_relation }}\n    {%- elif partition_by.time_ingestion_partitioning -%}\n      {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, true) }}\n    {%- else -%}\n      {{ sql }}\n    {%- endif %}\n  )\n  {%- endset -%}\n  {{ return(source_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2778792, "supported_languages": null}, "macro.dbt_bigquery.bq_static_copy_partitions_insert_overwrite_sql": {"name": "bq_static_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_static_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, partition_by, partitions, tmp_relation_exists\n) %}\n\n    {%- if tmp_relation_exists is false -%}\n        {%- set source_sql = bq_static_select_insert_overwrite_sql(tmp_relation, sql, partition_by, tmp_relation_exists) %}\n\n        {# -- we run temp table creation in a separate script to move to partitions copy if it doesn't already exist #}\n        {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n          {{ bq_create_table_as(partition_by, true, tmp_relation, source_sql, 'sql')\n        }}\n        {%- endcall %}\n    {%- endif -%}\n\n    {%- set partitions_sql -%}\n\tselect\n\t    cast(partition_literal as timestamp) as partition_ts\n\tfrom unnest([\n\t    {{ partitions | join(', ') }}\n\t]) as partition_literal\n    {%- endset -%}\n\n    {%- set resolved_partitions = run_query(partitions_sql).columns[0].values() -%}\n\n    {% do bq_copy_partitions(tmp_relation, target_relation, resolved_partitions, partition_by) %}\n\n    {# clean up temp table #}\n    drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_select_insert_overwrite_sql", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2788942, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n    {%- if copy_partitions %}\n        {{ bq_static_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, tmp_relation_exists) }}\n    {% else -%}\n        {% set predicate -%}\n            {{ partition_by.render_wrapped(alias='dbt_internal_dest') }} in (\n                {{ partitions | join (', ') }}\n            )\n        {%- endset %}\n\n        {%- set source_sql = bq_static_select_insert_overwrite_sql(tmp_relation, sql, partition_by, tmp_relation_exists) %}\n\t{#\n\t  -- when the model sql is inserted directly into the merge statement,\n\t  -- we need to prepend it with the user-defined `sql_header`. this is\n\t  -- important when the model sql references elements like variables or udfs\n\t  -- defined in the header.\n\n\t  -- in the case where a temporary table is created first (i.e., the\n\t  -- \"temp table exists\" path), the `sql_header` is already included via\n\t  -- the `create_table_as` macro, so no additional handling is needed.\n\t#}\n\n        -- 1. run the merge statement\n        {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n        {%- if tmp_relation_exists -%}\n        -- 2. clean up the temp table\n        drop table if exists {{ tmp_relation }};\n        {%- endif -%}\n\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_static_select_insert_overwrite_sql", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2798865, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.280783, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.282215, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2836893, "supported_languages": null}, "macro.dbt_bigquery.bq_validate_microbatch_config": {"name": "bq_validate_microbatch_config", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_validate_microbatch_config", "macro_sql": "{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.284728, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_microbatch_build_sql": {"name": "bq_generate_microbatch_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/microbatch.sql", "original_file_path": "macros/materializations/incremental_strategy/microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro_sql": "{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2851946, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2859027, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2867115, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.287442, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2879875, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2883213, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.289173, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.289663, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.289823, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.290044, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2902496, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2907114, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2908282, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2911046, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2913358, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2917578, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2920177, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/string_literal.sql", "original_file_path": "macros/utils/string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.292206, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date": {"name": "bigquery__date", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt_bigquery.bigquery__date", "macro_sql": "{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2924728, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2927818, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2930174, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2936692, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2939174, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2945268, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.296262, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2965856, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.296885, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2970307, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2972214, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.297737, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2985435, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2993147, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.2995625, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.300187, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3004584, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3010337, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3012621, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3023956, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3030257, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3037753, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3045044, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3051336, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3055377, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3057358, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.306015, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3077974, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3080595, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3083475, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.308599, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.308957, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3091435, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.309369, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3097672, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3099627, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3109496, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3110802, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3112185, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3116262, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.311786, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3121705, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3133, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3144987, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3151722, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3156781, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3159966, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3163564, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3172612, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3174684, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3187556, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.319291, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3200698, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3207161, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3208232, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3219645, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3222253, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3224201, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3226364, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.32283, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3232043, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3236272, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.324029, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3267572, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3294764, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3315003, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3320258, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3323474, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3342838, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3346157, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.335461, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.336232, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.337617, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3399372, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3402755, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3412387, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3415945, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3424401, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3434849, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3442261, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3450913, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.345398, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.346355, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3471758, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.347478, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3477411, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3481088, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3483498, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3487413, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.348987, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.349318, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3495772, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3497796, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3500166, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.350235, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3508172, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3522902, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3538997, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3554544, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3565881, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3620517, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3624837, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.362733, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3659909, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.366343, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3665218, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3676603, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.36883, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.369132, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3697908, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3700433, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.370227, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3704162, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3706086, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3708239, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.370986, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3716183, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.371863, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.373653, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.376932, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3821456, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3847065, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.385141, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3853629, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.385494, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.385715, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3858755, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.386139, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.386448, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             #}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3919616, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.392253, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.392936, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.393485, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3942657, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.394848, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3952136, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3956816, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3964171, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.396735, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3970256, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.3996708, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.399934, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4002402, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.401503, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.401742, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4019706, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4038067, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4058738, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.406444, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4075382, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4094937, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.412427, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4131308, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.413648, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4139378, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4147973, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4152148, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.415742, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4160643, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.41624, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4165504, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4166706, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4170716, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4174092, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4176285, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4180179, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4182465, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4185774, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4187324, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4190505, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.419264, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4196382, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4198227, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.420634, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4214485, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4217696, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4222476, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.422621, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4228053, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4232757, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4236217, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.423968, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4241564, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4250698, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4252694, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4254806, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4256992, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4259107, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4261065, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4263136, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4265573, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.426773, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.426969, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4271767, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4273665, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4275908, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4277856, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4281876, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.428575, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.428947, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4297225, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4300861, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.430262, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.430747, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4309678, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4312582, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4316227, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4318063, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4321895, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4324117, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.432831, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.433218, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4335423, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4337614, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4341226, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.434312, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4347599, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4349883, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.435336, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4355333, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.435822, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4359298, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4362376, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4363842, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.436957, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4376583, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4379818, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.438126, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4386773, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4392245, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4394677, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.440175, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.440505, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4406683, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4411414, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4417365, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.442133, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4424822, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4431922, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4447808, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4453788, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4459567, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4462242, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.446641, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4470754, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4474041, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4477582, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.448042, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4485974, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.449256, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4494944, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4497797, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4500442, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4504302, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.450728, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4511156, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4513888, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4517455, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4519439, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4522817, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.452479, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4528413, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.45304, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4537194, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.453967, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4543307, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4545586, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4548807, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4550526, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.455431, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4556422, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4565406, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.45671, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4574132, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4576561, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.457841, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.459738, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.460241, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4607127, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4612117, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4614286, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4616952, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4622731, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4629507, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.46315, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4646149, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4648857, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4651973, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.465566, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4657733, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4660866, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.466255, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4670353, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4672735, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4678512, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.468746, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4693363, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.46959, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4698293, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4701679, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4703636, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4707212, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4709218, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4712284, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4715781, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4748304, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4755912, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4770505, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4773257, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4774604, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.478186, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.478598, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4789057, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.479281, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4797761, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.480266, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4807413, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4810805, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4816482, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4820096, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.482385, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4840267, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4847596, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4851308, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.486077, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.487779, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4887462, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4890468, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4899225, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4901388, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4906719, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4910502, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.491359, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.491785, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4920192, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4922574, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.492585, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4932687, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4935737, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4937618, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4947758, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4951115, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4953682, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4957201, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4959593, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.496173, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4964025, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4967356, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4969952, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4973845, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4976392, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.497852, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4982293, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4984434, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.498676, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.498878, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.499138, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4993615, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.4999487, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5001485, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5003366, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5004845, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5010412, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5012655, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5013733, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.50161, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5018294, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.502225, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.502472, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5027115, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5029569, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5035074, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5040522, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5043173, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5047393, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5052285, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5054693, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5057473, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5060937, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5065844, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5071719, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5073574, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.507586, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5081105, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5083518, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.508598, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5088286, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.509003, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5103648, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5105457, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.510777, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5109298, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5113733, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5116303, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5117998, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5120876, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5123622, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5126832, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5129535, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5132418, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5141253, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.514369, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5147114, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5151522, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5166662, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.518089, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.518302, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5187106, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5190873, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.519364, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5196598, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5198944, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5213609, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5218258, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5220592, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5224888, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5227933, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5236285, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5239508, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5249767, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5255377, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.525765, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5260186, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5262368, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5265827, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5271704, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.527768, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5280898, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5284772, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.529001, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5312433, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5321379, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5332582, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.534209, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.535157, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5363078, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5365667, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.537189, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5373468, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.541774, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.541964, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5420713, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.544482, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5460186, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5464506, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.546815, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5471618, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5475554, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5478277, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5480955, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5486317, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5491562, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5496364, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5503213, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5510004, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5521033, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5527263, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.553351, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.553965, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.554414, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5549867, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5560968, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.556643, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5574853, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.557967, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5583718, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.559058, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.560251, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.560778, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5613778, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5623634, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5643702, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5648859, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5653381, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5660539, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5675855, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5690157, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.574138, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5747814, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5759192, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5766582, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5780687, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5785036, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5793536, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5797591, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.580177, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.580573, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5813293, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5823574, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5834563, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5843518, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5863311, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5870774, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.587378, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.587624, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5878797, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5881097, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5883353, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.588591, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5891032, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5906997, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5912447, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5918558, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5921097, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5930686, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5954397, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5959013, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5962243, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5966702, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5974233, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.597829, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5982704, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5986385, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.5988226, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.599416, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6001828, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6004746, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6009588, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6015594, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.602661, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6036606, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.604131, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.605021, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6061738, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6068592, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6072893, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.608009, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6086128, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6097171, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6110175, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6154966, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.616094, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.616448, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6171947, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.618246, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.618646, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6190865, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6199684, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6218073, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6222713, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6231043, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.623632, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6245847, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6249955, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6251895, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6253793, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6255848, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6259255, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6262481, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.626906, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6272743, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6278515, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6283934, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6286628, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.62935, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6297817, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6304789, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.630838, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6310542, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6320145, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.632603, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6329532, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.633203, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6335344, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6337628, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6346767, "supported_languages": null}, "macro.twitter_ads.twitter_ads_persist_pass_through_columns": {"name": "twitter_ads_persist_pass_through_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/twitter_ads_persist_pass_through_columns.sql", "original_file_path": "macros/twitter_ads_persist_pass_through_columns.sql", "unique_id": "macro.twitter_ads.twitter_ads_persist_pass_through_columns", "macro_sql": "{% macro twitter_ads_persist_pass_through_columns(pass_through_variable, identifier=none, transform='', coalesce_with=none, except_variable=none, exclude_fields=[]) %}\n\n{% set except_fields = [] %}\n{% if except_variable is not none %}\n    {# Start creating list of fields to exclude #}\n    {% for item in var(except_variable) %}\n        {% do except_fields.append(item.name) %}\n    {% endfor %}\n{% endif %}\n\n{% for field in exclude_fields %}\n    {% do except_fields.append(field) %}\n{% endfor %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field not in except_fields %}\n        , {{ transform ~ '(' ~ ('coalesce(' if coalesce_with is not none else '') ~ (identifier ~ '.' if identifier else '') ~ field ~ ((', ' ~ coalesce_with ~ ')') if coalesce_with is not none else '') ~ ')' }} as {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6363072, "supported_languages": null}, "macro.twitter_ads.get_tweet_columns": {"name": "get_tweet_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/get_tweet_columns.sql", "original_file_path": "macros/staging/get_tweet_columns.sql", "unique_id": "macro.twitter_ads.get_tweet_columns", "macro_sql": "{% macro get_tweet_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"full_text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"lang\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6371825, "supported_languages": null}, "macro.twitter_ads.get_campaign_locations_report_columns": {"name": "get_campaign_locations_report_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/get_campaign_locations_report_columns.sql", "original_file_path": "macros/staging/get_campaign_locations_report_columns.sql", "unique_id": "macro.twitter_ads.get_campaign_locations_report_columns", "macro_sql": "{% macro get_campaign_locations_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"segment_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"segment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"placement\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_fields')) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_sale_amount_fields')) }}\n\n{{ twitter_ads_add_pass_through_columns(base_columns=columns, pass_through_fields=var('twitter_ads__campaign_locations_report_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_timestamp", "macro.fivetran_utils.add_pass_through_columns", "macro.twitter_ads.twitter_ads_add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6388946, "supported_languages": null}, "macro.twitter_ads.get_line_item_keywords_report_columns": {"name": "get_line_item_keywords_report_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/get_line_item_keywords_report_columns.sql", "original_file_path": "macros/staging/get_line_item_keywords_report_columns.sql", "unique_id": "macro.twitter_ads.get_line_item_keywords_report_columns", "macro_sql": "{% macro get_line_item_keywords_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"line_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"placement\", \"datatype\": dbt.type_string()},\n    {\"name\": \"segment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_fields')) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_sale_amount_fields')) }}\n\n{# Doing it this way in case users were bringing in conversion metrics via passthrough columns prior to us adding them by default #}\n{{ twitter_ads_add_pass_through_columns(base_columns=columns, pass_through_fields=var('twitter_ads__line_item_keywords_report_passthrough_metrics'), except_fields=(var('twitter_ads__conversion_fields') + var('twitter_ads__conversion_sale_amount_fields'))) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_timestamp", "macro.fivetran_utils.add_pass_through_columns", "macro.twitter_ads.twitter_ads_add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.64063, "supported_languages": null}, "macro.twitter_ads.get_account_history_columns": {"name": "get_account_history_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/staging_columns.sql", "original_file_path": "macros/staging/staging_columns.sql", "unique_id": "macro.twitter_ads.get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"approval_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"industry_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"salt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timezone_switch_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6431828, "supported_languages": null}, "macro.twitter_ads.get_campaign_history_columns": {"name": "get_campaign_history_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/staging_columns.sql", "original_file_path": "macros/staging/staging_columns.sql", "unique_id": "macro.twitter_ads.get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"daily_budget_amount_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"duration_in_days\", \"datatype\": dbt.type_int()},\n    {\"name\": \"end_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"entity_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"frequency_cap\", \"datatype\": dbt.type_int()},\n    {\"name\": \"funding_instrument_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"servable\", \"datatype\": \"boolean\"},\n    {\"name\": \"standard_delivery\", \"datatype\": \"boolean\"},\n    {\"name\": \"start_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"total_budget_amount_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6452234, "supported_languages": null}, "macro.twitter_ads.get_line_item_history_columns": {"name": "get_line_item_history_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/staging_columns.sql", "original_file_path": "macros/staging/staging_columns.sql", "unique_id": "macro.twitter_ads.get_line_item_history_columns", "macro_sql": "{% macro get_line_item_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"advertiser_domain\", \"datatype\": dbt.type_string()},\n    {\"name\": \"advertiser_user_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"automatically_select_bid\", \"datatype\": \"boolean\"},\n    {\"name\": \"bid_amount_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"bid_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bid_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"creative_source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"end_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"entity_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"objective\", \"datatype\": dbt.type_string()},\n    {\"name\": \"optimization\", \"datatype\": dbt.type_string()},\n    {\"name\": \"primary_web_event_tag\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"target_cpa_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total_budget_amount_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.647709, "supported_languages": null}, "macro.twitter_ads.get_promoted_tweet_history_columns": {"name": "get_promoted_tweet_history_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/staging_columns.sql", "original_file_path": "macros/staging/staging_columns.sql", "unique_id": "macro.twitter_ads.get_promoted_tweet_history_columns", "macro_sql": "{% macro get_promoted_tweet_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"approval_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"entity_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"line_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tweet_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6486974, "supported_languages": null}, "macro.twitter_ads.get_tweet_url_columns": {"name": "get_tweet_url_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/staging_columns.sql", "original_file_path": "macros/staging/staging_columns.sql", "unique_id": "macro.twitter_ads.get_tweet_url_columns", "macro_sql": "{% macro get_tweet_url_columns() %}\n\n{% set columns = [\n    {\"name\": \"display_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expanded_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"indices\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tweet_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6494815, "supported_languages": null}, "macro.twitter_ads.get_promoted_tweet_report_columns": {"name": "get_promoted_tweet_report_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/staging_columns.sql", "original_file_path": "macros/staging/staging_columns.sql", "unique_id": "macro.twitter_ads.get_promoted_tweet_report_columns", "macro_sql": "{% macro get_promoted_tweet_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"placement\", \"datatype\": dbt.type_string()},\n    {\"name\": \"promoted_tweet_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_fields')) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_sale_amount_fields')) }}\n\n{# Doing it this way in case users were bringing in conversion metrics via passthrough columns prior to us adding them by default #}\n{{ twitter_ads_add_pass_through_columns(base_columns=columns, pass_through_fields=var('twitter_ads__promoted_tweet_report_passthrough_metrics'), except_fields=(var('twitter_ads__conversion_fields') + var('twitter_ads__conversion_sale_amount_fields'))) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_timestamp", "macro.fivetran_utils.add_pass_through_columns", "macro.twitter_ads.twitter_ads_add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6509058, "supported_languages": null}, "macro.twitter_ads.twitter_ads_add_pass_through_columns": {"name": "twitter_ads_add_pass_through_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/twitter_ads_add_pass_through_columns.sql", "original_file_path": "macros/staging/twitter_ads_add_pass_through_columns.sql", "unique_id": "macro.twitter_ads.twitter_ads_add_pass_through_columns", "macro_sql": "{% macro twitter_ads_add_pass_through_columns(base_columns, pass_through_fields, except_fields=[]) %}\n\n{% if pass_through_fields %}\n    {% for column in pass_through_fields %}\n\n        {% if column is mapping %}\n        {% set col_name = column.alias|default(column.name)|lower %}\n        \n            {% if col_name not in except_fields %}\n                {% if column.alias %}\n                    {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n                {% else %}\n                    {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n                {% endif %}\n            {% endif %}\n\n        {% else %}\n            {% if column|lower not in except_fields %}\n                {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n            {% endif %}\n        {% endif %}\n\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.652625, "supported_languages": null}, "macro.twitter_ads.get_line_item_report_columns": {"name": "get_line_item_report_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/get_line_item_report_columns.sql", "original_file_path": "macros/staging/get_line_item_report_columns.sql", "unique_id": "macro.twitter_ads.get_line_item_report_columns", "macro_sql": "{% macro get_line_item_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"line_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"placement\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt.type_int()},\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_fields')) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_sale_amount_fields')) }}\n\n{# Doing it this way in case users were bringing in conversion metrics via passthrough columns prior to us adding them by default #}\n{{ twitter_ads_add_pass_through_columns(base_columns=columns, pass_through_fields=var('twitter_ads__line_item_report_passthrough_metrics'), except_fields=(var('twitter_ads__conversion_fields') + var('twitter_ads__conversion_sale_amount_fields'))) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_timestamp", "macro.fivetran_utils.add_pass_through_columns", "macro.twitter_ads.twitter_ads_add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6542687, "supported_languages": null}, "macro.twitter_ads.twitter_ads_fill_pass_through_columns": {"name": "twitter_ads_fill_pass_through_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/twitter_ads_fill_pass_through_columns.sql", "original_file_path": "macros/staging/twitter_ads_fill_pass_through_columns.sql", "unique_id": "macro.twitter_ads.twitter_ads_fill_pass_through_columns", "macro_sql": "{% macro twitter_ads_fill_pass_through_columns(pass_through_fields, except=[]) %}\n\n{% if pass_through_fields %}\n    {% for field in pass_through_fields %}\n        {% if (field.alias if field.alias else field.name) not in except %}\n            {% if field.transform_sql %}\n                , coalesce(cast({{ field.transform_sql }} as {{ dbt.type_float() }}), 0) as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , coalesce(cast({{ field.alias if field.alias else field.name }} as {{ dbt.type_float() }}), 0) as {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6553667, "supported_languages": null}, "macro.twitter_ads.twitter_ads_extract_url_parameter": {"name": "twitter_ads_extract_url_parameter", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/twitter_ads_extract_url_parameters.sql", "original_file_path": "macros/staging/twitter_ads_extract_url_parameters.sql", "unique_id": "macro.twitter_ads.twitter_ads_extract_url_parameter", "macro_sql": "{% macro twitter_ads_extract_url_parameter(field, url_parameter) -%}\n\n{{ return(adapter.dispatch('twitter_ads_extract_url_parameter', 'twitter_ads') (field, url_parameter)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.twitter_ads.default__twitter_ads_extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6557977, "supported_languages": null}, "macro.twitter_ads.default__twitter_ads_extract_url_parameter": {"name": "default__twitter_ads_extract_url_parameter", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/twitter_ads_extract_url_parameters.sql", "original_file_path": "macros/staging/twitter_ads_extract_url_parameters.sql", "unique_id": "macro.twitter_ads.default__twitter_ads_extract_url_parameter", "macro_sql": "{% macro default__twitter_ads_extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6560056, "supported_languages": null}, "macro.twitter_ads.spark__twitter_ads_extract_url_parameter": {"name": "spark__twitter_ads_extract_url_parameter", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/twitter_ads_extract_url_parameters.sql", "original_file_path": "macros/staging/twitter_ads_extract_url_parameters.sql", "unique_id": "macro.twitter_ads.spark__twitter_ads_extract_url_parameter", "macro_sql": "{% macro spark__twitter_ads_extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6562777, "supported_languages": null}, "macro.twitter_ads.get_campaign_regions_report_columns": {"name": "get_campaign_regions_report_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/get_campaign_regions_report_columns.sql", "original_file_path": "macros/staging/get_campaign_regions_report_columns.sql", "unique_id": "macro.twitter_ads.get_campaign_regions_report_columns", "macro_sql": "{% macro get_campaign_regions_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"location_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"segment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"segment_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"placement\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_fields')) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_sale_amount_fields')) }}\n\n{{ twitter_ads_add_pass_through_columns(base_columns=columns, pass_through_fields=var('twitter_ads__campaign_regions_report_passthrough_metrics')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_timestamp", "macro.fivetran_utils.add_pass_through_columns", "macro.twitter_ads.twitter_ads_add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6582165, "supported_languages": null}, "macro.twitter_ads.get_campaign_report_columns": {"name": "get_campaign_report_columns", "resource_type": "macro", "package_name": "twitter_ads", "path": "macros/staging/get_campaign_report_columns.sql", "original_file_path": "macros/staging/get_campaign_report_columns.sql", "unique_id": "macro.twitter_ads.get_campaign_report_columns", "macro_sql": "{% macro get_campaign_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"impressions\", \"datatype\": dbt.type_int()},\n    {\"name\": \"placement\", \"datatype\": dbt.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_fields')) }}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('twitter_ads__conversion_sale_amount_fields')) }}\n\n{# Doing it this way in case users were bringing in conversion metrics via passthrough columns prior to us adding them by default #}\n{{ twitter_ads_add_pass_through_columns(base_columns=columns, pass_through_fields=var('twitter_ads__campaign_report_passthrough_metrics'), except_fields=(var('twitter_ads__conversion_fields') + var('twitter_ads__conversion_sale_amount_fields'))) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_timestamp", "macro.fivetran_utils.add_pass_through_columns", "macro.twitter_ads.twitter_ads_add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.659851, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6612175, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6616578, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n    {%- set columns_and_partitions = columns | list -%}\n    {%- if partitions -%}\n        {%- for i in partitions -%}\n            {%- if i.name not in columns_and_partitions | list | map(attribute='name') -%}\n                {%- do columns_and_partitions.append(i) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns | length > 0 %} (\n        {% for column in columns_and_partitions %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.664218, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6646347, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6653934, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6656559, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6658928, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not dbt_external_tables.redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6668375, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.670329, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.672009, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6732333, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.673656, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6738808, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.674288, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.674566, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6748028, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6768277, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6779761, "supported_languages": null}, "macro.dbt_external_tables.fabric__create_external_schema": {"name": "fabric__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/create_external_schema.sql", "original_file_path": "macros/plugins/fabric/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.fabric__create_external_schema", "macro_sql": "{% macro fabric__create_external_schema(source_node) %}\n    {# https://learn.microsoft.com/en-us/sql/t-sql/statements/create-schema-transact-sql?view=sql-server-ver16 #}\n\n    {% set ddl %}\n        IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ source_node.schema }}')\n        BEGIN\n        EXEC('CREATE SCHEMA [{{ source_node.schema }}]')\n        END \n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6784046, "supported_languages": null}, "macro.dbt_external_tables.fabric__get_external_build_plan": {"name": "fabric__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/get_external_build_plan.sql", "original_file_path": "macros/plugins/fabric/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.fabric__get_external_build_plan", "macro_sql": "{% macro fabric__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.679531, "supported_languages": null}, "macro.dbt_external_tables.fabric__create_external_table": {"name": "fabric__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/create_external_table.sql", "original_file_path": "macros/plugins/fabric/create_external_table.sql", "unique_id": "macro.dbt_external_tables.fabric__create_external_table", "macro_sql": "{% macro fabric__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6813545, "supported_languages": null}, "macro.dbt_external_tables.fabric__dropif": {"name": "fabric__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/helpers/dropif.sql", "original_file_path": "macros/plugins/fabric/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.fabric__dropif", "macro_sql": "{% macro fabric__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6818564, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_schema": {"name": "snowflake__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_schema.sql", "original_file_path": "macros/plugins/snowflake/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_schema", "macro_sql": "{% macro snowflake__create_external_schema(source_node) %}\n\n    {% set schema_exists_query %}\n        show terse schemas like '{{ source_node.schema }}' in database {{ source_node.database }} limit 1;\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}    \n\n    {% if schema_exists %}\n        {% set ddl %}\n            select 'Schema {{ source_node.schema }} exists' from dual;\n        {% endset %}\n    {% else %}\n        {% set fqn %}\n            {% if source_node.database %}\n                {{ source_node.database }}.{{ source_node.schema }}\n            {% else %}\n                {{ source_node.schema }}\n            {% endif %}\n        {% endset %}\n\n        {% set ddl %}\n            create schema if not exists {{ fqn }};\n        {% endset %}\n    {% endif %}\n\n    {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6832063, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6850026, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    {% set delta_format = (external.table_format | lower == \"delta\") %}\n    \n    {% set manual_refresh = not auto_refresh %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.686257, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set infer_schema = external.infer_schema -%}\n    {%- set ignore_case = external.ignore_case or false  -%}\n\n    {% if infer_schema %}\n        {% set query_infer_schema %}\n            select * from table( infer_schema( location=>'{{external.location}}', file_format=>'{{external.file_format}}', ignore_case=> {{ ignore_case }}) )\n        {% endset %}\n        {% if execute %}\n            {% set columns_infer = run_query(query_infer_schema) %}\n        {% endif %}\n    {% endif %}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n\n{% set ddl %}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions or infer_schema -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 or infer_schema -}}\n        {%- endfor -%}{%- endif -%}\n        {%- if not infer_schema -%}\n            {%- for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {%- set column_alias -%}\n                    {%- if 'alias' in column and column.quote -%}\n                        {{adapter.quote(column.alias)}}\n                    {%- elif 'alias' in column -%}\n                        {{column.alias}}\n                    {%- else -%}\n                        {{column_quoted}}\n                    {%- endif -%}\n                {%- endset %}\n                {%- set col_expression -%}\n                    {%- if column.expression -%}\n                        {{column.expression}}\n                    {%- else -%}\n                        {%- if ignore_case -%}\n                        {%- set col_id = 'value:c' ~ loop.index if is_csv else 'GET_IGNORE_CASE($1, ' ~ \"'\"~ column_quoted ~\"'\"~ ')' -%}\n                        {%- else -%}\n                        {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                        {%- endif -%}\n                        (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                    {%- endif -%}\n                {%- endset %}\n                {{column_alias}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {% else %}\n        {%- for column in columns_infer %}\n                {%- set col_expression -%}\n                {%- if ignore_case -%}\n                    {%- set col_id = 'GET_IGNORE_CASE($1, ' ~ \"'\"~ column[0] ~\"'\"~ ')' -%}\n                {%- else -%}\n                    {%- set col_id = 'value:' ~ column[0] -%}\n                {%- endif -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column[0]}} {{column[1]}} as ({{col_expression}}::{{column[1]}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {%- endif -%}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.aws_sns_topic -%}\n      aws_sns_topic = '{{external.aws_sns_topic}}'\n    {%- endif %}\n    {% if external.table_format | lower == \"delta\" %}\n      refresh_on_create = false\n    {% endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endset %}\n{# {{ log('ddl: ' ~ ddl, info=True) }} #}\n{{ ddl }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6917825, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6943939, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n\n    {%- if explicit_transaction -%} begin; {%- endif %}\n\n    copy into {{source(source_node.source_name, source_node.name)}}\n    from (\n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            metadata$file_last_modified::timestamp as metadata_file_last_modified,\n            metadata$start_scan_time::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n\n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6962454, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6971052, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6980963, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            metadata_file_last_modified timestamp,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6987822, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_schema": {"name": "bigquery__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_schema.sql", "original_file_path": "macros/plugins/bigquery/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_schema", "macro_sql": "{%- macro bigquery__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            `{{ source_node.database }}`.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set schema_exists_query %}\n        select * from `{{ source_node.database }}`.INFORMATION_SCHEMA.SCHEMATA where schema_name = '{{ source_node.schema }}' limit 1\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}  \n\n    {%- if not schema_exists -%}\n        {%- set ddl -%}\n            create schema if not exists {{ fqn }}\n        {%- endset -%}\n        {{ return(ddl) }}\n    {%- else -%}\n        {{ return('') }}\n    {% endif %} \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.6999848, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% if not dbt_external_tables.create_external_schema(source_node)|length %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% endif %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7013729, "supported_languages": null}, "macro.dbt_external_tables.bigquery__update_external_table_columns": {"name": "bigquery__update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/update_external_table_columns.sql", "original_file_path": "macros/plugins/bigquery/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.bigquery__update_external_table_columns", "macro_sql": "{% macro bigquery__update_external_table_columns(source_node) %}\n    {%- set columns = source_node.columns -%}\n    {%- set relation = source(source_node.source_name, source_node.name) -%}\n    {%- do adapter.update_columns(relation, columns) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7018309, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    {%- set non_string_options = ['max_staleness'] %}\n\n    {% if options is mapping and options.get('connection_name', none) %}\n        {% set connection_name = options.pop('connection_name') %}\n    {% endif %}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        {% if connection_name %}\n            with connection `{{ connection_name }}`\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string and key not in non_string_options -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7050164, "supported_languages": null}, "macro.dbt_external_tables.create_external_schema": {"name": "create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.create_external_schema", "macro_sql": "{%- macro create_external_schema(source_node) -%}\n    {{ adapter.dispatch('create_external_schema', 'dbt_external_tables')(source_node) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__create_external_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7054136, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_schema": {"name": "default__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.default__create_external_schema", "macro_sql": "{%- macro default__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            {{ source_node.database }}.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set ddl -%}\n        create schema if not exists {{ fqn }}\n    {%- endset -%}\n\n    {{ return(ddl) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.705893, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7062302, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7064104, "supported_languages": null}, "macro.dbt_external_tables.update_external_table_columns": {"name": "update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/update_external_table_columns.sql", "original_file_path": "macros/common/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.update_external_table_columns", "macro_sql": "{% macro update_external_table_columns(source_node) %}\n    {{ return(adapter.dispatch('update_external_table_columns', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__update_external_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7067463, "supported_languages": null}, "macro.dbt_external_tables.default__update_external_table_columns": {"name": "default__update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/update_external_table_columns.sql", "original_file_path": "macros/common/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.default__update_external_table_columns", "macro_sql": "{% macro default__update_external_table_columns(source_node) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7068617, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n        {% set update_columns = dbt_external_tables.update_external_table_columns(node) %}\n        {{ update_columns }}\n\n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement", "macro.dbt_external_tables.update_external_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.710961, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7113245, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7115293, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7118526, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.712036, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7123475, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7125401, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7128458, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7130058, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7135487, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7148552, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.715364, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.715607, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7158263, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7160466, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7162619, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7164907, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7172234, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7175808, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7182252, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7185924, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7187424, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7188833, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.719025, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7195454, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7197623, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.719979, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7202103, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7204165, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7206454, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7215533, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7217803, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7220004, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7222133, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7243721, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.724877, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7256005, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7259352, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.72626, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.726601, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7269287, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7272866, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7276618, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.727988, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.729537, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7302709, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7339828, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.734457, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7348843, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7350857, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.735352, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7356932, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7358425, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7359843, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.73768, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7382858, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7398806, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7403958, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7410471, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7412403, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7416337, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.742027, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.742208, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.742384, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7425768, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7427566, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7431846, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7433677, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7435899, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.74378, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7439682, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7450604, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7460423, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.746848, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7481208, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.748541, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7487001, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7488575, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7490022, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7491438, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7496479, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7499218, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.750217, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7505467, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7507026, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7508445, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7522955, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7583616, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.758933, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7596087, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7598875, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.761012, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7618227, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7623284, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7628324, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.763599, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7641416, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7643652, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7646449, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7648838, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7650828, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1759221504.7653003, "supported_languages": null}}, "docs": {"doc.mezo.segment_web_page_views__sessionized": {"name": "segment_web_page_views__sessionized", "resource_type": "doc", "package_name": "mezo", "path": "50_intermediate/segment/sessionization/docs.md", "original_file_path": "models/50_intermediate/segment/sessionization/docs.md", "unique_id": "doc.mezo.segment_web_page_views__sessionized", "block_contents": "The purpose of this model is to assign a `session_id` to page views. The business logic of how this is done is that any period of inactivity of 30 minutes or more resets the session, and any subsequent page views are assigned a new `session_id`.\n\nThe implementation of this logic is rather involved, and requires multiple CTEs. Comments have been added to the source to describe the purpose of the CTEs that are more esoteric."}, "doc.mezo.segment_web_sessions__initial": {"name": "segment_web_sessions__initial", "resource_type": "doc", "package_name": "mezo", "path": "50_intermediate/segment/sessionization/docs.md", "original_file_path": "models/50_intermediate/segment/sessionization/docs.md", "unique_id": "doc.mezo.segment_web_sessions__initial", "block_contents": "This model performs the aggregation of page views into sessions. The `session_id` having already been calculated in `segment_web_page_views__sessionized`, this model simply calls a bunch of window functions to grab the first or last value of a given field and store it at the session level."}, "doc.mezo.segment_web_sessions": {"name": "segment_web_sessions", "resource_type": "doc", "package_name": "mezo", "path": "50_intermediate/segment/sessionization/docs.md", "original_file_path": "models/50_intermediate/segment/sessionization/docs.md", "unique_id": "doc.mezo.segment_web_sessions", "block_contents": "The purpose of this model is to expose a single web session, derived from Segment web events. Sessions are the most common way that analysis of web visitor behavior is conducted, and although Segment doesn't natively output session data, this model uses standard logic to create sessions out of page view events.\n\nA session is meant to represent a single instance of web activity where a user is actively browsing a website. In this case, we are demarcating sessions by 30 minute windows of inactivity: if there is 30 minutes of inactivity between two page views, the second page view begins a new session. Additionally, page views across different devices will always be tied to different sessions.\n\nThe logic implemented in this particular model is responsible for incrementally calculating a user's session number; the core sessionization logic is done in upstream models."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.twitter_ads._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "twitter_ads", "path": "staging/docs.md", "original_file_path": "models/staging/docs.md", "unique_id": "doc.twitter_ads._fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "doc.twitter_ads.created_at": {"name": "created_at", "resource_type": "doc", "package_name": "twitter_ads", "path": "staging/docs.md", "original_file_path": "models/staging/docs.md", "unique_id": "doc.twitter_ads.created_at", "block_contents": "The timestamp the account was created."}, "doc.twitter_ads.updated_at": {"name": "updated_at", "resource_type": "doc", "package_name": "twitter_ads", "path": "staging/docs.md", "original_file_path": "models/staging/docs.md", "unique_id": "doc.twitter_ads.updated_at", "block_contents": "The timestamp the account was last updated."}, "doc.twitter_ads.deleted": {"name": "deleted", "resource_type": "doc", "package_name": "twitter_ads", "path": "staging/docs.md", "original_file_path": "models/staging/docs.md", "unique_id": "doc.twitter_ads.deleted", "block_contents": "Whether the record has been deleted or not."}, "doc.twitter_ads.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "twitter_ads", "path": "staging/docs.md", "original_file_path": "models/staging/docs.md", "unique_id": "doc.twitter_ads.source_relation", "block_contents": "The source of the record if the unioning functionality is being used. If not this field will be empty."}, "doc.twitter_ads.country": {"name": "country", "resource_type": "doc", "package_name": "twitter_ads", "path": "staging/docs.md", "original_file_path": "models/staging/docs.md", "unique_id": "doc.twitter_ads.country", "block_contents": "Long-form name of the country being reported on."}, "doc.twitter_ads.region": {"name": "region", "resource_type": "doc", "package_name": "twitter_ads", "path": "staging/docs.md", "original_file_path": "models/staging/docs.md", "unique_id": "doc.twitter_ads.region", "block_contents": "Long-form name of the geopgraphic region being reported on."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.twitter_ads.twitter_ads__campaign_region_report": [{"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "twitter_ads__campaign_region_report", "resource_type": "model", "package_name": "twitter_ads", "path": "twitter_ads__campaign_region_report.sql", "original_file_path": "models/twitter_ads__campaign_region_report.sql", "unique_id": "model.twitter_ads.twitter_ads__campaign_region_report", "fqn": ["twitter_ads", "twitter_ads__campaign_region_report"], "alias": "twitter_ads__campaign_region_report", "checksum": {"name": "sha256", "checksum": "5f324ec1e35b16869876699808bd8666b9e07ada850bd88a940b6757665a21cf"}, "config": {"enabled": false, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record in this table represents the daily performance of ads at the account and campaign level, within a placement in Twitter.\n", "columns": {"source_relation": {"name": "source_relation", "description": "{{ doc('source_relation') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "{{ doc('country') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "{{ doc('region') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The amount of spend, in micros, on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_created_timestamp": {"name": "campaign_created_timestamp", "description": "{{ doc('created_at') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_currency": {"name": "campaign_currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_campaign_deleted": {"name": "is_campaign_deleted", "description": "{{ doc('deleted') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_end_timestamp": {"name": "campaign_end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_frequency_cap": {"name": "campaign_frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_campaign_servable": {"name": "is_campaign_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_campaign_standard_delivery": {"name": "is_campaign_standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_start_timestamp": {"name": "campaign_start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_updated_timestamp": {"name": "campaign_updated_timestamp", "description": "{{ doc('updated_at') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_funding_instrument_id": {"name": "campaign_funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_daily_budget_amount": {"name": "campaign_daily_budget_amount", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_total_budget_amount": {"name": "campaign_total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/twitter.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "table", "enabled": false}, "created_at": 1759221507.0518432, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`twitter_ads__campaign_region_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True) and var('twitter_ads__using_campaign_regions_report', False)) }}\n\nwith report as (\n\n    select \n        *,\n        {# Let's sum up conversions into general fields for ease of use #}\n        {{ var('twitter_ads__conversion_fields') | join(' + ') if var('twitter_ads__conversion_fields') else 0 }} as total_conversions,\n        {{ var('twitter_ads__conversion_sale_amount_fields') | join(' + ') if var('twitter_ads__conversion_sale_amount_fields') else 0 }} as total_conversions_sale_amount\n\n    from {{ ref('stg_twitter_ads__campaign_regions_report') }}\n),\n\ncampaigns as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history') }}\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.region,\n        report.country,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.is_deleted as is_campaign_deleted,\n        campaigns.entity_status as campaign_status,\n        campaigns.currency as campaign_currency,\n        campaigns.is_servable as is_campaign_servable,\n        campaigns.is_standard_delivery as is_campaign_standard_delivery,\n        campaigns.frequency_cap as campaign_frequency_cap,\n        campaigns.start_timestamp as campaign_start_timestamp,\n        campaigns.end_timestamp as campaign_end_timestamp,\n        campaigns.created_timestamp as campaign_created_timestamp,\n        campaigns.updated_timestamp as campaign_updated_timestamp,\n        campaigns.funding_instrument_id as campaign_funding_instrument_id,\n        campaigns.daily_budget_amount as campaign_daily_budget_amount,\n        campaigns.total_budget_amount as campaign_total_budget_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        {# Persist all of the customizable fields #}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_fields', transform='sum', coalesce_with=0) }}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_sale_amount_fields', transform='sum', coalesce_with=0) }}\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__campaign_regions_report_passthrough_metrics', transform='sum') }}\n\n    from report \n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n        and report.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    {{ dbt_utils.group_by(22) }}\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_regions_report", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_history", "package": null, "version": null}, {"name": "stg_twitter_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.twitter_ads_persist_pass_through_columns", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.twitter_ads.twitter_ads__keyword_report": [{"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "twitter_ads__keyword_report", "resource_type": "model", "package_name": "twitter_ads", "path": "twitter_ads__keyword_report.sql", "original_file_path": "models/twitter_ads__keyword_report.sql", "unique_id": "model.twitter_ads.twitter_ads__keyword_report", "fqn": ["twitter_ads", "twitter_ads__keyword_report"], "alias": "twitter_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "58e23c6e46746a3a61028882c9d0c88fb19b447092dcc2a211b3694168c22435"}, "config": {"enabled": false, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record in this table represents the daily performance of ads at the account, campaign, line item (ad group), and keyword level, within a placement in Twitter.\n", "columns": {"source_relation": {"name": "source_relation", "description": "{{ doc('source_relation') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the line item + keyword on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the line item + keyword on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item + keyword on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item + keyword on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item (ad group).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item + keyword on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "keyword": {"name": "keyword", "description": "The keyword whose performance is being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "keyword_id": {"name": "keyword_id", "description": "Unique key of the table built from the combination of 'account_id', 'line_item_id', 'segment', and 'placement' fields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "Name of the associated account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_name": {"name": "line_item_name", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency": {"name": "currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/twitter.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "table", "enabled": false}, "created_at": 1759221507.0396328, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`twitter_ads__keyword_report`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['ad_reporting__twitter_ads_enabled','twitter_ads__using_keywords'])) }}\n\nwith report as (\n\n    select \n        *,\n        {# Let's sum up conversions into general fields for ease of use #}\n        {{ var('twitter_ads__conversion_fields') | join(' + ') if var('twitter_ads__conversion_fields') else 0 }} as total_conversions,\n        {{ var('twitter_ads__conversion_sale_amount_fields') | join(' + ') if var('twitter_ads__conversion_sale_amount_fields') else 0 }} as total_conversions_sale_amount\n\n    from {{ ref('stg_twitter_ads__line_item_keywords_report') }}\n),\n\nline_items as (\n\n    select *\n    from {{ ref('stg_twitter_ads__line_item_history') }}\n    where is_latest_version\n),\n\ncampaigns as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history') }}\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        line_items.campaign_id,\n        campaigns.campaign_name,\n        report.line_item_id,\n        line_items.name as line_item_name,\n        report.keyword_id,\n        report.keyword,\n        line_items.currency,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__line_item_keywords_report_passthrough_metrics') }}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_sale_amount_fields', transform='sum', coalesce_with=0, except_variable='twitter_ads__line_item_keywords_report_passthrough_metrics') }}\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__line_item_keywords_report_passthrough_metrics', transform='sum')}}\n\n    from report \n    left join line_items\n        on report.line_item_id = line_items.line_item_id\n        and report.source_relation = line_items.source_relation\n    left join campaigns \n        on line_items.campaign_id = campaigns.campaign_id\n        and line_items.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    {{ dbt_utils.group_by(12) }}\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_keywords_report", "package": null, "version": null}, {"name": "stg_twitter_ads__line_item_history", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_history", "package": null, "version": null}, {"name": "stg_twitter_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.twitter_ads.twitter_ads_persist_pass_through_columns", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.twitter_ads.twitter_ads__campaign_country_report": [{"database": "mezo-portal-data", "schema": "dbt_intermediate", "name": "twitter_ads__campaign_country_report", "resource_type": "model", "package_name": "twitter_ads", "path": "twitter_ads__campaign_country_report.sql", "original_file_path": "models/twitter_ads__campaign_country_report.sql", "unique_id": "model.twitter_ads.twitter_ads__campaign_country_report", "fqn": ["twitter_ads", "twitter_ads__campaign_country_report"], "alias": "twitter_ads__campaign_country_report", "checksum": {"name": "sha256", "checksum": "8e653901f4ed7ea5c76734f30ba2bba6750afa61f84fc699c0597552a6e14f4c"}, "config": {"enabled": false, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record in this table represents the daily performance of ads at the account and campaign level, within a placement in Twitter.\n", "columns": {"source_relation": {"name": "source_relation", "description": "{{ doc('source_relation') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "{{ doc('country') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The amount of spend, in micros, on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_created_timestamp": {"name": "campaign_created_timestamp", "description": "{{ doc('created_at') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_currency": {"name": "campaign_currency", "description": "The currency all metrics for the account are set to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_campaign_deleted": {"name": "is_campaign_deleted", "description": "{{ doc('deleted') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_end_timestamp": {"name": "campaign_end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_status": {"name": "campaign_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_frequency_cap": {"name": "campaign_frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_campaign_servable": {"name": "is_campaign_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_campaign_standard_delivery": {"name": "is_campaign_standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_start_timestamp": {"name": "campaign_start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_updated_timestamp": {"name": "campaign_updated_timestamp", "description": "{{ doc('updated_at') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_funding_instrument_id": {"name": "campaign_funding_instrument_id", "description": "Reference to the funding instrument.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_daily_budget_amount": {"name": "campaign_daily_budget_amount", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_total_budget_amount": {"name": "campaign_total_budget_amount", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions": {"name": "total_conversions", "description": "Sum of all fields included in `twitter_ads__conversion_fields` variable (default = conversion_purchases_metric + conversion_custom_metric).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_conversions_sale_amount": {"name": "total_conversions_sale_amount", "description": "Sum of all fields included in `twitter_ads__conversion_sale_amount_fields` variable (default = conversion_purchases_sale_amount + conversion_custom_sale_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/twitter.yml", "build_path": null, "unrendered_config": {"schema": "intermediate", "materialized": "table", "enabled": false}, "created_at": 1759221507.050149, "relation_name": "`mezo-portal-data`.`dbt_intermediate`.`twitter_ads__campaign_country_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True) and var('twitter_ads__using_campaign_locations_report', False)) }}\n\nwith report as (\n\n    select \n        *,\n        {# Let's sum up conversions into general fields for ease of use #}\n        {{ var('twitter_ads__conversion_fields') | join(' + ') if var('twitter_ads__conversion_fields') else 0 }} as total_conversions,\n        {{ var('twitter_ads__conversion_sale_amount_fields') | join(' + ') if var('twitter_ads__conversion_sale_amount_fields') else 0 }} as total_conversions_sale_amount\n\n    from {{ ref('stg_twitter_ads__campaign_locations_report') }}\n),\n\ncampaigns as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history') }}\n    where is_latest_version\n),\n\naccounts as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history') }}\n    where is_latest_version\n),\n\nfinal as (\n\n    select \n        report.source_relation,\n        report.date_day,\n        report.country,\n        report.placement, \n        report.account_id,\n        accounts.name as account_name,\n        report.campaign_id,\n        campaigns.campaign_name,\n        campaigns.is_deleted as is_campaign_deleted,\n        campaigns.entity_status as campaign_status,\n        campaigns.currency as campaign_currency,\n        campaigns.is_servable as is_campaign_servable,\n        campaigns.is_standard_delivery as is_campaign_standard_delivery,\n        campaigns.frequency_cap as campaign_frequency_cap,\n        campaigns.start_timestamp as campaign_start_timestamp,\n        campaigns.end_timestamp as campaign_end_timestamp,\n        campaigns.created_timestamp as campaign_created_timestamp,\n        campaigns.updated_timestamp as campaign_updated_timestamp,\n        campaigns.funding_instrument_id as campaign_funding_instrument_id,\n        campaigns.daily_budget_amount as campaign_daily_budget_amount,\n        campaigns.total_budget_amount as campaign_total_budget_amount,\n        sum(report.clicks) as clicks, \n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend,\n        sum(report.spend_micro) as spend_micro,\n        sum(report.url_clicks) as url_clicks,\n        sum(report.total_conversions) as total_conversions,\n        sum(report.total_conversions_sale_amount) as total_conversions_sale_amount\n\n        {# Persist all of the customizable fields #}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_fields', transform='sum', coalesce_with=0) }}\n        {{ twitter_ads_persist_pass_through_columns(pass_through_variable='twitter_ads__conversion_sale_amount_fields', transform='sum', coalesce_with=0) }}\n        {{ fivetran_utils.persist_pass_through_columns('twitter_ads__campaign_locations_report_passthrough_metrics', transform='sum') }}\n\n    from report \n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n        and report.source_relation = campaigns.source_relation\n    left join accounts\n        on report.account_id = accounts.account_id\n        and report.source_relation = accounts.source_relation\n\n    {{ dbt_utils.group_by(21) }}\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_locations_report", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_history", "package": null, "version": null}, {"name": "stg_twitter_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.twitter_ads_persist_pass_through_columns", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.group_by"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.twitter_ads.stg_twitter_ads__campaign_regions_report": [{"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__campaign_regions_report", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__campaign_regions_report.sql", "original_file_path": "models/staging/stg_twitter_ads__campaign_regions_report.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__campaign_regions_report", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__campaign_regions_report"], "alias": "stg_twitter_ads__campaign_regions_report", "checksum": {"name": "sha256", "checksum": "fc5d3cae623c09b5392aec6a269673246c21ec867153c2c7195511848f3b53bd"}, "config": {"enabled": false, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents the performance of an ad campaign on a given day in a specific geographic region, for its placement in Twitter.", "columns": {"source_relation": {"name": "source_relation", "description": "{{ doc('source_relation') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "{{ doc('country') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "{{ doc('region') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the campaign on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the campaign on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the campaign on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the campaign on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the campaign on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": false}, "created_at": 1759221507.0948148, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_regions_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True) and var('twitter_ads__using_campaign_regions_report', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__campaign_regions_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__campaign_regions_report_tmp')),\n                staging_columns=get_campaign_regions_report_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        {{ dbt.date_trunc('day', 'date') }} as date_day,\n        -- Most people have region stored in segment_name, but some will have it in segment still\n        coalesce(segment_name, segment) as region,\n        case when lower(location_type) = 'countries' then location_name else null end as country,\n        account_id,\n        campaign_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        {% for conversion in var('twitter_ads__conversion_fields', []) %}\n            , coalesce(cast({{ conversion }} as {{ dbt.type_bigint() }}), 0) as {{ conversion }}\n        {% endfor %}\n\n        {% for conversion_value in var('twitter_ads__conversion_sale_amount_fields', []) %}\n            , coalesce(cast({{ conversion_value }} as {{ dbt.type_float() }}), 0) as {{ conversion_value }}\n        {% endfor %}\n\n        {{ twitter_ads_fill_pass_through_columns(pass_through_fields=var('twitter_ads__campaign_regions_report_passthrough_metrics')) }}\n\n    from fields\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_regions_report_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_regions_report_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_campaign_regions_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.date_trunc", "macro.dbt.type_bigint", "macro.dbt.type_float", "macro.twitter_ads.twitter_ads_fill_pass_through_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.twitter_ads.stg_twitter_ads__line_item_keywords_report": [{"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__line_item_keywords_report", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__line_item_keywords_report.sql", "original_file_path": "models/staging/stg_twitter_ads__line_item_keywords_report.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__line_item_keywords_report", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__line_item_keywords_report"], "alias": "stg_twitter_ads__line_item_keywords_report", "checksum": {"name": "sha256", "checksum": "5f8d6ba198bbbf3cdd762092909736b75ffd723ad235c91862ca7e693ccfcb1f"}, "config": {"enabled": false, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents the performance of a line item (ad group) and keyword combination on a given day, for its placement in Twitter.", "columns": {"source_relation": {"name": "source_relation", "description": "{{ doc('source_relation') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "keyword_id": {"name": "keyword_id", "description": "Unique key of the table built from the combination of 'account_id', 'line_item_id','segment', and 'placement' fields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the line item + keyword on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the line item + keyword on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item + keyword on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item + keyword on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item + keyword on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "keyword": {"name": "keyword", "description": "The keyword whose performance is being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": false}, "created_at": 1759221507.092247, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_keywords_report`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['ad_reporting__twitter_ads_enabled','twitter_ads__using_keywords'])) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__line_item_keywords_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__line_item_keywords_report_tmp')),\n                staging_columns=get_line_item_keywords_report_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        source_relation, \n        {{ dbt.date_trunc('day', 'date') }} as date_day,\n        {{ dbt_utils.generate_surrogate_key(['account_id', 'line_item_id','segment','placement']) }} as keyword_id,\n        account_id,\n        line_item_id,\n        segment as keyword,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        {% for conversion in var('twitter_ads__conversion_fields', []) %}\n            , coalesce(cast({{ conversion }} as {{ dbt.type_bigint() }}), 0) as {{ conversion }}\n        {% endfor %}\n\n        {% for conversion_value in var('twitter_ads__conversion_sale_amount_fields', []) %}\n            , coalesce(cast({{ conversion_value }} as {{ dbt.type_float() }}), 0) as {{ conversion_value }}\n        {% endfor %}\n\n        {{ twitter_ads_fill_pass_through_columns(pass_through_fields=var('twitter_ads__line_item_keywords_report_passthrough_metrics'), except=(var('twitter_ads__conversion_fields') + var('twitter_ads__conversion_sale_amount_fields'))) }}\n\n    from fields\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__line_item_keywords_report_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__line_item_keywords_report_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.twitter_ads.get_line_item_keywords_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.date_trunc", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.type_bigint", "macro.dbt.type_float", "macro.twitter_ads.twitter_ads_fill_pass_through_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.twitter_ads.stg_twitter_ads__campaign_locations_report": [{"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__campaign_locations_report", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/stg_twitter_ads__campaign_locations_report.sql", "original_file_path": "models/staging/stg_twitter_ads__campaign_locations_report.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__campaign_locations_report", "fqn": ["twitter_ads", "staging", "stg_twitter_ads__campaign_locations_report"], "alias": "stg_twitter_ads__campaign_locations_report", "checksum": {"name": "sha256", "checksum": "4c9bc8856ec50f299504384a30aba2a5992af4aee11b386e28c33f133fd446c6"}, "config": {"enabled": false, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Each record represents the performance of an ad campaign on a given day in a specific country, for its placement in Twitter.", "columns": {"source_relation": {"name": "source_relation", "description": "{{ doc('source_relation') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country": {"name": "country", "description": "{{ doc('country') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend_micro": {"name": "spend_micro", "description": "The spend for the campaign on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "spend": {"name": "spend", "description": "The spend for the campaign on that day in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the campaign on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the campaign on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the campaign on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "twitter_ads://models/staging/stg_twitter_ads.yml", "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "table", "enabled": false}, "created_at": 1759221507.0938926, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_locations_report`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True) and var('twitter_ads__using_campaign_locations_report', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_twitter_ads__campaign_locations_report_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__campaign_locations_report_tmp')),\n                staging_columns=get_campaign_locations_report_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='twitter_ads_union_schemas', \n            union_database_variable='twitter_ads_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation, \n        {{ dbt.date_trunc('day', 'date') }} as date_day,\n        -- Most people have country stored in segment_name, but some will have it in segment still\n        coalesce(segment_name, segment) as country,\n        account_id,\n        campaign_id,\n        placement,\n        clicks,\n        impressions,\n        billed_charge_local_micro as spend_micro,\n        round(billed_charge_local_micro / 1000000.0,2) as spend,\n        url_clicks\n\n        {% for conversion in var('twitter_ads__conversion_fields', []) %}\n            , coalesce(cast({{ conversion }} as {{ dbt.type_bigint() }}), 0) as {{ conversion }}\n        {% endfor %}\n\n        {% for conversion_value in var('twitter_ads__conversion_sale_amount_fields', []) %}\n            , coalesce(cast({{ conversion_value }} as {{ dbt.type_float() }}), 0) as {{ conversion_value }}\n        {% endfor %}\n\n        {{ twitter_ads_fill_pass_through_columns(pass_through_fields=var('twitter_ads__campaign_locations_report_passthrough_metrics')) }}\n\n    from fields\n)\n\nselect *\nfrom final", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_twitter_ads__campaign_locations_report_tmp", "package": null, "version": null}, {"name": "stg_twitter_ads__campaign_locations_report_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.twitter_ads.get_campaign_locations_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.date_trunc", "macro.dbt.type_bigint", "macro.dbt.type_float", "macro.twitter_ads.twitter_ads_fill_pass_through_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.twitter_ads.stg_twitter_ads__campaign_locations_report_tmp": [{"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__campaign_locations_report_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__campaign_locations_report_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__campaign_locations_report_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__campaign_locations_report_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__campaign_locations_report_tmp"], "alias": "stg_twitter_ads__campaign_locations_report_tmp", "checksum": {"name": "sha256", "checksum": "bc2d626637a1034318ff26f288853f52e22cea8de3485f6044f5b7bec4444d73"}, "config": {"enabled": false, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": false}, "created_at": 1759221506.3452897, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_locations_report_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True) and var('twitter_ads__using_campaign_locations_report', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='campaign_locations_report', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='campaign_locations_report',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "campaign_locations_report"], ["twitter_ads", "campaign_locations_report"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.twitter_ads.stg_twitter_ads__campaign_regions_report_tmp": [{"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__campaign_regions_report_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__campaign_regions_report_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__campaign_regions_report_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__campaign_regions_report_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__campaign_regions_report_tmp"], "alias": "stg_twitter_ads__campaign_regions_report_tmp", "checksum": {"name": "sha256", "checksum": "73e0e576e5398b5892daa40db91f52cf0754383d91247bbe6c4f04ad28c6e110"}, "config": {"enabled": false, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": false}, "created_at": 1759221506.3807957, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__campaign_regions_report_tmp`", "raw_code": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled', True) and var('twitter_ads__using_campaign_regions_report', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='campaign_regions_report', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='campaign_regions_report',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "campaign_regions_report"], ["twitter_ads", "campaign_regions_report"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "model.twitter_ads.stg_twitter_ads__line_item_keywords_report_tmp": [{"database": "mezo-portal-data", "schema": "dbt_staging", "name": "stg_twitter_ads__line_item_keywords_report_tmp", "resource_type": "model", "package_name": "twitter_ads", "path": "staging/tmp/stg_twitter_ads__line_item_keywords_report_tmp.sql", "original_file_path": "models/staging/tmp/stg_twitter_ads__line_item_keywords_report_tmp.sql", "unique_id": "model.twitter_ads.stg_twitter_ads__line_item_keywords_report_tmp", "fqn": ["twitter_ads", "staging", "tmp", "stg_twitter_ads__line_item_keywords_report_tmp"], "alias": "stg_twitter_ads__line_item_keywords_report_tmp", "checksum": {"name": "sha256", "checksum": "ce070a872d9a55d22f19622fe5b373bb0ed9256912943481fae8dc13f62fc6cb"}, "config": {"enabled": false, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "staging", "materialized": "view", "enabled": false}, "created_at": 1759221506.398131, "relation_name": "`mezo-portal-data`.`dbt_staging`.`stg_twitter_ads__line_item_keywords_report_tmp`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['ad_reporting__twitter_ads_enabled','twitter_ads__using_keywords'])) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='line_item_keywords_report', \n        database_variable='twitter_ads_database', \n        schema_variable='twitter_ads_schema', \n        default_database=target.database,\n        default_schema='twitter_ads',\n        default_variable='line_item_keywords_report',\n        union_schema_variable='twitter_ads_union_schemas',\n        union_database_variable='twitter_ads_union_databases'\n    )\n}}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["twitter_ads", "line_item_keywords_report"], ["twitter_ads", "line_item_keywords_report"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.fivetran_utils.union_data"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "source.twitter_ads.twitter_ads.line_item_keywords_report": [{"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "line_item_keywords_report", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.line_item_keywords_report", "fqn": ["twitter_ads", "staging", "twitter_ads", "line_item_keywords_report"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "line_item_keywords_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of a line item (ad group) and keyword combination on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc('_fivetran_synced') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the line item + keyword on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the line item + keyword on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the line item + keyword on that day.  This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the line item + keyword on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment": {"name": "segment", "description": "The keyword whose performance is being tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_assisted": {"name": "mobile_conversion_payment_info_additions_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_engagement": {"name": "mobile_conversion_payment_info_additions_post_engagement", "description": "Number of **post-engagement** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_view": {"name": "mobile_conversion_payment_info_additions_post_view", "description": "Number of **post-view** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_assisted": {"name": "mobile_conversion_add_to_wishlists_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_engagement": {"name": "mobile_conversion_add_to_wishlists_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_view": {"name": "mobile_conversion_add_to_wishlists_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_assisted": {"name": "mobile_conversion_add_to_carts_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_engagement": {"name": "mobile_conversion_add_to_carts_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_view": {"name": "mobile_conversion_add_to_carts_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_metric": {"name": "conversion_sign_ups_metric", "description": "Total number of sign ups. This is the same as the sum of post views, post engagements and assisted sign ups. This is also the sum of website and mobile app sign ups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_assisted": {"name": "mobile_conversion_checkouts_initiated_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_engagement": {"name": "mobile_conversion_checkouts_initiated_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_view": {"name": "mobile_conversion_checkouts_initiated_post_view", "description": "Number of **post-view** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_assisted": {"name": "mobile_conversion_searches_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_engagement": {"name": "mobile_conversion_searches_post_engagement", "description": "Number of **post-engagement** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_view": {"name": "mobile_conversion_searches_post_view", "description": "Number of **post-view** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_assisted": {"name": "mobile_conversion_content_views_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_engagement": {"name": "mobile_conversion_content_views_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_view": {"name": "mobile_conversion_content_views_post_view", "description": "Number of **post-view** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_sale_amount": {"name": "mobile_conversion_payment_info_additions_sale_amount", "description": "The sale amount corresponding to mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_sale_amount": {"name": "mobile_conversion_add_to_wishlists_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_sale_amount": {"name": "mobile_conversion_add_to_carts_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_sale_amount": {"name": "conversion_sign_ups_sale_amount", "description": "The sale amount corresponding to sign ups.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_sale_amount": {"name": "mobile_conversion_checkouts_initiated_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_sale_amount": {"name": "mobile_conversion_searches_sale_amount", "description": "The sale amount corresponding to mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_sale_amount": {"name": "mobile_conversion_content_views_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": false, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`line_item_keywords_report`", "created_at": 1759221507.185294, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}], "source.twitter_ads.twitter_ads.campaign_locations_report": [{"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "campaign_locations_report", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.campaign_locations_report", "fqn": ["twitter_ads", "staging", "twitter_ads", "campaign_locations_report"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "campaign_locations_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of an ad campaign on a given day in a specific country.", "columns": {"segment_name": {"name": "segment_name", "description": "{{ doc('country') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment": {"name": "segment", "description": "(DEPRECATED IN JUNE 2023) Long-form name of the country being reported on. Coalesced with the newer `segment_name` field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc('_fivetran_synced') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the campaign on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the campaign on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the campaign on that day. This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the ad campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the campaign on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_assisted": {"name": "mobile_conversion_payment_info_additions_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_engagement": {"name": "mobile_conversion_payment_info_additions_post_engagement", "description": "Number of **post-engagement** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_view": {"name": "mobile_conversion_payment_info_additions_post_view", "description": "Number of **post-view** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_assisted": {"name": "mobile_conversion_add_to_wishlists_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_engagement": {"name": "mobile_conversion_add_to_wishlists_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_view": {"name": "mobile_conversion_add_to_wishlists_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_assisted": {"name": "mobile_conversion_add_to_carts_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_engagement": {"name": "mobile_conversion_add_to_carts_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_view": {"name": "mobile_conversion_add_to_carts_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_metric": {"name": "conversion_sign_ups_metric", "description": "Total number of sign ups. This is the same as the sum of post views, post engagements and assisted sign ups. This is also the sum of website and mobile app sign ups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_assisted": {"name": "mobile_conversion_checkouts_initiated_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_engagement": {"name": "mobile_conversion_checkouts_initiated_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_view": {"name": "mobile_conversion_checkouts_initiated_post_view", "description": "Number of **post-view** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_assisted": {"name": "mobile_conversion_searches_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_engagement": {"name": "mobile_conversion_searches_post_engagement", "description": "Number of **post-engagement** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_view": {"name": "mobile_conversion_searches_post_view", "description": "Number of **post-view** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_assisted": {"name": "mobile_conversion_content_views_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_engagement": {"name": "mobile_conversion_content_views_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_view": {"name": "mobile_conversion_content_views_post_view", "description": "Number of **post-view** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_sale_amount": {"name": "mobile_conversion_payment_info_additions_sale_amount", "description": "The sale amount corresponding to mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_sale_amount": {"name": "mobile_conversion_add_to_wishlists_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_sale_amount": {"name": "mobile_conversion_add_to_carts_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_sale_amount": {"name": "conversion_sign_ups_sale_amount", "description": "The sale amount corresponding to sign ups.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_sale_amount": {"name": "mobile_conversion_checkouts_initiated_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_sale_amount": {"name": "mobile_conversion_searches_sale_amount", "description": "The sale amount corresponding to mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_sale_amount": {"name": "mobile_conversion_content_views_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": false, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`campaign_locations_report`", "created_at": 1759221507.1857176, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}], "source.twitter_ads.twitter_ads.campaign_regions_report": [{"database": "mezo-portal-data", "schema": "raw_paid_twitter_ads", "name": "campaign_regions_report", "resource_type": "source", "package_name": "twitter_ads", "path": "models/staging/src_twitter_ads.yml", "original_file_path": "models/staging/src_twitter_ads.yml", "unique_id": "source.twitter_ads.twitter_ads.campaign_regions_report", "fqn": ["twitter_ads", "staging", "twitter_ads", "campaign_regions_report"], "source_name": "twitter_ads", "source_description": "", "loader": "fivetran", "identifier": "campaign_regions_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents the performance of an ad campaign on a given day in a specific geographic region.", "columns": {"segment_name": {"name": "segment_name", "description": "{{ doc('region') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "segment": {"name": "segment", "description": "(DEPRECATED IN JUNE 2023) Long-form name of the geographic region being reported on. Coalesced with the newer `segment_name` field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location_type": {"name": "location_type", "description": "Type of umbrella `LOCATION`. Likely to be `COUNTRIES`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location_name": {"name": "location_name", "description": "Name of the umbrella `LOCATION`. Likely to be the country name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "{{ doc('_fivetran_synced') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the campaign on that day, in micros and in whichever currency was selected during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "clicks": {"name": "clicks", "description": "The clicks for the campaign on that day. Includes clicks on the URL (shortened or regular links), profile pic, screen name, username, detail, hashtags, and likes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "impressions": {"name": "impressions", "description": "The impressions for the campaign on that day. This is the number of users who see a Promoted Ad either in their home timeline or search results.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the ad campaign.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the campaign on that day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "placement": {"name": "placement", "description": "Where on Twitter the ad is being displayed. Possible values include 'ALL_ON_TWITTER', 'PUBLISHER_NETWORK', 'TWITTER_PROFILE', 'TWITTER_SEARCH', 'TWITTER_TIMELINE', and 'TAP_*', which are more granular options for `PUBLISHER_NETWORK`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_metric": {"name": "conversion_purchases_metric", "description": "Total number of purchases. The sum of post view, post engagement, and assisted purchases for both your website and mobile app. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_metric": {"name": "conversion_custom_metric", "description": "The number of conversions of type CUSTOM. Included by the `twitter_ads__conversion_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_assisted": {"name": "mobile_conversion_payment_info_additions_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_engagement": {"name": "mobile_conversion_payment_info_additions_post_engagement", "description": "Number of **post-engagement** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_post_view": {"name": "mobile_conversion_payment_info_additions_post_view", "description": "Number of **post-view** mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_assisted": {"name": "mobile_conversion_add_to_wishlists_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_engagement": {"name": "mobile_conversion_add_to_wishlists_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_post_view": {"name": "mobile_conversion_add_to_wishlists_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_assisted": {"name": "mobile_conversion_add_to_carts_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_engagement": {"name": "mobile_conversion_add_to_carts_post_engagement", "description": "Number of **post-engagement** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_post_view": {"name": "mobile_conversion_add_to_carts_post_view", "description": "Number of **post-view** mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_metric": {"name": "conversion_sign_ups_metric", "description": "Total number of sign ups. This is the same as the sum of post views, post engagements and assisted sign ups. This is also the sum of website and mobile app sign ups", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_assisted": {"name": "mobile_conversion_checkouts_initiated_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_engagement": {"name": "mobile_conversion_checkouts_initiated_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_post_view": {"name": "mobile_conversion_checkouts_initiated_post_view", "description": "Number of **post-view** mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_assisted": {"name": "mobile_conversion_searches_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_engagement": {"name": "mobile_conversion_searches_post_engagement", "description": "Number of **post-engagement** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_post_view": {"name": "mobile_conversion_searches_post_view", "description": "Number of **post-view** mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_assisted": {"name": "mobile_conversion_content_views_assisted", "description": "Number of **assisted** (engaged with ad but did not immediately convert) mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_engagement": {"name": "mobile_conversion_content_views_post_engagement", "description": "Number of **post-engagement** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_post_view": {"name": "mobile_conversion_content_views_post_view", "description": "Number of **post-view** mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_purchases_sale_amount": {"name": "conversion_purchases_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_custom_sale_amount": {"name": "conversion_custom_sale_amount", "description": "The sale amount corresponding to PURCHASE conversion events. Included by the `twitter_ads__conversion_sale_amount_fields` variable by default.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_payment_info_additions_sale_amount": {"name": "mobile_conversion_payment_info_additions_sale_amount", "description": "The sale amount corresponding to mobile conversions of type PAYMENT_INFO_ADDITION.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_wishlists_sale_amount": {"name": "mobile_conversion_add_to_wishlists_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_WISHLIST.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_add_to_carts_sale_amount": {"name": "mobile_conversion_add_to_carts_sale_amount", "description": "The sale amount corresponding to mobile conversions of type ADD_TO_CART.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "conversion_sign_ups_sale_amount": {"name": "conversion_sign_ups_sale_amount", "description": "The sale amount corresponding to sign ups.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_checkouts_initiated_sale_amount": {"name": "mobile_conversion_checkouts_initiated_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CHECKOUT_INITIATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_searches_sale_amount": {"name": "mobile_conversion_searches_sale_amount", "description": "The sale amount corresponding to mobile conversions of type SEARCH.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "mobile_conversion_content_views_sale_amount": {"name": "mobile_conversion_content_views_sale_amount", "description": "The sale amount corresponding to mobile conversions of type CONTENT_VIEW.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": false, "event_time": null, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "loaded_at_field": "_fivetran_synced"}, "patch_path": null, "unrendered_config": {"loaded_at_field": "_fivetran_synced", "enabled": false, "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}}, "relation_name": "`mezo-portal-data`.`raw_paid_twitter_ads`.`campaign_regions_report`", "created_at": 1759221507.1861582, "unrendered_database": "{% if target.type != 'spark'%}{{ var('twitter_ads_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('twitter_ads_schema', 'twitter_ads') }}", "doc_blocks": []}]}, "parent_map": {"model.mezo.stg_seed_musd_market_map": ["seed.mezo.musd_market_map"], "model.mezo.stg_goldsky_market_mezo__order_placed": ["source.mezo.raw_goldsky.raw_goldsky_market_mezo__order_placed"], "model.mezo.stg_goldsky_musd_trove_manager__trove_liquidated": ["source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__trove_liquidated"], "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated": ["source.mezo.raw_goldsky.raw_goldsky_borrower_operations_mezo__trove_updated"], "model.mezo.stg_goldsky_market_mezo__donated": ["source.mezo.raw_goldsky.raw_goldsky_market_mezo__donated"], "model.mezo.stg_goldsky_musd_trove_manager__liquidation": ["source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__liquidation"], "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer": ["source.mezo.raw_goldsky.raw_goldsky_mezo_vaults_mezo__transfer"], "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked": ["source.mezo.raw_goldsky.raw_goldsky_mezo_bridge_mainnet__assets_locked"], "model.mezo.stg_coin_gecko__coins": ["source.mezo.raw_coin_gecko.coins"], "model.mezo.stg_coin_gecko__prices": ["source.mezo.raw_coin_gecko.prices"], "model.mezo.stg_segment_profiles__user_identifiers": ["source.mezo.raw_segment_profiles.user_identifiers"], "model.mezo.stg_segment__union_events": ["model.mezo.stg_segment_profiles__pages", "model.mezo.stg_segment_profiles__tracks"], "model.mezo.stg_segment__events": ["model.mezo.stg_segment__union_events"], "model.mezo.stg_segment_profiles__pages": ["source.mezo.raw_segment_profiles.pages_view"], "model.mezo.stg_segment_profiles__tracks": ["source.mezo.raw_segment_profiles.tracks_view"], "model.mezo.stg_paid__raw_other_marketing_costs": ["source.mezo.raw_other_marketing_costs.other_marketing_costs"], "model.mezo.int_goldsky_market_mezo__donated": ["model.mezo.stg_goldsky_market_mezo__donated", "model.mezo.stg_seed_musd_market_map"], "model.mezo.int_goldsky_market_mezo__order_placed": ["model.mezo.stg_goldsky_market_mezo__order_placed", "model.mezo.stg_seed_musd_market_map"], "model.mezo.int_goldsky_musd_trove_manager__liquidation": ["model.mezo.stg_goldsky_musd_trove_manager__liquidation", "model.mezo.stg_goldsky_musd_trove_manager__trove_liquidated"], "model.mezo.int_goldsky_borrower_operations_mezo__loans": ["model.mezo.stg_coin_gecko__prices", "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"], "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked": ["model.mezo.stg_coin_gecko__coins", "model.mezo.stg_coin_gecko__prices", "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "model.mezo.int_goldsky_borrower_operations_mezo__loans_graph": ["model.mezo.int_goldsky_borrower_operations_mezo__loans", "model.mezo.stg_segment_profiles__user_identifiers"], "model.mezo.int_goldsky_market_mezo__order_placed_graph": ["model.mezo.int_goldsky_market_mezo__order_placed", "model.mezo.stg_segment_profiles__user_identifiers"], "model.mezo.int_goldsky_musd_trove_manager__liquidation_graph": ["model.mezo.int_goldsky_musd_trove_manager__liquidation", "model.mezo.stg_segment_profiles__user_identifiers"], "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph": ["model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked", "model.mezo.stg_segment_profiles__user_identifiers"], "model.mezo.int_goldsky_market_mezo__donated_graph": ["model.mezo.int_goldsky_market_mezo__donated", "model.mezo.stg_segment_profiles__user_identifiers"], "model.mezo.int_segment__sessions": ["model.mezo.int_segment_web_sessions", "model.mezo.stg_segment_profiles__user_identifiers", "model.twitter_ads.stg_twitter_ads__campaign_history"], "model.mezo.int_segment_web_sessions": ["model.mezo.int_segment_web_sessions__stitched"], "model.mezo.int_segment_web_user_stitching": ["model.mezo.stg_segment__events"], "model.mezo.int_segment_web_events__sessionized": ["model.mezo.stg_segment__events"], "model.mezo.int_segment_web_sessions__stitched": ["model.mezo.int_segment_web_sessions__initial", "model.mezo.int_segment_web_user_stitching"], "model.mezo.int_segment__sessions_first_touch_point": ["model.mezo.int_segment__sessions"], "model.mezo.int_segment_web_sessions__initial": ["model.mezo.int_segment_web_events__sessionized", "seed.mezo.referrer_mapping"], "model.mezo.int_paid__union_paid": ["model.mezo.int_paid__twitter", "model.mezo.stg_paid__raw_other_marketing_costs"], "model.mezo.int_paid__all_paid": ["model.mezo.int_paid__union_paid"], "model.mezo.int_paid__twitter": ["model.twitter_ads.twitter_ads__campaign_report"], "model.mezo.dim1_attribution": ["model.mezo.int_segment__sessions"], "model.mezo.dim1_campaign": ["model.mezo.int_paid__twitter"], "model.mezo.fct_loans": ["model.mezo.int_goldsky_borrower_operations_mezo__loans_graph"], "model.mezo.fct_sessions": ["model.mezo.int_segment__sessions"], "model.mezo.dim1_token": ["model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph"], "model.mezo.dim1_products": ["model.mezo.int_goldsky_market_mezo__order_placed_graph"], "model.mezo.fct_paid": ["model.mezo.int_paid__all_paid"], "model.mezo.fct_all_facts": ["model.mezo.fct_assets_locked", "model.mezo.fct_donated", "model.mezo.fct_liquidation", "model.mezo.fct_loans", "model.mezo.fct_orders", "model.mezo.fct_paid", "model.mezo.fct_sessions"], "model.mezo.dim1_page": ["model.mezo.int_segment__sessions"], "model.mezo.fct_orders": ["model.mezo.int_goldsky_market_mezo__order_placed_graph"], "model.mezo.fct_liquidation": ["model.mezo.int_goldsky_musd_trove_manager__liquidation_graph"], "model.mezo.fct_donated": ["model.mezo.int_goldsky_market_mezo__donated_graph"], "model.mezo.fct_assets_locked": ["model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph"], "model.mezo.rep_marketing": ["model.mezo.dim1_attribution", "model.mezo.dim1_campaign", "model.mezo.dim1_products", "model.mezo.dim1_token", "model.mezo.dim1_users", "model.mezo.fct_all_facts"], "model.mezo.dim1_users": ["model.mezo.int_goldsky_borrower_operations_mezo__loans_graph", "model.mezo.int_goldsky_market_mezo__donated_graph", "model.mezo.int_goldsky_market_mezo__order_placed_graph", "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph", "model.mezo.int_segment__sessions_first_touch_point"], "seed.mezo.musd_market_map": [], "seed.mezo.referrer_mapping": [], "model.twitter_ads.twitter_ads__url_report": ["model.twitter_ads.stg_twitter_ads__account_history", "model.twitter_ads.stg_twitter_ads__campaign_history", "model.twitter_ads.stg_twitter_ads__line_item_history", "model.twitter_ads.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads.stg_twitter_ads__tweet", "model.twitter_ads.stg_twitter_ads__tweet_url"], "model.twitter_ads.twitter_ads__campaign_report": ["model.twitter_ads.stg_twitter_ads__account_history", "model.twitter_ads.stg_twitter_ads__campaign_history", "model.twitter_ads.stg_twitter_ads__campaign_report"], "model.twitter_ads.twitter_ads__promoted_tweet_report": ["model.twitter_ads.stg_twitter_ads__account_history", "model.twitter_ads.stg_twitter_ads__campaign_history", "model.twitter_ads.stg_twitter_ads__line_item_history", "model.twitter_ads.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads.stg_twitter_ads__tweet"], "model.twitter_ads.twitter_ads__account_report": ["model.twitter_ads.stg_twitter_ads__account_history", "model.twitter_ads.stg_twitter_ads__promoted_tweet_report"], "model.twitter_ads.twitter_ads__line_item_report": ["model.twitter_ads.stg_twitter_ads__account_history", "model.twitter_ads.stg_twitter_ads__campaign_history", "model.twitter_ads.stg_twitter_ads__line_item_history", "model.twitter_ads.stg_twitter_ads__line_item_report"], "model.twitter_ads.stg_twitter_ads__line_item_history": ["model.twitter_ads.stg_twitter_ads__line_item_history_tmp"], "model.twitter_ads.stg_twitter_ads__tweet": ["model.twitter_ads.stg_twitter_ads__tweet_tmp"], "model.twitter_ads.stg_twitter_ads__promoted_tweet_history": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_history_tmp"], "model.twitter_ads.stg_twitter_ads__tweet_url": ["model.twitter_ads.stg_twitter_ads__tweet_url_tmp"], "model.twitter_ads.stg_twitter_ads__line_item_report": ["model.twitter_ads.stg_twitter_ads__line_item_report_tmp"], "model.twitter_ads.stg_twitter_ads__campaign_report": ["model.twitter_ads.stg_twitter_ads__campaign_report_tmp"], "model.twitter_ads.stg_twitter_ads__campaign_history": ["model.twitter_ads.stg_twitter_ads__campaign_history_tmp"], "model.twitter_ads.stg_twitter_ads__promoted_tweet_report": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report_tmp"], "model.twitter_ads.stg_twitter_ads__account_history": ["model.twitter_ads.stg_twitter_ads__account_history_tmp"], "model.twitter_ads.stg_twitter_ads__line_item_history_tmp": ["source.twitter_ads.twitter_ads.line_item_history"], "model.twitter_ads.stg_twitter_ads__tweet_tmp": ["source.twitter_ads.twitter_ads.tweet"], "model.twitter_ads.stg_twitter_ads__line_item_report_tmp": ["source.twitter_ads.twitter_ads.line_item_report"], "model.twitter_ads.stg_twitter_ads__promoted_tweet_history_tmp": ["source.twitter_ads.twitter_ads.promoted_tweet_history"], "model.twitter_ads.stg_twitter_ads__campaign_history_tmp": ["source.twitter_ads.twitter_ads.campaign_history"], "model.twitter_ads.stg_twitter_ads__promoted_tweet_report_tmp": ["source.twitter_ads.twitter_ads.promoted_tweet_report"], "model.twitter_ads.stg_twitter_ads__tweet_url_tmp": ["source.twitter_ads.twitter_ads.tweet_url"], "model.twitter_ads.stg_twitter_ads__account_history_tmp": ["source.twitter_ads.twitter_ads.account_history"], "model.twitter_ads.stg_twitter_ads__campaign_report_tmp": ["source.twitter_ads.twitter_ads.campaign_report"], "test.mezo.not_null_referrer_mapping_medium.df377e3d47": ["seed.mezo.referrer_mapping"], "test.mezo.not_null_referrer_mapping_source.b73b2b8cd8": ["seed.mezo.referrer_mapping"], "test.mezo.unique_referrer_mapping_host.bcb81bd488": ["seed.mezo.referrer_mapping"], "test.mezo.not_null_referrer_mapping_host.f7aca82420": ["seed.mezo.referrer_mapping"], "test.mezo.not_null_stg_seed_musd_market_map_market_id.7aed42d931": ["model.mezo.stg_seed_musd_market_map"], "test.mezo.unique_stg_seed_musd_market_map_market_id.3ef476d498": ["model.mezo.stg_seed_musd_market_map"], "test.mezo.not_null_stg_seed_musd_market_map_market_name.3e0c2d149a": ["model.mezo.stg_seed_musd_market_map"], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_transaction_hash.8af81e66a4": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id.aeecfb753a": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender.a66a0994b2": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient.d1ab98d9f1": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_record_timestamp.393f97ac29": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount.322dc0af00": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_transaction_hash.b1856007b8": ["model.mezo.stg_goldsky_market_mezo__order_placed"], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_contract_id.9d1a5b5990": ["model.mezo.stg_goldsky_market_mezo__order_placed"], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_order_id.9de674f131": ["model.mezo.stg_goldsky_market_mezo__order_placed"], "test.mezo.unique_stg_goldsky_market_mezo__order_placed_order_id.57143edc7c": ["model.mezo.stg_goldsky_market_mezo__order_placed"], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_customer.cb63900574": ["model.mezo.stg_goldsky_market_mezo__order_placed"], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_record_timestamp.4037f5be11": ["model.mezo.stg_goldsky_market_mezo__order_placed"], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_price.5b34648113": ["model.mezo.stg_goldsky_market_mezo__order_placed"], "test.mezo.not_null_stg_goldsky_market_mezo__donated_transaction_hash.c24a4655e5": ["model.mezo.stg_goldsky_market_mezo__donated"], "test.mezo.not_null_stg_goldsky_market_mezo__donated_contract_id.7d89493317": ["model.mezo.stg_goldsky_market_mezo__donated"], "test.mezo.not_null_stg_goldsky_market_mezo__donated_donor.ba076fb7c7": ["model.mezo.stg_goldsky_market_mezo__donated"], "test.mezo.not_null_stg_goldsky_market_mezo__donated_recipient.0260f33ab2": ["model.mezo.stg_goldsky_market_mezo__donated"], "test.mezo.not_null_stg_goldsky_market_mezo__donated_record_timestamp.7a30ed6989": ["model.mezo.stg_goldsky_market_mezo__donated"], "test.mezo.not_null_stg_goldsky_market_mezo__donated_amount.9e357e33e8": ["model.mezo.stg_goldsky_market_mezo__donated"], "test.mezo.not_null_stg_goldsky_musd_trove_manager__liquidation_id.8c47e8b2bb": ["model.mezo.stg_goldsky_musd_trove_manager__liquidation"], "test.mezo.unique_stg_goldsky_musd_trove_manager__liquidation_id.df6a52690a": ["model.mezo.stg_goldsky_musd_trove_manager__liquidation"], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_transaction_hash.031e032172": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_contract_id.63b51c0d1d": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_borrower.de165fd7d2": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_record_timestamp.3f1dacb705": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_principal.b5690ada3a": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_collateral.0222bbb36d": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_transaction_hash.9f25d46b3a": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_contract_id.34f4641d0d": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a2579b4ab6": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "test.mezo.unique_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a6050ada2e": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_recipient.ae8f9d13d4": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_token_address.72795ef28f": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount.74a97d0622": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_record_timestamp.0ca0ccf782": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "test.mezo.unique_stg_segment_profiles__pages_id.8b7d146b0e": ["model.mezo.stg_segment_profiles__pages"], "test.mezo.not_null_stg_segment_profiles__pages_id.47466eb5a3": ["model.mezo.stg_segment_profiles__pages"], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_transaction_hash.4b511d469a": ["model.mezo.int_goldsky_market_mezo__order_placed"], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_contract_id.6bd7ce7cbe": ["model.mezo.int_goldsky_market_mezo__order_placed"], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_order_id.d36dfd9ebc": ["model.mezo.int_goldsky_market_mezo__order_placed"], "test.mezo.unique_int_goldsky_market_mezo__order_placed_order_id.c2d5c5d91c": ["model.mezo.int_goldsky_market_mezo__order_placed"], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_customer.2c38b434ee": ["model.mezo.int_goldsky_market_mezo__order_placed"], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_record_timestamp.4ba6cb3dde": ["model.mezo.int_goldsky_market_mezo__order_placed"], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_price.6f86c322d1": ["model.mezo.int_goldsky_market_mezo__order_placed"], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_product_name.9117b0762d": ["model.mezo.int_goldsky_market_mezo__order_placed"], "test.mezo.unique_int_segment__sessions_session_id.ae8ff6fd15": ["model.mezo.int_segment__sessions"], "test.mezo.not_null_int_segment__sessions_session_id.054a5916b0": ["model.mezo.int_segment__sessions"], "test.mezo.not_null_int_segment__sessions_referrer_id.e1c5dfd69c": ["model.mezo.int_segment__sessions"], "test.mezo.not_null_int_segment__sessions_paid_id.f8a200c5e6": ["model.mezo.int_segment__sessions"], "test.mezo.unique_int_segment_web_sessions__initial_session_id.778eb47ffe": ["model.mezo.int_segment_web_sessions__initial"], "test.mezo.not_null_int_segment_web_sessions__initial_session_id.03fa76bdd9": ["model.mezo.int_segment_web_sessions__initial"], "test.mezo.unique_int_segment_web_sessions_session_id.a8e2446761": ["model.mezo.int_segment_web_sessions"], "test.mezo.not_null_int_segment_web_sessions_session_id.72fb7c057a": ["model.mezo.int_segment_web_sessions"], "test.mezo.unique_int_segment_web_events__sessionized_id.5525e3ae39": ["model.mezo.int_segment_web_events__sessionized"], "test.mezo.not_null_int_segment_web_events__sessionized_id.e432ffb4ba": ["model.mezo.int_segment_web_events__sessionized"], "test.mezo.not_null_fct_liquidation_id.82354664ab": ["model.mezo.fct_liquidation"], "test.mezo.unique_fct_liquidation_id.9132e7004e": ["model.mezo.fct_liquidation"], "test.mezo.not_null_fct_liquidation_fk__dim1_users.1339efc368": ["model.mezo.fct_liquidation"], "test.mezo.relationships_fct_liquidation_fk__dim1_users__canonical_segment_id__ref_dim1_users_.148c2f314a": ["model.mezo.dim1_users", "model.mezo.fct_liquidation"], "test.mezo.not_null_dim1_attribution_id.f269ab92bc": ["model.mezo.dim1_attribution"], "test.mezo.unique_dim1_attribution_id.6c0c08311d": ["model.mezo.dim1_attribution"], "test.mezo.not_null_dim1_products_id.8370faf3be": ["model.mezo.dim1_products"], "test.mezo.unique_dim1_products_id.4b83c36e82": ["model.mezo.dim1_products"], "test.mezo.not_null_dim1_campaign_id.639da77ba5": ["model.mezo.dim1_campaign"], "test.mezo.unique_dim1_campaign_id.659028b1d8": ["model.mezo.dim1_campaign"], "test.mezo.not_null_fct_paid_id.5a65dda264": ["model.mezo.fct_paid"], "test.mezo.not_null_fct_paid_spend.8602bccb19": ["model.mezo.fct_paid"], "test.mezo.not_null_fct_paid_impressions.49b3a284be": ["model.mezo.fct_paid"], "test.mezo.not_null_fct_paid_clicks.ae89731850": ["model.mezo.fct_paid"], "test.mezo.relationships_fct_all_facts_fk__dim1_users__canonical_segment_id__ref_dim1_users_.f486e786ed": ["model.mezo.dim1_users", "model.mezo.fct_all_facts"], "test.mezo.relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_.a840a539d9": ["model.mezo.dim1_token", "model.mezo.fct_all_facts"], "test.mezo.relationships_fct_all_facts_fk__dim1_products__id__ref_dim1_products_.c2dc8a2b22": ["model.mezo.dim1_products", "model.mezo.fct_all_facts"], "test.mezo.relationships_fct_all_facts_fk__dim1_campaign__id__ref_dim1_campaign_.dc5d3cf6ab": ["model.mezo.dim1_campaign", "model.mezo.fct_all_facts"], "test.mezo.relationships_fct_all_facts_fk__dim1_attribution__id__ref_dim1_attribution_.be7497d220": ["model.mezo.dim1_attribution", "model.mezo.fct_all_facts"], "test.mezo.not_null_fct_donated_id.49a53e74fd": ["model.mezo.fct_donated"], "test.mezo.unique_fct_donated_id.c0b02eaa9a": ["model.mezo.fct_donated"], "test.mezo.not_null_fct_donated_fk__dim1_users.7f596bd9be": ["model.mezo.fct_donated"], "test.mezo.relationships_fct_donated_fk__dim1_users__canonical_segment_id__ref_dim1_users_.a311a9c4f6": ["model.mezo.dim1_users", "model.mezo.fct_donated"], "test.mezo.not_null_fct_loans_id.435fdcc0bf": ["model.mezo.fct_loans"], "test.mezo.unique_fct_loans_id.0e1f397ccb": ["model.mezo.fct_loans"], "test.mezo.not_null_fct_loans_fk__dim1_users.376a7b06d9": ["model.mezo.fct_loans"], "test.mezo.relationships_fct_loans_fk__dim1_users__canonical_segment_id__ref_dim1_users_.6beb5f3617": ["model.mezo.dim1_users", "model.mezo.fct_loans"], "test.mezo.not_null_fct_sessions_id.ac5a8064a2": ["model.mezo.fct_sessions"], "test.mezo.unique_fct_sessions_id.51322284c8": ["model.mezo.fct_sessions"], "test.mezo.not_null_fct_sessions_fk__fct_paid.c2154be23d": ["model.mezo.fct_sessions"], "test.mezo.not_null_fct_sessions_fk__dim1_users.dd1a161df0": ["model.mezo.fct_sessions"], "test.mezo.relationships_fct_sessions_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2f0fdc2db6": ["model.mezo.dim1_users", "model.mezo.fct_sessions"], "test.mezo.relationships_fct_sessions_fk__dim1_campaign__id__ref_dim1_campaign_.84f22422e7": ["model.mezo.dim1_campaign", "model.mezo.fct_sessions"], "test.mezo.not_null_fct_sessions_fk__dim1_attribution.f18c7ead96": ["model.mezo.fct_sessions"], "test.mezo.relationships_fct_sessions_fk__dim1_attribution__id__ref_dim1_attribution_.ec12164321": ["model.mezo.dim1_attribution", "model.mezo.fct_sessions"], "test.mezo.not_null_dim1_page_id.d79d3fd1e4": ["model.mezo.dim1_page"], "test.mezo.unique_dim1_page_id.9a4091b5ea": ["model.mezo.dim1_page"], "test.mezo.not_null_dim1_users_canonical_segment_id.312c1fd5f5": ["model.mezo.dim1_users"], "test.mezo.unique_dim1_users_canonical_segment_id.da65158f76": ["model.mezo.dim1_users"], "test.mezo.not_null_fct_orders_id.600c7b2b67": ["model.mezo.fct_orders"], "test.mezo.unique_fct_orders_id.2a20231a0b": ["model.mezo.fct_orders"], "test.mezo.not_null_fct_orders_fk__dim1_users.1f7b989a3b": ["model.mezo.fct_orders"], "test.mezo.relationships_fct_orders_fk__dim1_users__canonical_segment_id__ref_dim1_users_.752ad53e0c": ["model.mezo.dim1_users", "model.mezo.fct_orders"], "test.mezo.not_null_fct_orders_fk__dim1_products.1363455aa1": ["model.mezo.fct_orders"], "test.mezo.relationships_fct_orders_fk__dim1_products__id__ref_dim1_products_.1f6ee6743d": ["model.mezo.dim1_products", "model.mezo.fct_orders"], "test.mezo.not_null_fct_assets_locked_id.9d6d794e56": ["model.mezo.fct_assets_locked"], "test.mezo.unique_fct_assets_locked_id.5202c9d5e4": ["model.mezo.fct_assets_locked"], "test.mezo.not_null_fct_assets_locked_fk__dim1_users.1fc52f16cd": ["model.mezo.fct_assets_locked"], "test.mezo.relationships_fct_assets_locked_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2a4d83ae29": ["model.mezo.dim1_users", "model.mezo.fct_assets_locked"], "test.mezo.not_null_fct_assets_locked_fk__dim1_token.145a3f35fe": ["model.mezo.fct_assets_locked"], "test.mezo.relationships_fct_assets_locked_fk__dim1_token__id__ref_dim1_token_.5c4a334c0f": ["model.mezo.dim1_token", "model.mezo.fct_assets_locked"], "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8": ["model.twitter_ads.twitter_ads__campaign_report"], "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0": ["model.twitter_ads.twitter_ads__campaign_report"], "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82": ["model.twitter_ads.twitter_ads__campaign_report"], "test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce": ["model.twitter_ads.twitter_ads__line_item_report"], "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211": ["model.twitter_ads.twitter_ads__line_item_report"], "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312": ["model.twitter_ads.twitter_ads__line_item_report"], "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846": ["model.twitter_ads.twitter_ads__account_report"], "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194": ["model.twitter_ads.twitter_ads__account_report"], "test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908": ["model.twitter_ads.twitter_ads__account_report"], "test.twitter_ads.not_null_twitter_ads__keyword_report_date_day.e0ce90c1ec": [], "test.twitter_ads.not_null_twitter_ads__keyword_report_keyword_id.91efa0a538": [], "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5": ["model.twitter_ads.twitter_ads__promoted_tweet_report"], "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e": ["model.twitter_ads.twitter_ads__promoted_tweet_report"], "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b": ["model.twitter_ads.twitter_ads__url_report"], "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e": ["model.twitter_ads.twitter_ads__url_report"], "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143": ["model.twitter_ads.twitter_ads__url_report"], "test.twitter_ads.not_null_twitter_ads__url_report_base_url.dfd7ab549e": ["model.twitter_ads.twitter_ads__url_report"], "test.twitter_ads.not_null_twitter_ads__campaign_country_report_campaign_id.d08c7d25a2": [], "test.twitter_ads.not_null_twitter_ads__campaign_country_report_date_day.33eabfbcaa": [], "test.twitter_ads.not_null_twitter_ads__campaign_country_report_placement.3a4c65b9c5": [], "test.twitter_ads.not_null_twitter_ads__campaign_region_report_campaign_id.c06b8be032": [], "test.twitter_ads.not_null_twitter_ads__campaign_region_report_date_day.884ad86a28": [], "test.twitter_ads.not_null_twitter_ads__campaign_region_report_placement.e6fb374bf5": [], "test.twitter_ads.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2": ["model.twitter_ads.stg_twitter_ads__account_history"], "test.twitter_ads.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce": ["model.twitter_ads.stg_twitter_ads__campaign_history"], "test.twitter_ads.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809": ["model.twitter_ads.stg_twitter_ads__line_item_history"], "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_history"], "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report"], "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report"], "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report"], "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_index.e998fb67be": ["model.twitter_ads.stg_twitter_ads__tweet_url"], "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218": ["model.twitter_ads.stg_twitter_ads__tweet_url"], "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c": ["model.twitter_ads.stg_twitter_ads__campaign_report"], "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f": ["model.twitter_ads.stg_twitter_ads__campaign_report"], "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4": ["model.twitter_ads.stg_twitter_ads__campaign_report"], "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe": ["model.twitter_ads.stg_twitter_ads__line_item_report"], "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7": ["model.twitter_ads.stg_twitter_ads__line_item_report"], "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb": ["model.twitter_ads.stg_twitter_ads__line_item_report"], "test.twitter_ads.not_null_stg_twitter_ads__line_item_keywords_report_keyword_id.e5f015e9ec": [], "test.twitter_ads.not_null_stg_twitter_ads__line_item_keywords_report_date_day.c7e7155b13": [], "test.twitter_ads.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd": ["model.twitter_ads.stg_twitter_ads__tweet"], "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_country.8bc44f6e39": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_date_day.bf69378746": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_campaign_id.e1ddc306c2": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_placement.638fb0cf03": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_regions_report_region.7b8b6fd555": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_regions_report_date_day.e7f9f99776": [], "source.mezo.raw_other_marketing_costs.other_marketing_costs": [], "source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__liquidation": [], "source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__trove_liquidated": [], "source.mezo.raw_goldsky.raw_goldsky_borrower_operations_mezo__trove_updated": [], "source.mezo.raw_goldsky.raw_goldsky_market_mezo__donated": [], "source.mezo.raw_goldsky.raw_goldsky_market_mezo__order_placed": [], "source.mezo.raw_goldsky.raw_goldsky_mezo_bridge_mainnet__assets_locked": [], "source.mezo.raw_goldsky.raw_goldsky_mezo_vaults_mezo__transfer": [], "source.mezo.raw_coin_gecko.coins": [], "source.mezo.raw_coin_gecko.prices": [], "source.mezo.raw_segment_profiles.tracks_view": [], "source.mezo.raw_segment_profiles.pages_view": [], "source.mezo.raw_segment_profiles.identify": [], "source.mezo.raw_segment_profiles.user_identifiers": [], "source.twitter_ads.twitter_ads.account_history": [], "source.twitter_ads.twitter_ads.campaign_history": [], "source.twitter_ads.twitter_ads.line_item_history": [], "source.twitter_ads.twitter_ads.promoted_tweet_history": [], "source.twitter_ads.twitter_ads.tweet_url": [], "source.twitter_ads.twitter_ads.promoted_tweet_report": [], "source.twitter_ads.twitter_ads.tweet": [], "source.twitter_ads.twitter_ads.campaign_report": [], "source.twitter_ads.twitter_ads.line_item_report": []}, "child_map": {"model.mezo.stg_seed_musd_market_map": ["model.mezo.int_goldsky_market_mezo__donated", "model.mezo.int_goldsky_market_mezo__order_placed", "test.mezo.not_null_stg_seed_musd_market_map_market_id.7aed42d931", "test.mezo.not_null_stg_seed_musd_market_map_market_name.3e0c2d149a", "test.mezo.unique_stg_seed_musd_market_map_market_id.3ef476d498"], "model.mezo.stg_goldsky_market_mezo__order_placed": ["model.mezo.int_goldsky_market_mezo__order_placed", "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_contract_id.9d1a5b5990", "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_customer.cb63900574", "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_order_id.9de674f131", "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_price.5b34648113", "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_record_timestamp.4037f5be11", "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_transaction_hash.b1856007b8", "test.mezo.unique_stg_goldsky_market_mezo__order_placed_order_id.57143edc7c"], "model.mezo.stg_goldsky_musd_trove_manager__trove_liquidated": ["model.mezo.int_goldsky_musd_trove_manager__liquidation"], "model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated": ["model.mezo.int_goldsky_borrower_operations_mezo__loans", "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_borrower.de165fd7d2", "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_collateral.0222bbb36d", "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_contract_id.63b51c0d1d", "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_principal.b5690ada3a", "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_record_timestamp.3f1dacb705", "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_transaction_hash.031e032172"], "model.mezo.stg_goldsky_market_mezo__donated": ["model.mezo.int_goldsky_market_mezo__donated", "test.mezo.not_null_stg_goldsky_market_mezo__donated_amount.9e357e33e8", "test.mezo.not_null_stg_goldsky_market_mezo__donated_contract_id.7d89493317", "test.mezo.not_null_stg_goldsky_market_mezo__donated_donor.ba076fb7c7", "test.mezo.not_null_stg_goldsky_market_mezo__donated_recipient.0260f33ab2", "test.mezo.not_null_stg_goldsky_market_mezo__donated_record_timestamp.7a30ed6989", "test.mezo.not_null_stg_goldsky_market_mezo__donated_transaction_hash.c24a4655e5"], "model.mezo.stg_goldsky_musd_trove_manager__liquidation": ["model.mezo.int_goldsky_musd_trove_manager__liquidation", "test.mezo.not_null_stg_goldsky_musd_trove_manager__liquidation_id.8c47e8b2bb", "test.mezo.unique_stg_goldsky_musd_trove_manager__liquidation_id.df6a52690a"], "model.mezo.stg_goldsky_mezo_vaults_mezo__transfer": ["test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount.322dc0af00", "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id.aeecfb753a", "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient.d1ab98d9f1", "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_record_timestamp.393f97ac29", "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender.a66a0994b2", "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_transaction_hash.8af81e66a4"], "model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked": ["model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked", "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount.74a97d0622", "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_contract_id.34f4641d0d", "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_recipient.ae8f9d13d4", "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_record_timestamp.0ca0ccf782", "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a2579b4ab6", "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_token_address.72795ef28f", "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_transaction_hash.9f25d46b3a", "test.mezo.unique_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a6050ada2e"], "model.mezo.stg_coin_gecko__coins": ["model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked"], "model.mezo.stg_coin_gecko__prices": ["model.mezo.int_goldsky_borrower_operations_mezo__loans", "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked"], "model.mezo.stg_segment_profiles__user_identifiers": ["model.mezo.int_goldsky_borrower_operations_mezo__loans_graph", "model.mezo.int_goldsky_market_mezo__donated_graph", "model.mezo.int_goldsky_market_mezo__order_placed_graph", "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph", "model.mezo.int_goldsky_musd_trove_manager__liquidation_graph", "model.mezo.int_segment__sessions"], "model.mezo.stg_segment__union_events": ["model.mezo.stg_segment__events"], "model.mezo.stg_segment__events": ["model.mezo.int_segment_web_events__sessionized", "model.mezo.int_segment_web_user_stitching"], "model.mezo.stg_segment_profiles__pages": ["model.mezo.stg_segment__union_events", "test.mezo.not_null_stg_segment_profiles__pages_id.47466eb5a3", "test.mezo.unique_stg_segment_profiles__pages_id.8b7d146b0e"], "model.mezo.stg_segment_profiles__tracks": ["model.mezo.stg_segment__union_events"], "model.mezo.stg_paid__raw_other_marketing_costs": ["model.mezo.int_paid__union_paid"], "model.mezo.int_goldsky_market_mezo__donated": ["model.mezo.int_goldsky_market_mezo__donated_graph"], "model.mezo.int_goldsky_market_mezo__order_placed": ["model.mezo.int_goldsky_market_mezo__order_placed_graph", "test.mezo.not_null_int_goldsky_market_mezo__order_placed_contract_id.6bd7ce7cbe", "test.mezo.not_null_int_goldsky_market_mezo__order_placed_customer.2c38b434ee", "test.mezo.not_null_int_goldsky_market_mezo__order_placed_order_id.d36dfd9ebc", "test.mezo.not_null_int_goldsky_market_mezo__order_placed_price.6f86c322d1", "test.mezo.not_null_int_goldsky_market_mezo__order_placed_product_name.9117b0762d", "test.mezo.not_null_int_goldsky_market_mezo__order_placed_record_timestamp.4ba6cb3dde", "test.mezo.not_null_int_goldsky_market_mezo__order_placed_transaction_hash.4b511d469a", "test.mezo.unique_int_goldsky_market_mezo__order_placed_order_id.c2d5c5d91c"], "model.mezo.int_goldsky_musd_trove_manager__liquidation": ["model.mezo.int_goldsky_musd_trove_manager__liquidation_graph"], "model.mezo.int_goldsky_borrower_operations_mezo__loans": ["model.mezo.int_goldsky_borrower_operations_mezo__loans_graph"], "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked": ["model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph"], "model.mezo.int_goldsky_borrower_operations_mezo__loans_graph": ["model.mezo.dim1_users", "model.mezo.fct_loans"], "model.mezo.int_goldsky_market_mezo__order_placed_graph": ["model.mezo.dim1_products", "model.mezo.dim1_users", "model.mezo.fct_orders"], "model.mezo.int_goldsky_musd_trove_manager__liquidation_graph": ["model.mezo.fct_liquidation"], "model.mezo.int_goldsky_mezo_bridge_mainnet__assets_locked_graph": ["model.mezo.dim1_token", "model.mezo.dim1_users", "model.mezo.fct_assets_locked"], "model.mezo.int_goldsky_market_mezo__donated_graph": ["model.mezo.dim1_users", "model.mezo.fct_donated"], "model.mezo.int_segment__sessions": ["model.mezo.dim1_attribution", "model.mezo.dim1_page", "model.mezo.fct_sessions", "model.mezo.int_segment__sessions_first_touch_point", "test.mezo.not_null_int_segment__sessions_paid_id.f8a200c5e6", "test.mezo.not_null_int_segment__sessions_referrer_id.e1c5dfd69c", "test.mezo.not_null_int_segment__sessions_session_id.054a5916b0", "test.mezo.unique_int_segment__sessions_session_id.ae8ff6fd15"], "model.mezo.int_segment_web_sessions": ["model.mezo.int_segment__sessions", "test.mezo.not_null_int_segment_web_sessions_session_id.72fb7c057a", "test.mezo.unique_int_segment_web_sessions_session_id.a8e2446761"], "model.mezo.int_segment_web_user_stitching": ["model.mezo.int_segment_web_sessions__stitched"], "model.mezo.int_segment_web_events__sessionized": ["model.mezo.int_segment_web_sessions__initial", "test.mezo.not_null_int_segment_web_events__sessionized_id.e432ffb4ba", "test.mezo.unique_int_segment_web_events__sessionized_id.5525e3ae39"], "model.mezo.int_segment_web_sessions__stitched": ["model.mezo.int_segment_web_sessions"], "model.mezo.int_segment__sessions_first_touch_point": ["model.mezo.dim1_users"], "model.mezo.int_segment_web_sessions__initial": ["model.mezo.int_segment_web_sessions__stitched", "test.mezo.not_null_int_segment_web_sessions__initial_session_id.03fa76bdd9", "test.mezo.unique_int_segment_web_sessions__initial_session_id.778eb47ffe"], "model.mezo.int_paid__union_paid": ["model.mezo.int_paid__all_paid"], "model.mezo.int_paid__all_paid": ["model.mezo.fct_paid"], "model.mezo.int_paid__twitter": ["model.mezo.dim1_campaign", "model.mezo.int_paid__union_paid"], "model.mezo.dim1_attribution": ["model.mezo.rep_marketing", "test.mezo.not_null_dim1_attribution_id.f269ab92bc", "test.mezo.relationships_fct_all_facts_fk__dim1_attribution__id__ref_dim1_attribution_.be7497d220", "test.mezo.relationships_fct_sessions_fk__dim1_attribution__id__ref_dim1_attribution_.ec12164321", "test.mezo.unique_dim1_attribution_id.6c0c08311d"], "model.mezo.dim1_campaign": ["model.mezo.rep_marketing", "test.mezo.not_null_dim1_campaign_id.639da77ba5", "test.mezo.relationships_fct_all_facts_fk__dim1_campaign__id__ref_dim1_campaign_.dc5d3cf6ab", "test.mezo.relationships_fct_sessions_fk__dim1_campaign__id__ref_dim1_campaign_.84f22422e7", "test.mezo.unique_dim1_campaign_id.659028b1d8"], "model.mezo.fct_loans": ["model.mezo.fct_all_facts", "test.mezo.not_null_fct_loans_fk__dim1_users.376a7b06d9", "test.mezo.not_null_fct_loans_id.435fdcc0bf", "test.mezo.relationships_fct_loans_fk__dim1_users__canonical_segment_id__ref_dim1_users_.6beb5f3617", "test.mezo.unique_fct_loans_id.0e1f397ccb"], "model.mezo.fct_sessions": ["model.mezo.fct_all_facts", "test.mezo.not_null_fct_sessions_fk__dim1_attribution.f18c7ead96", "test.mezo.not_null_fct_sessions_fk__dim1_users.dd1a161df0", "test.mezo.not_null_fct_sessions_fk__fct_paid.c2154be23d", "test.mezo.not_null_fct_sessions_id.ac5a8064a2", "test.mezo.relationships_fct_sessions_fk__dim1_attribution__id__ref_dim1_attribution_.ec12164321", "test.mezo.relationships_fct_sessions_fk__dim1_campaign__id__ref_dim1_campaign_.84f22422e7", "test.mezo.relationships_fct_sessions_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2f0fdc2db6", "test.mezo.unique_fct_sessions_id.51322284c8"], "model.mezo.dim1_token": ["model.mezo.rep_marketing", "test.mezo.relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_.a840a539d9", "test.mezo.relationships_fct_assets_locked_fk__dim1_token__id__ref_dim1_token_.5c4a334c0f"], "model.mezo.dim1_products": ["model.mezo.rep_marketing", "test.mezo.not_null_dim1_products_id.8370faf3be", "test.mezo.relationships_fct_all_facts_fk__dim1_products__id__ref_dim1_products_.c2dc8a2b22", "test.mezo.relationships_fct_orders_fk__dim1_products__id__ref_dim1_products_.1f6ee6743d", "test.mezo.unique_dim1_products_id.4b83c36e82"], "model.mezo.fct_paid": ["model.mezo.fct_all_facts", "test.mezo.not_null_fct_paid_clicks.ae89731850", "test.mezo.not_null_fct_paid_id.5a65dda264", "test.mezo.not_null_fct_paid_impressions.49b3a284be", "test.mezo.not_null_fct_paid_spend.8602bccb19"], "model.mezo.fct_all_facts": ["model.mezo.rep_marketing", "test.mezo.relationships_fct_all_facts_fk__dim1_attribution__id__ref_dim1_attribution_.be7497d220", "test.mezo.relationships_fct_all_facts_fk__dim1_campaign__id__ref_dim1_campaign_.dc5d3cf6ab", "test.mezo.relationships_fct_all_facts_fk__dim1_products__id__ref_dim1_products_.c2dc8a2b22", "test.mezo.relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_.a840a539d9", "test.mezo.relationships_fct_all_facts_fk__dim1_users__canonical_segment_id__ref_dim1_users_.f486e786ed"], "model.mezo.dim1_page": ["test.mezo.not_null_dim1_page_id.d79d3fd1e4", "test.mezo.unique_dim1_page_id.9a4091b5ea"], "model.mezo.fct_orders": ["model.mezo.fct_all_facts", "test.mezo.not_null_fct_orders_fk__dim1_products.1363455aa1", "test.mezo.not_null_fct_orders_fk__dim1_users.1f7b989a3b", "test.mezo.not_null_fct_orders_id.600c7b2b67", "test.mezo.relationships_fct_orders_fk__dim1_products__id__ref_dim1_products_.1f6ee6743d", "test.mezo.relationships_fct_orders_fk__dim1_users__canonical_segment_id__ref_dim1_users_.752ad53e0c", "test.mezo.unique_fct_orders_id.2a20231a0b"], "model.mezo.fct_liquidation": ["model.mezo.fct_all_facts", "test.mezo.not_null_fct_liquidation_fk__dim1_users.1339efc368", "test.mezo.not_null_fct_liquidation_id.82354664ab", "test.mezo.relationships_fct_liquidation_fk__dim1_users__canonical_segment_id__ref_dim1_users_.148c2f314a", "test.mezo.unique_fct_liquidation_id.9132e7004e"], "model.mezo.fct_donated": ["model.mezo.fct_all_facts", "test.mezo.not_null_fct_donated_fk__dim1_users.7f596bd9be", "test.mezo.not_null_fct_donated_id.49a53e74fd", "test.mezo.relationships_fct_donated_fk__dim1_users__canonical_segment_id__ref_dim1_users_.a311a9c4f6", "test.mezo.unique_fct_donated_id.c0b02eaa9a"], "model.mezo.fct_assets_locked": ["model.mezo.fct_all_facts", "test.mezo.not_null_fct_assets_locked_fk__dim1_token.145a3f35fe", "test.mezo.not_null_fct_assets_locked_fk__dim1_users.1fc52f16cd", "test.mezo.not_null_fct_assets_locked_id.9d6d794e56", "test.mezo.relationships_fct_assets_locked_fk__dim1_token__id__ref_dim1_token_.5c4a334c0f", "test.mezo.relationships_fct_assets_locked_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2a4d83ae29", "test.mezo.unique_fct_assets_locked_id.5202c9d5e4"], "model.mezo.rep_marketing": [], "model.mezo.dim1_users": ["model.mezo.rep_marketing", "test.mezo.not_null_dim1_users_canonical_segment_id.312c1fd5f5", "test.mezo.relationships_fct_all_facts_fk__dim1_users__canonical_segment_id__ref_dim1_users_.f486e786ed", "test.mezo.relationships_fct_assets_locked_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2a4d83ae29", "test.mezo.relationships_fct_donated_fk__dim1_users__canonical_segment_id__ref_dim1_users_.a311a9c4f6", "test.mezo.relationships_fct_liquidation_fk__dim1_users__canonical_segment_id__ref_dim1_users_.148c2f314a", "test.mezo.relationships_fct_loans_fk__dim1_users__canonical_segment_id__ref_dim1_users_.6beb5f3617", "test.mezo.relationships_fct_orders_fk__dim1_users__canonical_segment_id__ref_dim1_users_.752ad53e0c", "test.mezo.relationships_fct_sessions_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2f0fdc2db6", "test.mezo.unique_dim1_users_canonical_segment_id.da65158f76"], "seed.mezo.musd_market_map": ["model.mezo.stg_seed_musd_market_map"], "seed.mezo.referrer_mapping": ["model.mezo.int_segment_web_sessions__initial", "test.mezo.not_null_referrer_mapping_host.f7aca82420", "test.mezo.not_null_referrer_mapping_medium.df377e3d47", "test.mezo.not_null_referrer_mapping_source.b73b2b8cd8", "test.mezo.unique_referrer_mapping_host.bcb81bd488"], "model.twitter_ads.twitter_ads__url_report": ["test.twitter_ads.not_null_twitter_ads__url_report_base_url.dfd7ab549e", "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b", "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e", "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143"], "model.twitter_ads.twitter_ads__campaign_report": ["model.mezo.int_paid__twitter", "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8", "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0", "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82"], "model.twitter_ads.twitter_ads__promoted_tweet_report": ["test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5", "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e"], "model.twitter_ads.twitter_ads__account_report": ["test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908", "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846", "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194"], "model.twitter_ads.twitter_ads__line_item_report": ["test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce", "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211", "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312"], "model.twitter_ads.stg_twitter_ads__line_item_history": ["model.twitter_ads.twitter_ads__line_item_report", "model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809"], "model.twitter_ads.stg_twitter_ads__tweet": ["model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd"], "model.twitter_ads.stg_twitter_ads__promoted_tweet_history": ["model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09"], "model.twitter_ads.stg_twitter_ads__tweet_url": ["model.twitter_ads.twitter_ads__url_report", "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_index.e998fb67be", "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218"], "model.twitter_ads.stg_twitter_ads__line_item_report": ["model.twitter_ads.twitter_ads__line_item_report", "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe", "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7", "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb"], "model.twitter_ads.stg_twitter_ads__campaign_report": ["model.twitter_ads.twitter_ads__campaign_report", "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f", "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c", "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4"], "model.twitter_ads.stg_twitter_ads__campaign_history": ["model.mezo.int_segment__sessions", "model.twitter_ads.twitter_ads__campaign_report", "model.twitter_ads.twitter_ads__line_item_report", "model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce"], "model.twitter_ads.stg_twitter_ads__promoted_tweet_report": ["model.twitter_ads.twitter_ads__account_report", "model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894", "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3", "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598"], "model.twitter_ads.stg_twitter_ads__account_history": ["model.twitter_ads.twitter_ads__account_report", "model.twitter_ads.twitter_ads__campaign_report", "model.twitter_ads.twitter_ads__line_item_report", "model.twitter_ads.twitter_ads__promoted_tweet_report", "model.twitter_ads.twitter_ads__url_report", "test.twitter_ads.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2"], "model.twitter_ads.stg_twitter_ads__line_item_history_tmp": ["model.twitter_ads.stg_twitter_ads__line_item_history"], "model.twitter_ads.stg_twitter_ads__tweet_tmp": ["model.twitter_ads.stg_twitter_ads__tweet"], "model.twitter_ads.stg_twitter_ads__line_item_report_tmp": ["model.twitter_ads.stg_twitter_ads__line_item_report"], "model.twitter_ads.stg_twitter_ads__promoted_tweet_history_tmp": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_history"], "model.twitter_ads.stg_twitter_ads__campaign_history_tmp": ["model.twitter_ads.stg_twitter_ads__campaign_history"], "model.twitter_ads.stg_twitter_ads__promoted_tweet_report_tmp": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report"], "model.twitter_ads.stg_twitter_ads__tweet_url_tmp": ["model.twitter_ads.stg_twitter_ads__tweet_url"], "model.twitter_ads.stg_twitter_ads__account_history_tmp": ["model.twitter_ads.stg_twitter_ads__account_history"], "model.twitter_ads.stg_twitter_ads__campaign_report_tmp": ["model.twitter_ads.stg_twitter_ads__campaign_report"], "test.mezo.not_null_referrer_mapping_medium.df377e3d47": [], "test.mezo.not_null_referrer_mapping_source.b73b2b8cd8": [], "test.mezo.unique_referrer_mapping_host.bcb81bd488": [], "test.mezo.not_null_referrer_mapping_host.f7aca82420": [], "test.mezo.not_null_stg_seed_musd_market_map_market_id.7aed42d931": [], "test.mezo.unique_stg_seed_musd_market_map_market_id.3ef476d498": [], "test.mezo.not_null_stg_seed_musd_market_map_market_name.3e0c2d149a": [], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_transaction_hash.8af81e66a4": [], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_contract_id.aeecfb753a": [], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_sender.a66a0994b2": [], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_recipient.d1ab98d9f1": [], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_record_timestamp.393f97ac29": [], "test.mezo.not_null_stg_goldsky_mezo_vaults_mezo__transfer_amount.322dc0af00": [], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_transaction_hash.b1856007b8": [], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_contract_id.9d1a5b5990": [], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_order_id.9de674f131": [], "test.mezo.unique_stg_goldsky_market_mezo__order_placed_order_id.57143edc7c": [], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_customer.cb63900574": [], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_record_timestamp.4037f5be11": [], "test.mezo.not_null_stg_goldsky_market_mezo__order_placed_price.5b34648113": [], "test.mezo.not_null_stg_goldsky_market_mezo__donated_transaction_hash.c24a4655e5": [], "test.mezo.not_null_stg_goldsky_market_mezo__donated_contract_id.7d89493317": [], "test.mezo.not_null_stg_goldsky_market_mezo__donated_donor.ba076fb7c7": [], "test.mezo.not_null_stg_goldsky_market_mezo__donated_recipient.0260f33ab2": [], "test.mezo.not_null_stg_goldsky_market_mezo__donated_record_timestamp.7a30ed6989": [], "test.mezo.not_null_stg_goldsky_market_mezo__donated_amount.9e357e33e8": [], "test.mezo.not_null_stg_goldsky_musd_trove_manager__liquidation_id.8c47e8b2bb": [], "test.mezo.unique_stg_goldsky_musd_trove_manager__liquidation_id.df6a52690a": [], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_transaction_hash.031e032172": [], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_contract_id.63b51c0d1d": [], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_borrower.de165fd7d2": [], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_record_timestamp.3f1dacb705": [], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_principal.b5690ada3a": [], "test.mezo.not_null_stg_goldsky_borrower_operations_mezo__trove_updated_collateral.0222bbb36d": [], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_transaction_hash.9f25d46b3a": [], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_contract_id.34f4641d0d": [], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a2579b4ab6": [], "test.mezo.unique_stg_goldsky_mezo_bridge_mainnet__assets_locked_sequence_number.a6050ada2e": [], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_recipient.ae8f9d13d4": [], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_token_address.72795ef28f": [], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_amount.74a97d0622": [], "test.mezo.not_null_stg_goldsky_mezo_bridge_mainnet__assets_locked_record_timestamp.0ca0ccf782": [], "test.mezo.unique_stg_segment_profiles__pages_id.8b7d146b0e": [], "test.mezo.not_null_stg_segment_profiles__pages_id.47466eb5a3": [], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_transaction_hash.4b511d469a": [], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_contract_id.6bd7ce7cbe": [], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_order_id.d36dfd9ebc": [], "test.mezo.unique_int_goldsky_market_mezo__order_placed_order_id.c2d5c5d91c": [], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_customer.2c38b434ee": [], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_record_timestamp.4ba6cb3dde": [], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_price.6f86c322d1": [], "test.mezo.not_null_int_goldsky_market_mezo__order_placed_product_name.9117b0762d": [], "test.mezo.unique_int_segment__sessions_session_id.ae8ff6fd15": [], "test.mezo.not_null_int_segment__sessions_session_id.054a5916b0": [], "test.mezo.not_null_int_segment__sessions_referrer_id.e1c5dfd69c": [], "test.mezo.not_null_int_segment__sessions_paid_id.f8a200c5e6": [], "test.mezo.unique_int_segment_web_sessions__initial_session_id.778eb47ffe": [], "test.mezo.not_null_int_segment_web_sessions__initial_session_id.03fa76bdd9": [], "test.mezo.unique_int_segment_web_sessions_session_id.a8e2446761": [], "test.mezo.not_null_int_segment_web_sessions_session_id.72fb7c057a": [], "test.mezo.unique_int_segment_web_events__sessionized_id.5525e3ae39": [], "test.mezo.not_null_int_segment_web_events__sessionized_id.e432ffb4ba": [], "test.mezo.not_null_fct_liquidation_id.82354664ab": [], "test.mezo.unique_fct_liquidation_id.9132e7004e": [], "test.mezo.not_null_fct_liquidation_fk__dim1_users.1339efc368": [], "test.mezo.relationships_fct_liquidation_fk__dim1_users__canonical_segment_id__ref_dim1_users_.148c2f314a": [], "test.mezo.not_null_dim1_attribution_id.f269ab92bc": [], "test.mezo.unique_dim1_attribution_id.6c0c08311d": [], "test.mezo.not_null_dim1_products_id.8370faf3be": [], "test.mezo.unique_dim1_products_id.4b83c36e82": [], "test.mezo.not_null_dim1_campaign_id.639da77ba5": [], "test.mezo.unique_dim1_campaign_id.659028b1d8": [], "test.mezo.not_null_fct_paid_id.5a65dda264": [], "test.mezo.not_null_fct_paid_spend.8602bccb19": [], "test.mezo.not_null_fct_paid_impressions.49b3a284be": [], "test.mezo.not_null_fct_paid_clicks.ae89731850": [], "test.mezo.relationships_fct_all_facts_fk__dim1_users__canonical_segment_id__ref_dim1_users_.f486e786ed": [], "test.mezo.relationships_fct_all_facts_fk__dim1_token__id__ref_dim1_token_.a840a539d9": [], "test.mezo.relationships_fct_all_facts_fk__dim1_products__id__ref_dim1_products_.c2dc8a2b22": [], "test.mezo.relationships_fct_all_facts_fk__dim1_campaign__id__ref_dim1_campaign_.dc5d3cf6ab": [], "test.mezo.relationships_fct_all_facts_fk__dim1_attribution__id__ref_dim1_attribution_.be7497d220": [], "test.mezo.not_null_fct_donated_id.49a53e74fd": [], "test.mezo.unique_fct_donated_id.c0b02eaa9a": [], "test.mezo.not_null_fct_donated_fk__dim1_users.7f596bd9be": [], "test.mezo.relationships_fct_donated_fk__dim1_users__canonical_segment_id__ref_dim1_users_.a311a9c4f6": [], "test.mezo.not_null_fct_loans_id.435fdcc0bf": [], "test.mezo.unique_fct_loans_id.0e1f397ccb": [], "test.mezo.not_null_fct_loans_fk__dim1_users.376a7b06d9": [], "test.mezo.relationships_fct_loans_fk__dim1_users__canonical_segment_id__ref_dim1_users_.6beb5f3617": [], "test.mezo.not_null_fct_sessions_id.ac5a8064a2": [], "test.mezo.unique_fct_sessions_id.51322284c8": [], "test.mezo.not_null_fct_sessions_fk__fct_paid.c2154be23d": [], "test.mezo.not_null_fct_sessions_fk__dim1_users.dd1a161df0": [], "test.mezo.relationships_fct_sessions_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2f0fdc2db6": [], "test.mezo.relationships_fct_sessions_fk__dim1_campaign__id__ref_dim1_campaign_.84f22422e7": [], "test.mezo.not_null_fct_sessions_fk__dim1_attribution.f18c7ead96": [], "test.mezo.relationships_fct_sessions_fk__dim1_attribution__id__ref_dim1_attribution_.ec12164321": [], "test.mezo.not_null_dim1_page_id.d79d3fd1e4": [], "test.mezo.unique_dim1_page_id.9a4091b5ea": [], "test.mezo.not_null_dim1_users_canonical_segment_id.312c1fd5f5": [], "test.mezo.unique_dim1_users_canonical_segment_id.da65158f76": [], "test.mezo.not_null_fct_orders_id.600c7b2b67": [], "test.mezo.unique_fct_orders_id.2a20231a0b": [], "test.mezo.not_null_fct_orders_fk__dim1_users.1f7b989a3b": [], "test.mezo.relationships_fct_orders_fk__dim1_users__canonical_segment_id__ref_dim1_users_.752ad53e0c": [], "test.mezo.not_null_fct_orders_fk__dim1_products.1363455aa1": [], "test.mezo.relationships_fct_orders_fk__dim1_products__id__ref_dim1_products_.1f6ee6743d": [], "test.mezo.not_null_fct_assets_locked_id.9d6d794e56": [], "test.mezo.unique_fct_assets_locked_id.5202c9d5e4": [], "test.mezo.not_null_fct_assets_locked_fk__dim1_users.1fc52f16cd": [], "test.mezo.relationships_fct_assets_locked_fk__dim1_users__canonical_segment_id__ref_dim1_users_.2a4d83ae29": [], "test.mezo.not_null_fct_assets_locked_fk__dim1_token.145a3f35fe": [], "test.mezo.relationships_fct_assets_locked_fk__dim1_token__id__ref_dim1_token_.5c4a334c0f": [], "test.twitter_ads.not_null_twitter_ads__campaign_report_campaign_id.03b1c451b8": [], "test.twitter_ads.not_null_twitter_ads__campaign_report_date_day.2b30b279b0": [], "test.twitter_ads.not_null_twitter_ads__campaign_report_placement.c66d252e82": [], "test.twitter_ads.not_null_twitter_ads__line_item_report_date_day.86c934e8ce": [], "test.twitter_ads.not_null_twitter_ads__line_item_report_line_item_id.0462d58211": [], "test.twitter_ads.not_null_twitter_ads__line_item_report_placement.f103369312": [], "test.twitter_ads.not_null_twitter_ads__account_report_date_day.84896c5846": [], "test.twitter_ads.not_null_twitter_ads__account_report_placement.157dcb6194": [], "test.twitter_ads.not_null_twitter_ads__account_report_account_id.90d5808908": [], "test.twitter_ads.not_null_twitter_ads__keyword_report_date_day.e0ce90c1ec": [], "test.twitter_ads.not_null_twitter_ads__keyword_report_keyword_id.91efa0a538": [], "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_placement.d89c9b27e5": [], "test.twitter_ads.not_null_twitter_ads__promoted_tweet_report_promoted_tweet_id.5df08e154e": [], "test.twitter_ads.not_null_twitter_ads__url_report_date_day.33fcb7e04b": [], "test.twitter_ads.not_null_twitter_ads__url_report_placement.92ca3b192e": [], "test.twitter_ads.not_null_twitter_ads__url_report_promoted_tweet_id.d690f99143": [], "test.twitter_ads.not_null_twitter_ads__url_report_base_url.dfd7ab549e": [], "test.twitter_ads.not_null_twitter_ads__campaign_country_report_campaign_id.d08c7d25a2": [], "test.twitter_ads.not_null_twitter_ads__campaign_country_report_date_day.33eabfbcaa": [], "test.twitter_ads.not_null_twitter_ads__campaign_country_report_placement.3a4c65b9c5": [], "test.twitter_ads.not_null_twitter_ads__campaign_region_report_campaign_id.c06b8be032": [], "test.twitter_ads.not_null_twitter_ads__campaign_region_report_date_day.884ad86a28": [], "test.twitter_ads.not_null_twitter_ads__campaign_region_report_placement.e6fb374bf5": [], "test.twitter_ads.not_null_stg_twitter_ads__account_history_account_id.66fb3601e2": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_history_campaign_id.51218487ce": [], "test.twitter_ads.not_null_stg_twitter_ads__line_item_history_line_item_id.2cef040809": [], "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_history_promoted_tweet_id.f447a1cd09": [], "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_date_day.c4c46a5894": [], "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_promoted_tweet_id.6028694598": [], "test.twitter_ads.not_null_stg_twitter_ads__promoted_tweet_report_placement.c1b1f648b3": [], "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_index.e998fb67be": [], "test.twitter_ads.not_null_stg_twitter_ads__tweet_url_tweet_id.f7e1670218": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_date_day.053c09786c": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_campaign_id.a63b62981f": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_report_placement.5067d8c4f4": [], "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_date_day.0f4d8cc8fe": [], "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_line_item_id.9f5a4860b7": [], "test.twitter_ads.not_null_stg_twitter_ads__line_item_report_placement.cd7e77e0eb": [], "test.twitter_ads.not_null_stg_twitter_ads__line_item_keywords_report_keyword_id.e5f015e9ec": [], "test.twitter_ads.not_null_stg_twitter_ads__line_item_keywords_report_date_day.c7e7155b13": [], "test.twitter_ads.not_null_stg_twitter_ads__tweet_tweet_id.a0427f37cd": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_country.8bc44f6e39": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_date_day.bf69378746": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_campaign_id.e1ddc306c2": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_locations_report_placement.638fb0cf03": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_regions_report_region.7b8b6fd555": [], "test.twitter_ads.not_null_stg_twitter_ads__campaign_regions_report_date_day.e7f9f99776": [], "source.mezo.raw_other_marketing_costs.other_marketing_costs": ["model.mezo.stg_paid__raw_other_marketing_costs"], "source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__liquidation": ["model.mezo.stg_goldsky_musd_trove_manager__liquidation"], "source.mezo.raw_goldsky.raw_goldsky_musd_trove_manager__trove_liquidated": ["model.mezo.stg_goldsky_musd_trove_manager__trove_liquidated"], "source.mezo.raw_goldsky.raw_goldsky_borrower_operations_mezo__trove_updated": ["model.mezo.stg_goldsky_borrower_operations_mezo__trove_updated"], "source.mezo.raw_goldsky.raw_goldsky_market_mezo__donated": ["model.mezo.stg_goldsky_market_mezo__donated"], "source.mezo.raw_goldsky.raw_goldsky_market_mezo__order_placed": ["model.mezo.stg_goldsky_market_mezo__order_placed"], "source.mezo.raw_goldsky.raw_goldsky_mezo_bridge_mainnet__assets_locked": ["model.mezo.stg_goldsky_mezo_bridge_mainnet__assets_locked"], "source.mezo.raw_goldsky.raw_goldsky_mezo_vaults_mezo__transfer": ["model.mezo.stg_goldsky_mezo_vaults_mezo__transfer"], "source.mezo.raw_coin_gecko.coins": ["model.mezo.stg_coin_gecko__coins"], "source.mezo.raw_coin_gecko.prices": ["model.mezo.stg_coin_gecko__prices"], "source.mezo.raw_segment_profiles.tracks_view": ["model.mezo.stg_segment_profiles__tracks"], "source.mezo.raw_segment_profiles.pages_view": ["model.mezo.stg_segment_profiles__pages"], "source.mezo.raw_segment_profiles.identify": [], "source.mezo.raw_segment_profiles.user_identifiers": ["model.mezo.stg_segment_profiles__user_identifiers"], "source.twitter_ads.twitter_ads.account_history": ["model.twitter_ads.stg_twitter_ads__account_history_tmp"], "source.twitter_ads.twitter_ads.campaign_history": ["model.twitter_ads.stg_twitter_ads__campaign_history_tmp"], "source.twitter_ads.twitter_ads.line_item_history": ["model.twitter_ads.stg_twitter_ads__line_item_history_tmp"], "source.twitter_ads.twitter_ads.promoted_tweet_history": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_history_tmp"], "source.twitter_ads.twitter_ads.tweet_url": ["model.twitter_ads.stg_twitter_ads__tweet_url_tmp"], "source.twitter_ads.twitter_ads.promoted_tweet_report": ["model.twitter_ads.stg_twitter_ads__promoted_tweet_report_tmp"], "source.twitter_ads.twitter_ads.tweet": ["model.twitter_ads.stg_twitter_ads__tweet_tmp"], "source.twitter_ads.twitter_ads.campaign_report": ["model.twitter_ads.stg_twitter_ads__campaign_report_tmp"], "source.twitter_ads.twitter_ads.line_item_report": ["model.twitter_ads.stg_twitter_ads__line_item_report_tmp"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}